
MC1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002cc4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000e2  00800060  00002cc4  00002d58  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800142  00800142  00002e3a  2**0
                  ALLOC
  3 .stab         000026ac  00000000  00000000  00002e3c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000104e  00000000  00000000  000054e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00006536  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00006676  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000067e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000842f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000931a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000a0c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000a228  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000a4b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000ac83  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 ec       	ldi	r30, 0xC4	; 196
      68:	fc e2       	ldi	r31, 0x2C	; 44
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 34       	cpi	r26, 0x42	; 66
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a2 e4       	ldi	r26, 0x42	; 66
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a3 34       	cpi	r26, 0x43	; 67
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a3 05 	call	0xb46	; 0xb46 <main>
      8a:	0c 94 60 16 	jmp	0x2cc0	; 0x2cc0 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 e4 15 	jmp	0x2bc8	; 0x2bc8 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a2 e3       	ldi	r26, 0x32	; 50
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 00 16 	jmp	0x2c00	; 0x2c00 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 f0 15 	jmp	0x2be0	; 0x2be0 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 0c 16 	jmp	0x2c18	; 0x2c18 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 f0 15 	jmp	0x2be0	; 0x2be0 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 0c 16 	jmp	0x2c18	; 0x2c18 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 e4 15 	jmp	0x2bc8	; 0x2bc8 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	82 e3       	ldi	r24, 0x32	; 50
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 00 16 	jmp	0x2c00	; 0x2c00 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 f0 15 	jmp	0x2be0	; 0x2be0 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 0c 16 	jmp	0x2c18	; 0x2c18 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 f0 15 	jmp	0x2be0	; 0x2be0 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 0c 16 	jmp	0x2c18	; 0x2c18 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 f0 15 	jmp	0x2be0	; 0x2be0 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 0c 16 	jmp	0x2c18	; 0x2c18 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 f4 15 	jmp	0x2be8	; 0x2be8 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 10 16 	jmp	0x2c20	; 0x2c20 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <main>:
static void opendoor(void);




int main(void){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	2e 97       	sbiw	r28, 0x0e	; 14
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
	LCD_init();
     b5a:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <LCD_init>
	UART_ConfigType config_uart = {BITS_8,DISABLED,BIT_1,9600};
     b5e:	9e 01       	movw	r18, r28
     b60:	2f 5f       	subi	r18, 0xFF	; 255
     b62:	3f 4f       	sbci	r19, 0xFF	; 255
     b64:	3b 87       	std	Y+11, r19	; 0x0b
     b66:	2a 87       	std	Y+10, r18	; 0x0a
     b68:	8a e3       	ldi	r24, 0x3A	; 58
     b6a:	91 e0       	ldi	r25, 0x01	; 1
     b6c:	9d 87       	std	Y+13, r25	; 0x0d
     b6e:	8c 87       	std	Y+12, r24	; 0x0c
     b70:	97 e0       	ldi	r25, 0x07	; 7
     b72:	9e 87       	std	Y+14, r25	; 0x0e
     b74:	ec 85       	ldd	r30, Y+12	; 0x0c
     b76:	fd 85       	ldd	r31, Y+13	; 0x0d
     b78:	00 80       	ld	r0, Z
     b7a:	2c 85       	ldd	r18, Y+12	; 0x0c
     b7c:	3d 85       	ldd	r19, Y+13	; 0x0d
     b7e:	2f 5f       	subi	r18, 0xFF	; 255
     b80:	3f 4f       	sbci	r19, 0xFF	; 255
     b82:	3d 87       	std	Y+13, r19	; 0x0d
     b84:	2c 87       	std	Y+12, r18	; 0x0c
     b86:	ea 85       	ldd	r30, Y+10	; 0x0a
     b88:	fb 85       	ldd	r31, Y+11	; 0x0b
     b8a:	00 82       	st	Z, r0
     b8c:	2a 85       	ldd	r18, Y+10	; 0x0a
     b8e:	3b 85       	ldd	r19, Y+11	; 0x0b
     b90:	2f 5f       	subi	r18, 0xFF	; 255
     b92:	3f 4f       	sbci	r19, 0xFF	; 255
     b94:	3b 87       	std	Y+11, r19	; 0x0b
     b96:	2a 87       	std	Y+10, r18	; 0x0a
     b98:	3e 85       	ldd	r19, Y+14	; 0x0e
     b9a:	31 50       	subi	r19, 0x01	; 1
     b9c:	3e 87       	std	Y+14, r19	; 0x0e
     b9e:	8e 85       	ldd	r24, Y+14	; 0x0e
     ba0:	88 23       	and	r24, r24
     ba2:	41 f7       	brne	.-48     	; 0xb74 <main+0x2e>
	UART_init(&config_uart);
     ba4:	ce 01       	movw	r24, r28
     ba6:	01 96       	adiw	r24, 0x01	; 1
     ba8:	0e 94 94 14 	call	0x2928	; 0x2928 <UART_init>
	while(1){
		UART_sendByte(MC1_READY);
     bac:	80 e1       	ldi	r24, 0x10	; 16
     bae:	0e 94 30 15 	call	0x2a60	; 0x2a60 <UART_sendByte>
		g_systemState = UART_receiveByte();
     bb2:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <UART_receiveByte>
     bb6:	80 93 42 01 	sts	0x0142, r24
		LCD_clearScreen();
     bba:	0e 94 8a 14 	call	0x2914	; 0x2914 <LCD_clearScreen>
		switch(g_systemState){
     bbe:	80 91 42 01 	lds	r24, 0x0142
     bc2:	e8 2f       	mov	r30, r24
     bc4:	f0 e0       	ldi	r31, 0x00	; 0
     bc6:	f9 87       	std	Y+9, r31	; 0x09
     bc8:	e8 87       	std	Y+8, r30	; 0x08
     bca:	28 85       	ldd	r18, Y+8	; 0x08
     bcc:	39 85       	ldd	r19, Y+9	; 0x09
     bce:	23 30       	cpi	r18, 0x03	; 3
     bd0:	31 05       	cpc	r19, r1
     bd2:	54 f4       	brge	.+20     	; 0xbe8 <main+0xa2>
     bd4:	88 85       	ldd	r24, Y+8	; 0x08
     bd6:	99 85       	ldd	r25, Y+9	; 0x09
     bd8:	81 30       	cpi	r24, 0x01	; 1
     bda:	91 05       	cpc	r25, r1
     bdc:	dc f4       	brge	.+54     	; 0xc14 <main+0xce>
     bde:	e8 85       	ldd	r30, Y+8	; 0x08
     be0:	f9 85       	ldd	r31, Y+9	; 0x09
     be2:	30 97       	sbiw	r30, 0x00	; 0
     be4:	89 f0       	breq	.+34     	; 0xc08 <main+0xc2>
     be6:	e2 cf       	rjmp	.-60     	; 0xbac <main+0x66>
     be8:	28 85       	ldd	r18, Y+8	; 0x08
     bea:	39 85       	ldd	r19, Y+9	; 0x09
     bec:	24 30       	cpi	r18, 0x04	; 4
     bee:	31 05       	cpc	r19, r1
     bf0:	b9 f0       	breq	.+46     	; 0xc20 <main+0xda>
     bf2:	88 85       	ldd	r24, Y+8	; 0x08
     bf4:	99 85       	ldd	r25, Y+9	; 0x09
     bf6:	84 30       	cpi	r24, 0x04	; 4
     bf8:	91 05       	cpc	r25, r1
     bfa:	4c f0       	brlt	.+18     	; 0xc0e <main+0xc8>
     bfc:	e8 85       	ldd	r30, Y+8	; 0x08
     bfe:	f9 85       	ldd	r31, Y+9	; 0x09
     c00:	e6 30       	cpi	r30, 0x06	; 6
     c02:	f1 05       	cpc	r31, r1
     c04:	51 f0       	breq	.+20     	; 0xc1a <main+0xd4>
     c06:	d2 cf       	rjmp	.-92     	; 0xbac <main+0x66>
		case NEW_PASSWORD:
			createNewPassword();
     c08:	0e 94 1f 06 	call	0xc3e	; 0xc3e <createNewPassword>
     c0c:	cf cf       	rjmp	.-98     	; 0xbac <main+0x66>
			break;
		case VIEW_OPTIONS:
			viewOptions();
     c0e:	0e 94 ad 09 	call	0x135a	; 0x135a <viewOptions>
     c12:	cc cf       	rjmp	.-104    	; 0xbac <main+0x66>
			break;
		case CHECK_PASSWORD_FOR_OPEN_DOOR:
		case CHECK_PASSWORD_FOR_NEW_PASSWORD:
			getPassword();
     c14:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <getPassword>
     c18:	c9 cf       	rjmp	.-110    	; 0xbac <main+0x66>
			break;
		case OPEN_DOOR:
			opendoor();
     c1a:	0e 94 a5 0b 	call	0x174a	; 0x174a <opendoor>
     c1e:	c6 cf       	rjmp	.-116    	; 0xbac <main+0x66>
			break;
		case BUZZER_ON:
			LCD_clearScreen();
     c20:	0e 94 8a 14 	call	0x2914	; 0x2914 <LCD_clearScreen>
			LCD_displayString("Calling 911...");
     c24:	80 e6       	ldi	r24, 0x60	; 96
     c26:	90 e0       	ldi	r25, 0x00	; 0
     c28:	0e 94 e3 13 	call	0x27c6	; 0x27c6 <LCD_displayString>
			LCD_moveCursor(1,0);
     c2c:	81 e0       	ldi	r24, 0x01	; 1
     c2e:	60 e0       	ldi	r22, 0x00	; 0
     c30:	0e 94 0c 14 	call	0x2818	; 0x2818 <LCD_moveCursor>
			LCD_displayString("RUN!!!!!!");
     c34:	8f e6       	ldi	r24, 0x6F	; 111
     c36:	90 e0       	ldi	r25, 0x00	; 0
     c38:	0e 94 e3 13 	call	0x27c6	; 0x27c6 <LCD_displayString>
     c3c:	b7 cf       	rjmp	.-146    	; 0xbac <main+0x66>

00000c3e <createNewPassword>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

static uint8 createNewPassword(void){
     c3e:	0f 93       	push	r16
     c40:	1f 93       	push	r17
     c42:	df 93       	push	r29
     c44:	cf 93       	push	r28
     c46:	cd b7       	in	r28, 0x3d	; 61
     c48:	de b7       	in	r29, 0x3e	; 62
     c4a:	c8 55       	subi	r28, 0x58	; 88
     c4c:	d0 40       	sbci	r29, 0x00	; 0
     c4e:	0f b6       	in	r0, 0x3f	; 63
     c50:	f8 94       	cli
     c52:	de bf       	out	0x3e, r29	; 62
     c54:	0f be       	out	0x3f, r0	; 63
     c56:	cd bf       	out	0x3d, r28	; 61
	uint8 passCounter,state = FALSE;
     c58:	fe 01       	movw	r30, r28
     c5a:	e9 5b       	subi	r30, 0xB9	; 185
     c5c:	ff 4f       	sbci	r31, 0xFF	; 255
     c5e:	10 82       	st	Z, r1
	uint8 password[8];
	uint8 confirmPass[8];

	do{
		LCD_clearScreen();
     c60:	0e 94 8a 14 	call	0x2914	; 0x2914 <LCD_clearScreen>
		LCD_displayString("Enter New Pass");
     c64:	89 e7       	ldi	r24, 0x79	; 121
     c66:	90 e0       	ldi	r25, 0x00	; 0
     c68:	0e 94 e3 13 	call	0x27c6	; 0x27c6 <LCD_displayString>
		LCD_moveCursor(1,0);
     c6c:	81 e0       	ldi	r24, 0x01	; 1
     c6e:	60 e0       	ldi	r22, 0x00	; 0
     c70:	0e 94 0c 14 	call	0x2818	; 0x2818 <LCD_moveCursor>
		/* Take the password from user*/
		for(passCounter = 0;passCounter<5;passCounter++)
     c74:	fe 01       	movw	r30, r28
     c76:	e8 5b       	subi	r30, 0xB8	; 184
     c78:	ff 4f       	sbci	r31, 0xFF	; 255
     c7a:	10 82       	st	Z, r1
     c7c:	a1 c0       	rjmp	.+322    	; 0xdc0 <createNewPassword+0x182>
		{
			password[passCounter] = KEYPAD_getPressedKey();
     c7e:	fe 01       	movw	r30, r28
     c80:	e8 5b       	subi	r30, 0xB8	; 184
     c82:	ff 4f       	sbci	r31, 0xFF	; 255
     c84:	80 81       	ld	r24, Z
     c86:	08 2f       	mov	r16, r24
     c88:	10 e0       	ldi	r17, 0x00	; 0
     c8a:	0e 94 4f 0f 	call	0x1e9e	; 0x1e9e <KEYPAD_getPressedKey>
     c8e:	28 2f       	mov	r18, r24
     c90:	ce 01       	movw	r24, r28
     c92:	87 5b       	subi	r24, 0xB7	; 183
     c94:	9f 4f       	sbci	r25, 0xFF	; 255
     c96:	fc 01       	movw	r30, r24
     c98:	e0 0f       	add	r30, r16
     c9a:	f1 1f       	adc	r31, r17
     c9c:	20 83       	st	Z, r18
     c9e:	fe 01       	movw	r30, r28
     ca0:	ed 5b       	subi	r30, 0xBD	; 189
     ca2:	ff 4f       	sbci	r31, 0xFF	; 255
     ca4:	80 e0       	ldi	r24, 0x00	; 0
     ca6:	90 e0       	ldi	r25, 0x00	; 0
     ca8:	af ea       	ldi	r26, 0xAF	; 175
     caa:	b3 e4       	ldi	r27, 0x43	; 67
     cac:	80 83       	st	Z, r24
     cae:	91 83       	std	Z+1, r25	; 0x01
     cb0:	a2 83       	std	Z+2, r26	; 0x02
     cb2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     cb4:	8e 01       	movw	r16, r28
     cb6:	01 5c       	subi	r16, 0xC1	; 193
     cb8:	1f 4f       	sbci	r17, 0xFF	; 255
     cba:	fe 01       	movw	r30, r28
     cbc:	ed 5b       	subi	r30, 0xBD	; 189
     cbe:	ff 4f       	sbci	r31, 0xFF	; 255
     cc0:	60 81       	ld	r22, Z
     cc2:	71 81       	ldd	r23, Z+1	; 0x01
     cc4:	82 81       	ldd	r24, Z+2	; 0x02
     cc6:	93 81       	ldd	r25, Z+3	; 0x03
     cc8:	20 e0       	ldi	r18, 0x00	; 0
     cca:	30 e0       	ldi	r19, 0x00	; 0
     ccc:	4a ef       	ldi	r20, 0xFA	; 250
     cce:	54 e4       	ldi	r21, 0x44	; 68
     cd0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     cd4:	dc 01       	movw	r26, r24
     cd6:	cb 01       	movw	r24, r22
     cd8:	f8 01       	movw	r30, r16
     cda:	80 83       	st	Z, r24
     cdc:	91 83       	std	Z+1, r25	; 0x01
     cde:	a2 83       	std	Z+2, r26	; 0x02
     ce0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     ce2:	fe 01       	movw	r30, r28
     ce4:	ff 96       	adiw	r30, 0x3f	; 63
     ce6:	60 81       	ld	r22, Z
     ce8:	71 81       	ldd	r23, Z+1	; 0x01
     cea:	82 81       	ldd	r24, Z+2	; 0x02
     cec:	93 81       	ldd	r25, Z+3	; 0x03
     cee:	20 e0       	ldi	r18, 0x00	; 0
     cf0:	30 e0       	ldi	r19, 0x00	; 0
     cf2:	40 e8       	ldi	r20, 0x80	; 128
     cf4:	5f e3       	ldi	r21, 0x3F	; 63
     cf6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     cfa:	88 23       	and	r24, r24
     cfc:	2c f4       	brge	.+10     	; 0xd08 <createNewPassword+0xca>
		__ticks = 1;
     cfe:	81 e0       	ldi	r24, 0x01	; 1
     d00:	90 e0       	ldi	r25, 0x00	; 0
     d02:	9e af       	std	Y+62, r25	; 0x3e
     d04:	8d af       	std	Y+61, r24	; 0x3d
     d06:	46 c0       	rjmp	.+140    	; 0xd94 <createNewPassword+0x156>
	else if (__tmp > 65535)
     d08:	fe 01       	movw	r30, r28
     d0a:	ff 96       	adiw	r30, 0x3f	; 63
     d0c:	60 81       	ld	r22, Z
     d0e:	71 81       	ldd	r23, Z+1	; 0x01
     d10:	82 81       	ldd	r24, Z+2	; 0x02
     d12:	93 81       	ldd	r25, Z+3	; 0x03
     d14:	20 e0       	ldi	r18, 0x00	; 0
     d16:	3f ef       	ldi	r19, 0xFF	; 255
     d18:	4f e7       	ldi	r20, 0x7F	; 127
     d1a:	57 e4       	ldi	r21, 0x47	; 71
     d1c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     d20:	18 16       	cp	r1, r24
     d22:	64 f5       	brge	.+88     	; 0xd7c <createNewPassword+0x13e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d24:	fe 01       	movw	r30, r28
     d26:	ed 5b       	subi	r30, 0xBD	; 189
     d28:	ff 4f       	sbci	r31, 0xFF	; 255
     d2a:	60 81       	ld	r22, Z
     d2c:	71 81       	ldd	r23, Z+1	; 0x01
     d2e:	82 81       	ldd	r24, Z+2	; 0x02
     d30:	93 81       	ldd	r25, Z+3	; 0x03
     d32:	20 e0       	ldi	r18, 0x00	; 0
     d34:	30 e0       	ldi	r19, 0x00	; 0
     d36:	40 e2       	ldi	r20, 0x20	; 32
     d38:	51 e4       	ldi	r21, 0x41	; 65
     d3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d3e:	dc 01       	movw	r26, r24
     d40:	cb 01       	movw	r24, r22
     d42:	bc 01       	movw	r22, r24
     d44:	cd 01       	movw	r24, r26
     d46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d4a:	dc 01       	movw	r26, r24
     d4c:	cb 01       	movw	r24, r22
     d4e:	9e af       	std	Y+62, r25	; 0x3e
     d50:	8d af       	std	Y+61, r24	; 0x3d
     d52:	0f c0       	rjmp	.+30     	; 0xd72 <createNewPassword+0x134>
     d54:	88 ec       	ldi	r24, 0xC8	; 200
     d56:	90 e0       	ldi	r25, 0x00	; 0
     d58:	9c af       	std	Y+60, r25	; 0x3c
     d5a:	8b af       	std	Y+59, r24	; 0x3b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     d5c:	8b ad       	ldd	r24, Y+59	; 0x3b
     d5e:	9c ad       	ldd	r25, Y+60	; 0x3c
     d60:	01 97       	sbiw	r24, 0x01	; 1
     d62:	f1 f7       	brne	.-4      	; 0xd60 <createNewPassword+0x122>
     d64:	9c af       	std	Y+60, r25	; 0x3c
     d66:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d68:	8d ad       	ldd	r24, Y+61	; 0x3d
     d6a:	9e ad       	ldd	r25, Y+62	; 0x3e
     d6c:	01 97       	sbiw	r24, 0x01	; 1
     d6e:	9e af       	std	Y+62, r25	; 0x3e
     d70:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d72:	8d ad       	ldd	r24, Y+61	; 0x3d
     d74:	9e ad       	ldd	r25, Y+62	; 0x3e
     d76:	00 97       	sbiw	r24, 0x00	; 0
     d78:	69 f7       	brne	.-38     	; 0xd54 <createNewPassword+0x116>
     d7a:	16 c0       	rjmp	.+44     	; 0xda8 <createNewPassword+0x16a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d7c:	fe 01       	movw	r30, r28
     d7e:	ff 96       	adiw	r30, 0x3f	; 63
     d80:	60 81       	ld	r22, Z
     d82:	71 81       	ldd	r23, Z+1	; 0x01
     d84:	82 81       	ldd	r24, Z+2	; 0x02
     d86:	93 81       	ldd	r25, Z+3	; 0x03
     d88:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d8c:	dc 01       	movw	r26, r24
     d8e:	cb 01       	movw	r24, r22
     d90:	9e af       	std	Y+62, r25	; 0x3e
     d92:	8d af       	std	Y+61, r24	; 0x3d
     d94:	8d ad       	ldd	r24, Y+61	; 0x3d
     d96:	9e ad       	ldd	r25, Y+62	; 0x3e
     d98:	9a af       	std	Y+58, r25	; 0x3a
     d9a:	89 af       	std	Y+57, r24	; 0x39
     d9c:	89 ad       	ldd	r24, Y+57	; 0x39
     d9e:	9a ad       	ldd	r25, Y+58	; 0x3a
     da0:	01 97       	sbiw	r24, 0x01	; 1
     da2:	f1 f7       	brne	.-4      	; 0xda0 <createNewPassword+0x162>
     da4:	9a af       	std	Y+58, r25	; 0x3a
     da6:	89 af       	std	Y+57, r24	; 0x39
			_delay_ms(350);
			LCD_displayCharacter('*');
     da8:	8a e2       	ldi	r24, 0x2A	; 42
     daa:	0e 94 ee 11 	call	0x23dc	; 0x23dc <LCD_displayCharacter>
	do{
		LCD_clearScreen();
		LCD_displayString("Enter New Pass");
		LCD_moveCursor(1,0);
		/* Take the password from user*/
		for(passCounter = 0;passCounter<5;passCounter++)
     dae:	de 01       	movw	r26, r28
     db0:	a8 5b       	subi	r26, 0xB8	; 184
     db2:	bf 4f       	sbci	r27, 0xFF	; 255
     db4:	fe 01       	movw	r30, r28
     db6:	e8 5b       	subi	r30, 0xB8	; 184
     db8:	ff 4f       	sbci	r31, 0xFF	; 255
     dba:	80 81       	ld	r24, Z
     dbc:	8f 5f       	subi	r24, 0xFF	; 255
     dbe:	8c 93       	st	X, r24
     dc0:	fe 01       	movw	r30, r28
     dc2:	e8 5b       	subi	r30, 0xB8	; 184
     dc4:	ff 4f       	sbci	r31, 0xFF	; 255
     dc6:	80 81       	ld	r24, Z
     dc8:	85 30       	cpi	r24, 0x05	; 5
     dca:	08 f4       	brcc	.+2      	; 0xdce <createNewPassword+0x190>
     dcc:	58 cf       	rjmp	.-336    	; 0xc7e <createNewPassword+0x40>
		{
			password[passCounter] = KEYPAD_getPressedKey();
			_delay_ms(350);
			LCD_displayCharacter('*');
		}
		password[passCounter]='#';
     dce:	fe 01       	movw	r30, r28
     dd0:	e8 5b       	subi	r30, 0xB8	; 184
     dd2:	ff 4f       	sbci	r31, 0xFF	; 255
     dd4:	80 81       	ld	r24, Z
     dd6:	28 2f       	mov	r18, r24
     dd8:	30 e0       	ldi	r19, 0x00	; 0
     dda:	ce 01       	movw	r24, r28
     ddc:	87 5b       	subi	r24, 0xB7	; 183
     dde:	9f 4f       	sbci	r25, 0xFF	; 255
     de0:	fc 01       	movw	r30, r24
     de2:	e2 0f       	add	r30, r18
     de4:	f3 1f       	adc	r31, r19
     de6:	83 e2       	ldi	r24, 0x23	; 35
     de8:	80 83       	st	Z, r24
		password[++passCounter]='\0';
     dea:	de 01       	movw	r26, r28
     dec:	a8 5b       	subi	r26, 0xB8	; 184
     dee:	bf 4f       	sbci	r27, 0xFF	; 255
     df0:	fe 01       	movw	r30, r28
     df2:	e8 5b       	subi	r30, 0xB8	; 184
     df4:	ff 4f       	sbci	r31, 0xFF	; 255
     df6:	80 81       	ld	r24, Z
     df8:	8f 5f       	subi	r24, 0xFF	; 255
     dfa:	8c 93       	st	X, r24
     dfc:	fe 01       	movw	r30, r28
     dfe:	e8 5b       	subi	r30, 0xB8	; 184
     e00:	ff 4f       	sbci	r31, 0xFF	; 255
     e02:	80 81       	ld	r24, Z
     e04:	28 2f       	mov	r18, r24
     e06:	30 e0       	ldi	r19, 0x00	; 0
     e08:	ce 01       	movw	r24, r28
     e0a:	87 5b       	subi	r24, 0xB7	; 183
     e0c:	9f 4f       	sbci	r25, 0xFF	; 255
     e0e:	fc 01       	movw	r30, r24
     e10:	e2 0f       	add	r30, r18
     e12:	f3 1f       	adc	r31, r19
     e14:	10 82       	st	Z, r1
		LCD_clearScreen();
     e16:	0e 94 8a 14 	call	0x2914	; 0x2914 <LCD_clearScreen>
		LCD_displayString("Confirm Pass");
     e1a:	88 e8       	ldi	r24, 0x88	; 136
     e1c:	90 e0       	ldi	r25, 0x00	; 0
     e1e:	0e 94 e3 13 	call	0x27c6	; 0x27c6 <LCD_displayString>
		LCD_moveCursor(1,0);
     e22:	81 e0       	ldi	r24, 0x01	; 1
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	0e 94 0c 14 	call	0x2818	; 0x2818 <LCD_moveCursor>
		/* Re-take the password to confirm it*/
		for(passCounter = 0;passCounter<5;passCounter++)
     e2a:	fe 01       	movw	r30, r28
     e2c:	e8 5b       	subi	r30, 0xB8	; 184
     e2e:	ff 4f       	sbci	r31, 0xFF	; 255
     e30:	10 82       	st	Z, r1
     e32:	8e c0       	rjmp	.+284    	; 0xf50 <createNewPassword+0x312>
		{
			confirmPass[passCounter]=KEYPAD_getPressedKey();
     e34:	fe 01       	movw	r30, r28
     e36:	e8 5b       	subi	r30, 0xB8	; 184
     e38:	ff 4f       	sbci	r31, 0xFF	; 255
     e3a:	80 81       	ld	r24, Z
     e3c:	08 2f       	mov	r16, r24
     e3e:	10 e0       	ldi	r17, 0x00	; 0
     e40:	0e 94 4f 0f 	call	0x1e9e	; 0x1e9e <KEYPAD_getPressedKey>
     e44:	28 2f       	mov	r18, r24
     e46:	ce 01       	movw	r24, r28
     e48:	8f 5a       	subi	r24, 0xAF	; 175
     e4a:	9f 4f       	sbci	r25, 0xFF	; 255
     e4c:	fc 01       	movw	r30, r24
     e4e:	e0 0f       	add	r30, r16
     e50:	f1 1f       	adc	r31, r17
     e52:	20 83       	st	Z, r18
     e54:	80 e0       	ldi	r24, 0x00	; 0
     e56:	90 e0       	ldi	r25, 0x00	; 0
     e58:	af ea       	ldi	r26, 0xAF	; 175
     e5a:	b3 e4       	ldi	r27, 0x43	; 67
     e5c:	8d ab       	std	Y+53, r24	; 0x35
     e5e:	9e ab       	std	Y+54, r25	; 0x36
     e60:	af ab       	std	Y+55, r26	; 0x37
     e62:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e64:	6d a9       	ldd	r22, Y+53	; 0x35
     e66:	7e a9       	ldd	r23, Y+54	; 0x36
     e68:	8f a9       	ldd	r24, Y+55	; 0x37
     e6a:	98 ad       	ldd	r25, Y+56	; 0x38
     e6c:	20 e0       	ldi	r18, 0x00	; 0
     e6e:	30 e0       	ldi	r19, 0x00	; 0
     e70:	4a ef       	ldi	r20, 0xFA	; 250
     e72:	54 e4       	ldi	r21, 0x44	; 68
     e74:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e78:	dc 01       	movw	r26, r24
     e7a:	cb 01       	movw	r24, r22
     e7c:	89 ab       	std	Y+49, r24	; 0x31
     e7e:	9a ab       	std	Y+50, r25	; 0x32
     e80:	ab ab       	std	Y+51, r26	; 0x33
     e82:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     e84:	69 a9       	ldd	r22, Y+49	; 0x31
     e86:	7a a9       	ldd	r23, Y+50	; 0x32
     e88:	8b a9       	ldd	r24, Y+51	; 0x33
     e8a:	9c a9       	ldd	r25, Y+52	; 0x34
     e8c:	20 e0       	ldi	r18, 0x00	; 0
     e8e:	30 e0       	ldi	r19, 0x00	; 0
     e90:	40 e8       	ldi	r20, 0x80	; 128
     e92:	5f e3       	ldi	r21, 0x3F	; 63
     e94:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e98:	88 23       	and	r24, r24
     e9a:	2c f4       	brge	.+10     	; 0xea6 <createNewPassword+0x268>
		__ticks = 1;
     e9c:	81 e0       	ldi	r24, 0x01	; 1
     e9e:	90 e0       	ldi	r25, 0x00	; 0
     ea0:	98 ab       	std	Y+48, r25	; 0x30
     ea2:	8f a7       	std	Y+47, r24	; 0x2f
     ea4:	3f c0       	rjmp	.+126    	; 0xf24 <createNewPassword+0x2e6>
	else if (__tmp > 65535)
     ea6:	69 a9       	ldd	r22, Y+49	; 0x31
     ea8:	7a a9       	ldd	r23, Y+50	; 0x32
     eaa:	8b a9       	ldd	r24, Y+51	; 0x33
     eac:	9c a9       	ldd	r25, Y+52	; 0x34
     eae:	20 e0       	ldi	r18, 0x00	; 0
     eb0:	3f ef       	ldi	r19, 0xFF	; 255
     eb2:	4f e7       	ldi	r20, 0x7F	; 127
     eb4:	57 e4       	ldi	r21, 0x47	; 71
     eb6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     eba:	18 16       	cp	r1, r24
     ebc:	4c f5       	brge	.+82     	; 0xf10 <createNewPassword+0x2d2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ebe:	6d a9       	ldd	r22, Y+53	; 0x35
     ec0:	7e a9       	ldd	r23, Y+54	; 0x36
     ec2:	8f a9       	ldd	r24, Y+55	; 0x37
     ec4:	98 ad       	ldd	r25, Y+56	; 0x38
     ec6:	20 e0       	ldi	r18, 0x00	; 0
     ec8:	30 e0       	ldi	r19, 0x00	; 0
     eca:	40 e2       	ldi	r20, 0x20	; 32
     ecc:	51 e4       	ldi	r21, 0x41	; 65
     ece:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ed2:	dc 01       	movw	r26, r24
     ed4:	cb 01       	movw	r24, r22
     ed6:	bc 01       	movw	r22, r24
     ed8:	cd 01       	movw	r24, r26
     eda:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ede:	dc 01       	movw	r26, r24
     ee0:	cb 01       	movw	r24, r22
     ee2:	98 ab       	std	Y+48, r25	; 0x30
     ee4:	8f a7       	std	Y+47, r24	; 0x2f
     ee6:	0f c0       	rjmp	.+30     	; 0xf06 <createNewPassword+0x2c8>
     ee8:	88 ec       	ldi	r24, 0xC8	; 200
     eea:	90 e0       	ldi	r25, 0x00	; 0
     eec:	9e a7       	std	Y+46, r25	; 0x2e
     eee:	8d a7       	std	Y+45, r24	; 0x2d
     ef0:	8d a5       	ldd	r24, Y+45	; 0x2d
     ef2:	9e a5       	ldd	r25, Y+46	; 0x2e
     ef4:	01 97       	sbiw	r24, 0x01	; 1
     ef6:	f1 f7       	brne	.-4      	; 0xef4 <createNewPassword+0x2b6>
     ef8:	9e a7       	std	Y+46, r25	; 0x2e
     efa:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     efc:	8f a5       	ldd	r24, Y+47	; 0x2f
     efe:	98 a9       	ldd	r25, Y+48	; 0x30
     f00:	01 97       	sbiw	r24, 0x01	; 1
     f02:	98 ab       	std	Y+48, r25	; 0x30
     f04:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f06:	8f a5       	ldd	r24, Y+47	; 0x2f
     f08:	98 a9       	ldd	r25, Y+48	; 0x30
     f0a:	00 97       	sbiw	r24, 0x00	; 0
     f0c:	69 f7       	brne	.-38     	; 0xee8 <createNewPassword+0x2aa>
     f0e:	14 c0       	rjmp	.+40     	; 0xf38 <createNewPassword+0x2fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f10:	69 a9       	ldd	r22, Y+49	; 0x31
     f12:	7a a9       	ldd	r23, Y+50	; 0x32
     f14:	8b a9       	ldd	r24, Y+51	; 0x33
     f16:	9c a9       	ldd	r25, Y+52	; 0x34
     f18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f1c:	dc 01       	movw	r26, r24
     f1e:	cb 01       	movw	r24, r22
     f20:	98 ab       	std	Y+48, r25	; 0x30
     f22:	8f a7       	std	Y+47, r24	; 0x2f
     f24:	8f a5       	ldd	r24, Y+47	; 0x2f
     f26:	98 a9       	ldd	r25, Y+48	; 0x30
     f28:	9c a7       	std	Y+44, r25	; 0x2c
     f2a:	8b a7       	std	Y+43, r24	; 0x2b
     f2c:	8b a5       	ldd	r24, Y+43	; 0x2b
     f2e:	9c a5       	ldd	r25, Y+44	; 0x2c
     f30:	01 97       	sbiw	r24, 0x01	; 1
     f32:	f1 f7       	brne	.-4      	; 0xf30 <createNewPassword+0x2f2>
     f34:	9c a7       	std	Y+44, r25	; 0x2c
     f36:	8b a7       	std	Y+43, r24	; 0x2b
			_delay_ms(350);
			LCD_displayCharacter('*');
     f38:	8a e2       	ldi	r24, 0x2A	; 42
     f3a:	0e 94 ee 11 	call	0x23dc	; 0x23dc <LCD_displayCharacter>
		password[++passCounter]='\0';
		LCD_clearScreen();
		LCD_displayString("Confirm Pass");
		LCD_moveCursor(1,0);
		/* Re-take the password to confirm it*/
		for(passCounter = 0;passCounter<5;passCounter++)
     f3e:	de 01       	movw	r26, r28
     f40:	a8 5b       	subi	r26, 0xB8	; 184
     f42:	bf 4f       	sbci	r27, 0xFF	; 255
     f44:	fe 01       	movw	r30, r28
     f46:	e8 5b       	subi	r30, 0xB8	; 184
     f48:	ff 4f       	sbci	r31, 0xFF	; 255
     f4a:	80 81       	ld	r24, Z
     f4c:	8f 5f       	subi	r24, 0xFF	; 255
     f4e:	8c 93       	st	X, r24
     f50:	fe 01       	movw	r30, r28
     f52:	e8 5b       	subi	r30, 0xB8	; 184
     f54:	ff 4f       	sbci	r31, 0xFF	; 255
     f56:	80 81       	ld	r24, Z
     f58:	85 30       	cpi	r24, 0x05	; 5
     f5a:	08 f4       	brcc	.+2      	; 0xf5e <createNewPassword+0x320>
     f5c:	6b cf       	rjmp	.-298    	; 0xe34 <createNewPassword+0x1f6>
		{
			confirmPass[passCounter]=KEYPAD_getPressedKey();
			_delay_ms(350);
			LCD_displayCharacter('*');
		}
		confirmPass[passCounter]='#';
     f5e:	fe 01       	movw	r30, r28
     f60:	e8 5b       	subi	r30, 0xB8	; 184
     f62:	ff 4f       	sbci	r31, 0xFF	; 255
     f64:	80 81       	ld	r24, Z
     f66:	28 2f       	mov	r18, r24
     f68:	30 e0       	ldi	r19, 0x00	; 0
     f6a:	ce 01       	movw	r24, r28
     f6c:	8f 5a       	subi	r24, 0xAF	; 175
     f6e:	9f 4f       	sbci	r25, 0xFF	; 255
     f70:	fc 01       	movw	r30, r24
     f72:	e2 0f       	add	r30, r18
     f74:	f3 1f       	adc	r31, r19
     f76:	83 e2       	ldi	r24, 0x23	; 35
     f78:	80 83       	st	Z, r24
		confirmPass[++passCounter]='\0';
     f7a:	de 01       	movw	r26, r28
     f7c:	a8 5b       	subi	r26, 0xB8	; 184
     f7e:	bf 4f       	sbci	r27, 0xFF	; 255
     f80:	fe 01       	movw	r30, r28
     f82:	e8 5b       	subi	r30, 0xB8	; 184
     f84:	ff 4f       	sbci	r31, 0xFF	; 255
     f86:	80 81       	ld	r24, Z
     f88:	8f 5f       	subi	r24, 0xFF	; 255
     f8a:	8c 93       	st	X, r24
     f8c:	fe 01       	movw	r30, r28
     f8e:	e8 5b       	subi	r30, 0xB8	; 184
     f90:	ff 4f       	sbci	r31, 0xFF	; 255
     f92:	80 81       	ld	r24, Z
     f94:	28 2f       	mov	r18, r24
     f96:	30 e0       	ldi	r19, 0x00	; 0
     f98:	ce 01       	movw	r24, r28
     f9a:	8f 5a       	subi	r24, 0xAF	; 175
     f9c:	9f 4f       	sbci	r25, 0xFF	; 255
     f9e:	fc 01       	movw	r30, r24
     fa0:	e2 0f       	add	r30, r18
     fa2:	f3 1f       	adc	r31, r19
     fa4:	10 82       	st	Z, r1
		state=FALSE;
     fa6:	fe 01       	movw	r30, r28
     fa8:	e9 5b       	subi	r30, 0xB9	; 185
     faa:	ff 4f       	sbci	r31, 0xFF	; 255
     fac:	10 82       	st	Z, r1
		for(passCounter =0;passCounter<5;passCounter++){
     fae:	fe 01       	movw	r30, r28
     fb0:	e8 5b       	subi	r30, 0xB8	; 184
     fb2:	ff 4f       	sbci	r31, 0xFF	; 255
     fb4:	10 82       	st	Z, r1
     fb6:	2a c0       	rjmp	.+84     	; 0x100c <createNewPassword+0x3ce>
			/*check the password is correct or not*/
			if(password[passCounter] != confirmPass[passCounter])
     fb8:	fe 01       	movw	r30, r28
     fba:	e8 5b       	subi	r30, 0xB8	; 184
     fbc:	ff 4f       	sbci	r31, 0xFF	; 255
     fbe:	80 81       	ld	r24, Z
     fc0:	28 2f       	mov	r18, r24
     fc2:	30 e0       	ldi	r19, 0x00	; 0
     fc4:	ce 01       	movw	r24, r28
     fc6:	87 5b       	subi	r24, 0xB7	; 183
     fc8:	9f 4f       	sbci	r25, 0xFF	; 255
     fca:	fc 01       	movw	r30, r24
     fcc:	e2 0f       	add	r30, r18
     fce:	f3 1f       	adc	r31, r19
     fd0:	40 81       	ld	r20, Z
     fd2:	fe 01       	movw	r30, r28
     fd4:	e8 5b       	subi	r30, 0xB8	; 184
     fd6:	ff 4f       	sbci	r31, 0xFF	; 255
     fd8:	80 81       	ld	r24, Z
     fda:	28 2f       	mov	r18, r24
     fdc:	30 e0       	ldi	r19, 0x00	; 0
     fde:	ce 01       	movw	r24, r28
     fe0:	8f 5a       	subi	r24, 0xAF	; 175
     fe2:	9f 4f       	sbci	r25, 0xFF	; 255
     fe4:	fc 01       	movw	r30, r24
     fe6:	e2 0f       	add	r30, r18
     fe8:	f3 1f       	adc	r31, r19
     fea:	80 81       	ld	r24, Z
     fec:	48 17       	cp	r20, r24
     fee:	29 f0       	breq	.+10     	; 0xffa <createNewPassword+0x3bc>
			{
				state=TRUE;
     ff0:	fe 01       	movw	r30, r28
     ff2:	e9 5b       	subi	r30, 0xB9	; 185
     ff4:	ff 4f       	sbci	r31, 0xFF	; 255
     ff6:	81 e0       	ldi	r24, 0x01	; 1
     ff8:	80 83       	st	Z, r24
			LCD_displayCharacter('*');
		}
		confirmPass[passCounter]='#';
		confirmPass[++passCounter]='\0';
		state=FALSE;
		for(passCounter =0;passCounter<5;passCounter++){
     ffa:	de 01       	movw	r26, r28
     ffc:	a8 5b       	subi	r26, 0xB8	; 184
     ffe:	bf 4f       	sbci	r27, 0xFF	; 255
    1000:	fe 01       	movw	r30, r28
    1002:	e8 5b       	subi	r30, 0xB8	; 184
    1004:	ff 4f       	sbci	r31, 0xFF	; 255
    1006:	80 81       	ld	r24, Z
    1008:	8f 5f       	subi	r24, 0xFF	; 255
    100a:	8c 93       	st	X, r24
    100c:	fe 01       	movw	r30, r28
    100e:	e8 5b       	subi	r30, 0xB8	; 184
    1010:	ff 4f       	sbci	r31, 0xFF	; 255
    1012:	80 81       	ld	r24, Z
    1014:	85 30       	cpi	r24, 0x05	; 5
    1016:	80 f2       	brcs	.-96     	; 0xfb8 <createNewPassword+0x37a>
			if(password[passCounter] != confirmPass[passCounter])
			{
				state=TRUE;
			}
		}
		if(state)
    1018:	fe 01       	movw	r30, r28
    101a:	e9 5b       	subi	r30, 0xB9	; 185
    101c:	ff 4f       	sbci	r31, 0xFF	; 255
    101e:	80 81       	ld	r24, Z
    1020:	88 23       	and	r24, r24
    1022:	09 f4       	brne	.+2      	; 0x1026 <createNewPassword+0x3e8>
    1024:	83 c0       	rjmp	.+262    	; 0x112c <createNewPassword+0x4ee>
		{
			LCD_clearScreen();
    1026:	0e 94 8a 14 	call	0x2914	; 0x2914 <LCD_clearScreen>
			LCD_displayStringRowColumn(0,2,"Password Not");
    102a:	25 e9       	ldi	r18, 0x95	; 149
    102c:	30 e0       	ldi	r19, 0x00	; 0
    102e:	80 e0       	ldi	r24, 0x00	; 0
    1030:	62 e0       	ldi	r22, 0x02	; 2
    1032:	a9 01       	movw	r20, r18
    1034:	0e 94 4e 14 	call	0x289c	; 0x289c <LCD_displayStringRowColumn>
			LCD_moveCursor(1,0);
    1038:	81 e0       	ldi	r24, 0x01	; 1
    103a:	60 e0       	ldi	r22, 0x00	; 0
    103c:	0e 94 0c 14 	call	0x2818	; 0x2818 <LCD_moveCursor>
			LCD_displayString("Match try again");
    1040:	82 ea       	ldi	r24, 0xA2	; 162
    1042:	90 e0       	ldi	r25, 0x00	; 0
    1044:	0e 94 e3 13 	call	0x27c6	; 0x27c6 <LCD_displayString>
    1048:	80 e0       	ldi	r24, 0x00	; 0
    104a:	90 e8       	ldi	r25, 0x80	; 128
    104c:	ab eb       	ldi	r26, 0xBB	; 187
    104e:	b4 e4       	ldi	r27, 0x44	; 68
    1050:	8f a3       	std	Y+39, r24	; 0x27
    1052:	98 a7       	std	Y+40, r25	; 0x28
    1054:	a9 a7       	std	Y+41, r26	; 0x29
    1056:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1058:	6f a1       	ldd	r22, Y+39	; 0x27
    105a:	78 a5       	ldd	r23, Y+40	; 0x28
    105c:	89 a5       	ldd	r24, Y+41	; 0x29
    105e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1060:	20 e0       	ldi	r18, 0x00	; 0
    1062:	30 e0       	ldi	r19, 0x00	; 0
    1064:	4a ef       	ldi	r20, 0xFA	; 250
    1066:	54 e4       	ldi	r21, 0x44	; 68
    1068:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    106c:	dc 01       	movw	r26, r24
    106e:	cb 01       	movw	r24, r22
    1070:	8b a3       	std	Y+35, r24	; 0x23
    1072:	9c a3       	std	Y+36, r25	; 0x24
    1074:	ad a3       	std	Y+37, r26	; 0x25
    1076:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1078:	6b a1       	ldd	r22, Y+35	; 0x23
    107a:	7c a1       	ldd	r23, Y+36	; 0x24
    107c:	8d a1       	ldd	r24, Y+37	; 0x25
    107e:	9e a1       	ldd	r25, Y+38	; 0x26
    1080:	20 e0       	ldi	r18, 0x00	; 0
    1082:	30 e0       	ldi	r19, 0x00	; 0
    1084:	40 e8       	ldi	r20, 0x80	; 128
    1086:	5f e3       	ldi	r21, 0x3F	; 63
    1088:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    108c:	88 23       	and	r24, r24
    108e:	2c f4       	brge	.+10     	; 0x109a <createNewPassword+0x45c>
		__ticks = 1;
    1090:	81 e0       	ldi	r24, 0x01	; 1
    1092:	90 e0       	ldi	r25, 0x00	; 0
    1094:	9a a3       	std	Y+34, r25	; 0x22
    1096:	89 a3       	std	Y+33, r24	; 0x21
    1098:	3f c0       	rjmp	.+126    	; 0x1118 <createNewPassword+0x4da>
	else if (__tmp > 65535)
    109a:	6b a1       	ldd	r22, Y+35	; 0x23
    109c:	7c a1       	ldd	r23, Y+36	; 0x24
    109e:	8d a1       	ldd	r24, Y+37	; 0x25
    10a0:	9e a1       	ldd	r25, Y+38	; 0x26
    10a2:	20 e0       	ldi	r18, 0x00	; 0
    10a4:	3f ef       	ldi	r19, 0xFF	; 255
    10a6:	4f e7       	ldi	r20, 0x7F	; 127
    10a8:	57 e4       	ldi	r21, 0x47	; 71
    10aa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    10ae:	18 16       	cp	r1, r24
    10b0:	4c f5       	brge	.+82     	; 0x1104 <createNewPassword+0x4c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10b2:	6f a1       	ldd	r22, Y+39	; 0x27
    10b4:	78 a5       	ldd	r23, Y+40	; 0x28
    10b6:	89 a5       	ldd	r24, Y+41	; 0x29
    10b8:	9a a5       	ldd	r25, Y+42	; 0x2a
    10ba:	20 e0       	ldi	r18, 0x00	; 0
    10bc:	30 e0       	ldi	r19, 0x00	; 0
    10be:	40 e2       	ldi	r20, 0x20	; 32
    10c0:	51 e4       	ldi	r21, 0x41	; 65
    10c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10c6:	dc 01       	movw	r26, r24
    10c8:	cb 01       	movw	r24, r22
    10ca:	bc 01       	movw	r22, r24
    10cc:	cd 01       	movw	r24, r26
    10ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10d2:	dc 01       	movw	r26, r24
    10d4:	cb 01       	movw	r24, r22
    10d6:	9a a3       	std	Y+34, r25	; 0x22
    10d8:	89 a3       	std	Y+33, r24	; 0x21
    10da:	0f c0       	rjmp	.+30     	; 0x10fa <createNewPassword+0x4bc>
    10dc:	88 ec       	ldi	r24, 0xC8	; 200
    10de:	90 e0       	ldi	r25, 0x00	; 0
    10e0:	98 a3       	std	Y+32, r25	; 0x20
    10e2:	8f 8f       	std	Y+31, r24	; 0x1f
    10e4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    10e6:	98 a1       	ldd	r25, Y+32	; 0x20
    10e8:	01 97       	sbiw	r24, 0x01	; 1
    10ea:	f1 f7       	brne	.-4      	; 0x10e8 <createNewPassword+0x4aa>
    10ec:	98 a3       	std	Y+32, r25	; 0x20
    10ee:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10f0:	89 a1       	ldd	r24, Y+33	; 0x21
    10f2:	9a a1       	ldd	r25, Y+34	; 0x22
    10f4:	01 97       	sbiw	r24, 0x01	; 1
    10f6:	9a a3       	std	Y+34, r25	; 0x22
    10f8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10fa:	89 a1       	ldd	r24, Y+33	; 0x21
    10fc:	9a a1       	ldd	r25, Y+34	; 0x22
    10fe:	00 97       	sbiw	r24, 0x00	; 0
    1100:	69 f7       	brne	.-38     	; 0x10dc <createNewPassword+0x49e>
    1102:	14 c0       	rjmp	.+40     	; 0x112c <createNewPassword+0x4ee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1104:	6b a1       	ldd	r22, Y+35	; 0x23
    1106:	7c a1       	ldd	r23, Y+36	; 0x24
    1108:	8d a1       	ldd	r24, Y+37	; 0x25
    110a:	9e a1       	ldd	r25, Y+38	; 0x26
    110c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1110:	dc 01       	movw	r26, r24
    1112:	cb 01       	movw	r24, r22
    1114:	9a a3       	std	Y+34, r25	; 0x22
    1116:	89 a3       	std	Y+33, r24	; 0x21
    1118:	89 a1       	ldd	r24, Y+33	; 0x21
    111a:	9a a1       	ldd	r25, Y+34	; 0x22
    111c:	9e 8f       	std	Y+30, r25	; 0x1e
    111e:	8d 8f       	std	Y+29, r24	; 0x1d
    1120:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1122:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1124:	01 97       	sbiw	r24, 0x01	; 1
    1126:	f1 f7       	brne	.-4      	; 0x1124 <createNewPassword+0x4e6>
    1128:	9e 8f       	std	Y+30, r25	; 0x1e
    112a:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(1500);
		}
	}while(state);
    112c:	fe 01       	movw	r30, r28
    112e:	e9 5b       	subi	r30, 0xB9	; 185
    1130:	ff 4f       	sbci	r31, 0xFF	; 255
    1132:	80 81       	ld	r24, Z
    1134:	88 23       	and	r24, r24
    1136:	09 f0       	breq	.+2      	; 0x113a <createNewPassword+0x4fc>
    1138:	93 cd       	rjmp	.-1242   	; 0xc60 <createNewPassword+0x22>

	/*Send the password to MC2*/
	LCD_clearScreen();
    113a:	0e 94 8a 14 	call	0x2914	; 0x2914 <LCD_clearScreen>
	LCD_displayString("Saving Password");
    113e:	82 eb       	ldi	r24, 0xB2	; 178
    1140:	90 e0       	ldi	r25, 0x00	; 0
    1142:	0e 94 e3 13 	call	0x27c6	; 0x27c6 <LCD_displayString>
    1146:	80 e0       	ldi	r24, 0x00	; 0
    1148:	90 e8       	ldi	r25, 0x80	; 128
    114a:	ab eb       	ldi	r26, 0xBB	; 187
    114c:	b4 e4       	ldi	r27, 0x44	; 68
    114e:	89 8f       	std	Y+25, r24	; 0x19
    1150:	9a 8f       	std	Y+26, r25	; 0x1a
    1152:	ab 8f       	std	Y+27, r26	; 0x1b
    1154:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1156:	69 8d       	ldd	r22, Y+25	; 0x19
    1158:	7a 8d       	ldd	r23, Y+26	; 0x1a
    115a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    115c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    115e:	20 e0       	ldi	r18, 0x00	; 0
    1160:	30 e0       	ldi	r19, 0x00	; 0
    1162:	4a ef       	ldi	r20, 0xFA	; 250
    1164:	54 e4       	ldi	r21, 0x44	; 68
    1166:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    116a:	dc 01       	movw	r26, r24
    116c:	cb 01       	movw	r24, r22
    116e:	8d 8b       	std	Y+21, r24	; 0x15
    1170:	9e 8b       	std	Y+22, r25	; 0x16
    1172:	af 8b       	std	Y+23, r26	; 0x17
    1174:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1176:	6d 89       	ldd	r22, Y+21	; 0x15
    1178:	7e 89       	ldd	r23, Y+22	; 0x16
    117a:	8f 89       	ldd	r24, Y+23	; 0x17
    117c:	98 8d       	ldd	r25, Y+24	; 0x18
    117e:	20 e0       	ldi	r18, 0x00	; 0
    1180:	30 e0       	ldi	r19, 0x00	; 0
    1182:	40 e8       	ldi	r20, 0x80	; 128
    1184:	5f e3       	ldi	r21, 0x3F	; 63
    1186:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    118a:	88 23       	and	r24, r24
    118c:	2c f4       	brge	.+10     	; 0x1198 <createNewPassword+0x55a>
		__ticks = 1;
    118e:	81 e0       	ldi	r24, 0x01	; 1
    1190:	90 e0       	ldi	r25, 0x00	; 0
    1192:	9c 8b       	std	Y+20, r25	; 0x14
    1194:	8b 8b       	std	Y+19, r24	; 0x13
    1196:	3f c0       	rjmp	.+126    	; 0x1216 <createNewPassword+0x5d8>
	else if (__tmp > 65535)
    1198:	6d 89       	ldd	r22, Y+21	; 0x15
    119a:	7e 89       	ldd	r23, Y+22	; 0x16
    119c:	8f 89       	ldd	r24, Y+23	; 0x17
    119e:	98 8d       	ldd	r25, Y+24	; 0x18
    11a0:	20 e0       	ldi	r18, 0x00	; 0
    11a2:	3f ef       	ldi	r19, 0xFF	; 255
    11a4:	4f e7       	ldi	r20, 0x7F	; 127
    11a6:	57 e4       	ldi	r21, 0x47	; 71
    11a8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    11ac:	18 16       	cp	r1, r24
    11ae:	4c f5       	brge	.+82     	; 0x1202 <createNewPassword+0x5c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11b0:	69 8d       	ldd	r22, Y+25	; 0x19
    11b2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    11b4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    11b6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    11b8:	20 e0       	ldi	r18, 0x00	; 0
    11ba:	30 e0       	ldi	r19, 0x00	; 0
    11bc:	40 e2       	ldi	r20, 0x20	; 32
    11be:	51 e4       	ldi	r21, 0x41	; 65
    11c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11c4:	dc 01       	movw	r26, r24
    11c6:	cb 01       	movw	r24, r22
    11c8:	bc 01       	movw	r22, r24
    11ca:	cd 01       	movw	r24, r26
    11cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11d0:	dc 01       	movw	r26, r24
    11d2:	cb 01       	movw	r24, r22
    11d4:	9c 8b       	std	Y+20, r25	; 0x14
    11d6:	8b 8b       	std	Y+19, r24	; 0x13
    11d8:	0f c0       	rjmp	.+30     	; 0x11f8 <createNewPassword+0x5ba>
    11da:	88 ec       	ldi	r24, 0xC8	; 200
    11dc:	90 e0       	ldi	r25, 0x00	; 0
    11de:	9a 8b       	std	Y+18, r25	; 0x12
    11e0:	89 8b       	std	Y+17, r24	; 0x11
    11e2:	89 89       	ldd	r24, Y+17	; 0x11
    11e4:	9a 89       	ldd	r25, Y+18	; 0x12
    11e6:	01 97       	sbiw	r24, 0x01	; 1
    11e8:	f1 f7       	brne	.-4      	; 0x11e6 <createNewPassword+0x5a8>
    11ea:	9a 8b       	std	Y+18, r25	; 0x12
    11ec:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11ee:	8b 89       	ldd	r24, Y+19	; 0x13
    11f0:	9c 89       	ldd	r25, Y+20	; 0x14
    11f2:	01 97       	sbiw	r24, 0x01	; 1
    11f4:	9c 8b       	std	Y+20, r25	; 0x14
    11f6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11f8:	8b 89       	ldd	r24, Y+19	; 0x13
    11fa:	9c 89       	ldd	r25, Y+20	; 0x14
    11fc:	00 97       	sbiw	r24, 0x00	; 0
    11fe:	69 f7       	brne	.-38     	; 0x11da <createNewPassword+0x59c>
    1200:	14 c0       	rjmp	.+40     	; 0x122a <createNewPassword+0x5ec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1202:	6d 89       	ldd	r22, Y+21	; 0x15
    1204:	7e 89       	ldd	r23, Y+22	; 0x16
    1206:	8f 89       	ldd	r24, Y+23	; 0x17
    1208:	98 8d       	ldd	r25, Y+24	; 0x18
    120a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    120e:	dc 01       	movw	r26, r24
    1210:	cb 01       	movw	r24, r22
    1212:	9c 8b       	std	Y+20, r25	; 0x14
    1214:	8b 8b       	std	Y+19, r24	; 0x13
    1216:	8b 89       	ldd	r24, Y+19	; 0x13
    1218:	9c 89       	ldd	r25, Y+20	; 0x14
    121a:	98 8b       	std	Y+16, r25	; 0x10
    121c:	8f 87       	std	Y+15, r24	; 0x0f
    121e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1220:	98 89       	ldd	r25, Y+16	; 0x10
    1222:	01 97       	sbiw	r24, 0x01	; 1
    1224:	f1 f7       	brne	.-4      	; 0x1222 <createNewPassword+0x5e4>
    1226:	98 8b       	std	Y+16, r25	; 0x10
    1228:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1500);
	while(UART_receiveByte() !=MC2_READY);
    122a:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <UART_receiveByte>
    122e:	80 31       	cpi	r24, 0x10	; 16
    1230:	e1 f7       	brne	.-8      	; 0x122a <createNewPassword+0x5ec>
	UART_sendString(password);
    1232:	ce 01       	movw	r24, r28
    1234:	87 5b       	subi	r24, 0xB7	; 183
    1236:	9f 4f       	sbci	r25, 0xFF	; 255
    1238:	0e 94 56 15 	call	0x2aac	; 0x2aac <UART_sendString>
	LCD_clearScreen();
    123c:	0e 94 8a 14 	call	0x2914	; 0x2914 <LCD_clearScreen>
	LCD_displayStringRowColumn(0,5,"Saved");
    1240:	22 ec       	ldi	r18, 0xC2	; 194
    1242:	30 e0       	ldi	r19, 0x00	; 0
    1244:	80 e0       	ldi	r24, 0x00	; 0
    1246:	65 e0       	ldi	r22, 0x05	; 5
    1248:	a9 01       	movw	r20, r18
    124a:	0e 94 4e 14 	call	0x289c	; 0x289c <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1,2,"Successfully");
    124e:	28 ec       	ldi	r18, 0xC8	; 200
    1250:	30 e0       	ldi	r19, 0x00	; 0
    1252:	81 e0       	ldi	r24, 0x01	; 1
    1254:	62 e0       	ldi	r22, 0x02	; 2
    1256:	a9 01       	movw	r20, r18
    1258:	0e 94 4e 14 	call	0x289c	; 0x289c <LCD_displayStringRowColumn>
    125c:	80 e0       	ldi	r24, 0x00	; 0
    125e:	90 e8       	ldi	r25, 0x80	; 128
    1260:	ab eb       	ldi	r26, 0xBB	; 187
    1262:	b4 e4       	ldi	r27, 0x44	; 68
    1264:	8b 87       	std	Y+11, r24	; 0x0b
    1266:	9c 87       	std	Y+12, r25	; 0x0c
    1268:	ad 87       	std	Y+13, r26	; 0x0d
    126a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    126c:	6b 85       	ldd	r22, Y+11	; 0x0b
    126e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1270:	8d 85       	ldd	r24, Y+13	; 0x0d
    1272:	9e 85       	ldd	r25, Y+14	; 0x0e
    1274:	20 e0       	ldi	r18, 0x00	; 0
    1276:	30 e0       	ldi	r19, 0x00	; 0
    1278:	4a ef       	ldi	r20, 0xFA	; 250
    127a:	54 e4       	ldi	r21, 0x44	; 68
    127c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1280:	dc 01       	movw	r26, r24
    1282:	cb 01       	movw	r24, r22
    1284:	8f 83       	std	Y+7, r24	; 0x07
    1286:	98 87       	std	Y+8, r25	; 0x08
    1288:	a9 87       	std	Y+9, r26	; 0x09
    128a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    128c:	6f 81       	ldd	r22, Y+7	; 0x07
    128e:	78 85       	ldd	r23, Y+8	; 0x08
    1290:	89 85       	ldd	r24, Y+9	; 0x09
    1292:	9a 85       	ldd	r25, Y+10	; 0x0a
    1294:	20 e0       	ldi	r18, 0x00	; 0
    1296:	30 e0       	ldi	r19, 0x00	; 0
    1298:	40 e8       	ldi	r20, 0x80	; 128
    129a:	5f e3       	ldi	r21, 0x3F	; 63
    129c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    12a0:	88 23       	and	r24, r24
    12a2:	2c f4       	brge	.+10     	; 0x12ae <createNewPassword+0x670>
		__ticks = 1;
    12a4:	81 e0       	ldi	r24, 0x01	; 1
    12a6:	90 e0       	ldi	r25, 0x00	; 0
    12a8:	9e 83       	std	Y+6, r25	; 0x06
    12aa:	8d 83       	std	Y+5, r24	; 0x05
    12ac:	3f c0       	rjmp	.+126    	; 0x132c <createNewPassword+0x6ee>
	else if (__tmp > 65535)
    12ae:	6f 81       	ldd	r22, Y+7	; 0x07
    12b0:	78 85       	ldd	r23, Y+8	; 0x08
    12b2:	89 85       	ldd	r24, Y+9	; 0x09
    12b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    12b6:	20 e0       	ldi	r18, 0x00	; 0
    12b8:	3f ef       	ldi	r19, 0xFF	; 255
    12ba:	4f e7       	ldi	r20, 0x7F	; 127
    12bc:	57 e4       	ldi	r21, 0x47	; 71
    12be:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    12c2:	18 16       	cp	r1, r24
    12c4:	4c f5       	brge	.+82     	; 0x1318 <createNewPassword+0x6da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12c6:	6b 85       	ldd	r22, Y+11	; 0x0b
    12c8:	7c 85       	ldd	r23, Y+12	; 0x0c
    12ca:	8d 85       	ldd	r24, Y+13	; 0x0d
    12cc:	9e 85       	ldd	r25, Y+14	; 0x0e
    12ce:	20 e0       	ldi	r18, 0x00	; 0
    12d0:	30 e0       	ldi	r19, 0x00	; 0
    12d2:	40 e2       	ldi	r20, 0x20	; 32
    12d4:	51 e4       	ldi	r21, 0x41	; 65
    12d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12da:	dc 01       	movw	r26, r24
    12dc:	cb 01       	movw	r24, r22
    12de:	bc 01       	movw	r22, r24
    12e0:	cd 01       	movw	r24, r26
    12e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12e6:	dc 01       	movw	r26, r24
    12e8:	cb 01       	movw	r24, r22
    12ea:	9e 83       	std	Y+6, r25	; 0x06
    12ec:	8d 83       	std	Y+5, r24	; 0x05
    12ee:	0f c0       	rjmp	.+30     	; 0x130e <createNewPassword+0x6d0>
    12f0:	88 ec       	ldi	r24, 0xC8	; 200
    12f2:	90 e0       	ldi	r25, 0x00	; 0
    12f4:	9c 83       	std	Y+4, r25	; 0x04
    12f6:	8b 83       	std	Y+3, r24	; 0x03
    12f8:	8b 81       	ldd	r24, Y+3	; 0x03
    12fa:	9c 81       	ldd	r25, Y+4	; 0x04
    12fc:	01 97       	sbiw	r24, 0x01	; 1
    12fe:	f1 f7       	brne	.-4      	; 0x12fc <createNewPassword+0x6be>
    1300:	9c 83       	std	Y+4, r25	; 0x04
    1302:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1304:	8d 81       	ldd	r24, Y+5	; 0x05
    1306:	9e 81       	ldd	r25, Y+6	; 0x06
    1308:	01 97       	sbiw	r24, 0x01	; 1
    130a:	9e 83       	std	Y+6, r25	; 0x06
    130c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    130e:	8d 81       	ldd	r24, Y+5	; 0x05
    1310:	9e 81       	ldd	r25, Y+6	; 0x06
    1312:	00 97       	sbiw	r24, 0x00	; 0
    1314:	69 f7       	brne	.-38     	; 0x12f0 <createNewPassword+0x6b2>
    1316:	14 c0       	rjmp	.+40     	; 0x1340 <createNewPassword+0x702>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1318:	6f 81       	ldd	r22, Y+7	; 0x07
    131a:	78 85       	ldd	r23, Y+8	; 0x08
    131c:	89 85       	ldd	r24, Y+9	; 0x09
    131e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1320:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1324:	dc 01       	movw	r26, r24
    1326:	cb 01       	movw	r24, r22
    1328:	9e 83       	std	Y+6, r25	; 0x06
    132a:	8d 83       	std	Y+5, r24	; 0x05
    132c:	8d 81       	ldd	r24, Y+5	; 0x05
    132e:	9e 81       	ldd	r25, Y+6	; 0x06
    1330:	9a 83       	std	Y+2, r25	; 0x02
    1332:	89 83       	std	Y+1, r24	; 0x01
    1334:	89 81       	ldd	r24, Y+1	; 0x01
    1336:	9a 81       	ldd	r25, Y+2	; 0x02
    1338:	01 97       	sbiw	r24, 0x01	; 1
    133a:	f1 f7       	brne	.-4      	; 0x1338 <createNewPassword+0x6fa>
    133c:	9a 83       	std	Y+2, r25	; 0x02
    133e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1500);
	return SUCCESS;
    1340:	81 e0       	ldi	r24, 0x01	; 1

}
    1342:	c8 5a       	subi	r28, 0xA8	; 168
    1344:	df 4f       	sbci	r29, 0xFF	; 255
    1346:	0f b6       	in	r0, 0x3f	; 63
    1348:	f8 94       	cli
    134a:	de bf       	out	0x3e, r29	; 62
    134c:	0f be       	out	0x3f, r0	; 63
    134e:	cd bf       	out	0x3d, r28	; 61
    1350:	cf 91       	pop	r28
    1352:	df 91       	pop	r29
    1354:	1f 91       	pop	r17
    1356:	0f 91       	pop	r16
    1358:	08 95       	ret

0000135a <viewOptions>:

static void viewOptions(void){
    135a:	df 93       	push	r29
    135c:	cf 93       	push	r28
    135e:	cd b7       	in	r28, 0x3d	; 61
    1360:	de b7       	in	r29, 0x3e	; 62
    1362:	2f 97       	sbiw	r28, 0x0f	; 15
    1364:	0f b6       	in	r0, 0x3f	; 63
    1366:	f8 94       	cli
    1368:	de bf       	out	0x3e, r29	; 62
    136a:	0f be       	out	0x3f, r0	; 63
    136c:	cd bf       	out	0x3d, r28	; 61
	uint8 option;
	LCD_clearScreen();
    136e:	0e 94 8a 14 	call	0x2914	; 0x2914 <LCD_clearScreen>
	LCD_displayString("0:Open Door");
    1372:	85 ed       	ldi	r24, 0xD5	; 213
    1374:	90 e0       	ldi	r25, 0x00	; 0
    1376:	0e 94 e3 13 	call	0x27c6	; 0x27c6 <LCD_displayString>
	LCD_moveCursor(1,0);
    137a:	81 e0       	ldi	r24, 0x01	; 1
    137c:	60 e0       	ldi	r22, 0x00	; 0
    137e:	0e 94 0c 14 	call	0x2818	; 0x2818 <LCD_moveCursor>
	LCD_displayString("1:Change Pass");
    1382:	81 ee       	ldi	r24, 0xE1	; 225
    1384:	90 e0       	ldi	r25, 0x00	; 0
    1386:	0e 94 e3 13 	call	0x27c6	; 0x27c6 <LCD_displayString>
	/*loop until the user enter one of the two options*/
	do{
		option = KEYPAD_getPressedKey();
    138a:	0e 94 4f 0f 	call	0x1e9e	; 0x1e9e <KEYPAD_getPressedKey>
    138e:	8f 87       	std	Y+15, r24	; 0x0f
    1390:	80 e0       	ldi	r24, 0x00	; 0
    1392:	90 e0       	ldi	r25, 0x00	; 0
    1394:	af ea       	ldi	r26, 0xAF	; 175
    1396:	b3 e4       	ldi	r27, 0x43	; 67
    1398:	8b 87       	std	Y+11, r24	; 0x0b
    139a:	9c 87       	std	Y+12, r25	; 0x0c
    139c:	ad 87       	std	Y+13, r26	; 0x0d
    139e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13a0:	6b 85       	ldd	r22, Y+11	; 0x0b
    13a2:	7c 85       	ldd	r23, Y+12	; 0x0c
    13a4:	8d 85       	ldd	r24, Y+13	; 0x0d
    13a6:	9e 85       	ldd	r25, Y+14	; 0x0e
    13a8:	20 e0       	ldi	r18, 0x00	; 0
    13aa:	30 e0       	ldi	r19, 0x00	; 0
    13ac:	4a ef       	ldi	r20, 0xFA	; 250
    13ae:	54 e4       	ldi	r21, 0x44	; 68
    13b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13b4:	dc 01       	movw	r26, r24
    13b6:	cb 01       	movw	r24, r22
    13b8:	8f 83       	std	Y+7, r24	; 0x07
    13ba:	98 87       	std	Y+8, r25	; 0x08
    13bc:	a9 87       	std	Y+9, r26	; 0x09
    13be:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    13c0:	6f 81       	ldd	r22, Y+7	; 0x07
    13c2:	78 85       	ldd	r23, Y+8	; 0x08
    13c4:	89 85       	ldd	r24, Y+9	; 0x09
    13c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    13c8:	20 e0       	ldi	r18, 0x00	; 0
    13ca:	30 e0       	ldi	r19, 0x00	; 0
    13cc:	40 e8       	ldi	r20, 0x80	; 128
    13ce:	5f e3       	ldi	r21, 0x3F	; 63
    13d0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    13d4:	88 23       	and	r24, r24
    13d6:	2c f4       	brge	.+10     	; 0x13e2 <viewOptions+0x88>
		__ticks = 1;
    13d8:	81 e0       	ldi	r24, 0x01	; 1
    13da:	90 e0       	ldi	r25, 0x00	; 0
    13dc:	9e 83       	std	Y+6, r25	; 0x06
    13de:	8d 83       	std	Y+5, r24	; 0x05
    13e0:	3f c0       	rjmp	.+126    	; 0x1460 <viewOptions+0x106>
	else if (__tmp > 65535)
    13e2:	6f 81       	ldd	r22, Y+7	; 0x07
    13e4:	78 85       	ldd	r23, Y+8	; 0x08
    13e6:	89 85       	ldd	r24, Y+9	; 0x09
    13e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    13ea:	20 e0       	ldi	r18, 0x00	; 0
    13ec:	3f ef       	ldi	r19, 0xFF	; 255
    13ee:	4f e7       	ldi	r20, 0x7F	; 127
    13f0:	57 e4       	ldi	r21, 0x47	; 71
    13f2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    13f6:	18 16       	cp	r1, r24
    13f8:	4c f5       	brge	.+82     	; 0x144c <viewOptions+0xf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13fa:	6b 85       	ldd	r22, Y+11	; 0x0b
    13fc:	7c 85       	ldd	r23, Y+12	; 0x0c
    13fe:	8d 85       	ldd	r24, Y+13	; 0x0d
    1400:	9e 85       	ldd	r25, Y+14	; 0x0e
    1402:	20 e0       	ldi	r18, 0x00	; 0
    1404:	30 e0       	ldi	r19, 0x00	; 0
    1406:	40 e2       	ldi	r20, 0x20	; 32
    1408:	51 e4       	ldi	r21, 0x41	; 65
    140a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    140e:	dc 01       	movw	r26, r24
    1410:	cb 01       	movw	r24, r22
    1412:	bc 01       	movw	r22, r24
    1414:	cd 01       	movw	r24, r26
    1416:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    141a:	dc 01       	movw	r26, r24
    141c:	cb 01       	movw	r24, r22
    141e:	9e 83       	std	Y+6, r25	; 0x06
    1420:	8d 83       	std	Y+5, r24	; 0x05
    1422:	0f c0       	rjmp	.+30     	; 0x1442 <viewOptions+0xe8>
    1424:	88 ec       	ldi	r24, 0xC8	; 200
    1426:	90 e0       	ldi	r25, 0x00	; 0
    1428:	9c 83       	std	Y+4, r25	; 0x04
    142a:	8b 83       	std	Y+3, r24	; 0x03
    142c:	8b 81       	ldd	r24, Y+3	; 0x03
    142e:	9c 81       	ldd	r25, Y+4	; 0x04
    1430:	01 97       	sbiw	r24, 0x01	; 1
    1432:	f1 f7       	brne	.-4      	; 0x1430 <viewOptions+0xd6>
    1434:	9c 83       	std	Y+4, r25	; 0x04
    1436:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1438:	8d 81       	ldd	r24, Y+5	; 0x05
    143a:	9e 81       	ldd	r25, Y+6	; 0x06
    143c:	01 97       	sbiw	r24, 0x01	; 1
    143e:	9e 83       	std	Y+6, r25	; 0x06
    1440:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1442:	8d 81       	ldd	r24, Y+5	; 0x05
    1444:	9e 81       	ldd	r25, Y+6	; 0x06
    1446:	00 97       	sbiw	r24, 0x00	; 0
    1448:	69 f7       	brne	.-38     	; 0x1424 <viewOptions+0xca>
    144a:	14 c0       	rjmp	.+40     	; 0x1474 <viewOptions+0x11a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    144c:	6f 81       	ldd	r22, Y+7	; 0x07
    144e:	78 85       	ldd	r23, Y+8	; 0x08
    1450:	89 85       	ldd	r24, Y+9	; 0x09
    1452:	9a 85       	ldd	r25, Y+10	; 0x0a
    1454:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1458:	dc 01       	movw	r26, r24
    145a:	cb 01       	movw	r24, r22
    145c:	9e 83       	std	Y+6, r25	; 0x06
    145e:	8d 83       	std	Y+5, r24	; 0x05
    1460:	8d 81       	ldd	r24, Y+5	; 0x05
    1462:	9e 81       	ldd	r25, Y+6	; 0x06
    1464:	9a 83       	std	Y+2, r25	; 0x02
    1466:	89 83       	std	Y+1, r24	; 0x01
    1468:	89 81       	ldd	r24, Y+1	; 0x01
    146a:	9a 81       	ldd	r25, Y+2	; 0x02
    146c:	01 97       	sbiw	r24, 0x01	; 1
    146e:	f1 f7       	brne	.-4      	; 0x146c <viewOptions+0x112>
    1470:	9a 83       	std	Y+2, r25	; 0x02
    1472:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(350);
	}while(option != 22 && option != 1);
    1474:	8f 85       	ldd	r24, Y+15	; 0x0f
    1476:	86 31       	cpi	r24, 0x16	; 22
    1478:	21 f0       	breq	.+8      	; 0x1482 <viewOptions+0x128>
    147a:	8f 85       	ldd	r24, Y+15	; 0x0f
    147c:	81 30       	cpi	r24, 0x01	; 1
    147e:	09 f0       	breq	.+2      	; 0x1482 <viewOptions+0x128>
    1480:	84 cf       	rjmp	.-248    	; 0x138a <viewOptions+0x30>

	/*send the option to MC2*/
	while(UART_receiveByte() != MC2_READY);
    1482:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <UART_receiveByte>
    1486:	80 31       	cpi	r24, 0x10	; 16
    1488:	e1 f7       	brne	.-8      	; 0x1482 <viewOptions+0x128>
	if(option == 1){
    148a:	8f 85       	ldd	r24, Y+15	; 0x0f
    148c:	81 30       	cpi	r24, 0x01	; 1
    148e:	21 f4       	brne	.+8      	; 0x1498 <viewOptions+0x13e>
		UART_sendByte(CHECK_PASSWORD_FOR_NEW_PASSWORD);
    1490:	81 e0       	ldi	r24, 0x01	; 1
    1492:	0e 94 30 15 	call	0x2a60	; 0x2a60 <UART_sendByte>
    1496:	03 c0       	rjmp	.+6      	; 0x149e <viewOptions+0x144>
	}
	else{
		UART_sendByte(OPEN_DOOR);
    1498:	86 e0       	ldi	r24, 0x06	; 6
    149a:	0e 94 30 15 	call	0x2a60	; 0x2a60 <UART_sendByte>
	}

}
    149e:	2f 96       	adiw	r28, 0x0f	; 15
    14a0:	0f b6       	in	r0, 0x3f	; 63
    14a2:	f8 94       	cli
    14a4:	de bf       	out	0x3e, r29	; 62
    14a6:	0f be       	out	0x3f, r0	; 63
    14a8:	cd bf       	out	0x3d, r28	; 61
    14aa:	cf 91       	pop	r28
    14ac:	df 91       	pop	r29
    14ae:	08 95       	ret

000014b0 <getPassword>:

static void getPassword(void){
    14b0:	0f 93       	push	r16
    14b2:	1f 93       	push	r17
    14b4:	df 93       	push	r29
    14b6:	cf 93       	push	r28
    14b8:	cd b7       	in	r28, 0x3d	; 61
    14ba:	de b7       	in	r29, 0x3e	; 62
    14bc:	a5 97       	sbiw	r28, 0x25	; 37
    14be:	0f b6       	in	r0, 0x3f	; 63
    14c0:	f8 94       	cli
    14c2:	de bf       	out	0x3e, r29	; 62
    14c4:	0f be       	out	0x3f, r0	; 63
    14c6:	cd bf       	out	0x3d, r28	; 61
	uint8 passCounter;
	uint8 password[8];
	LCD_clearScreen();
    14c8:	0e 94 8a 14 	call	0x2914	; 0x2914 <LCD_clearScreen>
	LCD_displayString("Enter The Pass");
    14cc:	8f ee       	ldi	r24, 0xEF	; 239
    14ce:	90 e0       	ldi	r25, 0x00	; 0
    14d0:	0e 94 e3 13 	call	0x27c6	; 0x27c6 <LCD_displayString>
	LCD_moveCursor(1,0);
    14d4:	81 e0       	ldi	r24, 0x01	; 1
    14d6:	60 e0       	ldi	r22, 0x00	; 0
    14d8:	0e 94 0c 14 	call	0x2818	; 0x2818 <LCD_moveCursor>
	/*Taking the password from the user*/
	for(passCounter = 0;passCounter<5;passCounter++)
    14dc:	1d 8e       	std	Y+29, r1	; 0x1d
    14de:	84 c0       	rjmp	.+264    	; 0x15e8 <getPassword+0x138>
	{
		password[passCounter] = KEYPAD_getPressedKey();
    14e0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    14e2:	08 2f       	mov	r16, r24
    14e4:	10 e0       	ldi	r17, 0x00	; 0
    14e6:	0e 94 4f 0f 	call	0x1e9e	; 0x1e9e <KEYPAD_getPressedKey>
    14ea:	28 2f       	mov	r18, r24
    14ec:	ce 01       	movw	r24, r28
    14ee:	4e 96       	adiw	r24, 0x1e	; 30
    14f0:	fc 01       	movw	r30, r24
    14f2:	e0 0f       	add	r30, r16
    14f4:	f1 1f       	adc	r31, r17
    14f6:	20 83       	st	Z, r18
    14f8:	80 e0       	ldi	r24, 0x00	; 0
    14fa:	90 e0       	ldi	r25, 0x00	; 0
    14fc:	af ea       	ldi	r26, 0xAF	; 175
    14fe:	b3 e4       	ldi	r27, 0x43	; 67
    1500:	89 8f       	std	Y+25, r24	; 0x19
    1502:	9a 8f       	std	Y+26, r25	; 0x1a
    1504:	ab 8f       	std	Y+27, r26	; 0x1b
    1506:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1508:	69 8d       	ldd	r22, Y+25	; 0x19
    150a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    150c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    150e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1510:	20 e0       	ldi	r18, 0x00	; 0
    1512:	30 e0       	ldi	r19, 0x00	; 0
    1514:	4a ef       	ldi	r20, 0xFA	; 250
    1516:	54 e4       	ldi	r21, 0x44	; 68
    1518:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    151c:	dc 01       	movw	r26, r24
    151e:	cb 01       	movw	r24, r22
    1520:	8d 8b       	std	Y+21, r24	; 0x15
    1522:	9e 8b       	std	Y+22, r25	; 0x16
    1524:	af 8b       	std	Y+23, r26	; 0x17
    1526:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1528:	6d 89       	ldd	r22, Y+21	; 0x15
    152a:	7e 89       	ldd	r23, Y+22	; 0x16
    152c:	8f 89       	ldd	r24, Y+23	; 0x17
    152e:	98 8d       	ldd	r25, Y+24	; 0x18
    1530:	20 e0       	ldi	r18, 0x00	; 0
    1532:	30 e0       	ldi	r19, 0x00	; 0
    1534:	40 e8       	ldi	r20, 0x80	; 128
    1536:	5f e3       	ldi	r21, 0x3F	; 63
    1538:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    153c:	88 23       	and	r24, r24
    153e:	2c f4       	brge	.+10     	; 0x154a <getPassword+0x9a>
		__ticks = 1;
    1540:	81 e0       	ldi	r24, 0x01	; 1
    1542:	90 e0       	ldi	r25, 0x00	; 0
    1544:	9c 8b       	std	Y+20, r25	; 0x14
    1546:	8b 8b       	std	Y+19, r24	; 0x13
    1548:	3f c0       	rjmp	.+126    	; 0x15c8 <getPassword+0x118>
	else if (__tmp > 65535)
    154a:	6d 89       	ldd	r22, Y+21	; 0x15
    154c:	7e 89       	ldd	r23, Y+22	; 0x16
    154e:	8f 89       	ldd	r24, Y+23	; 0x17
    1550:	98 8d       	ldd	r25, Y+24	; 0x18
    1552:	20 e0       	ldi	r18, 0x00	; 0
    1554:	3f ef       	ldi	r19, 0xFF	; 255
    1556:	4f e7       	ldi	r20, 0x7F	; 127
    1558:	57 e4       	ldi	r21, 0x47	; 71
    155a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    155e:	18 16       	cp	r1, r24
    1560:	4c f5       	brge	.+82     	; 0x15b4 <getPassword+0x104>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1562:	69 8d       	ldd	r22, Y+25	; 0x19
    1564:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1566:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1568:	9c 8d       	ldd	r25, Y+28	; 0x1c
    156a:	20 e0       	ldi	r18, 0x00	; 0
    156c:	30 e0       	ldi	r19, 0x00	; 0
    156e:	40 e2       	ldi	r20, 0x20	; 32
    1570:	51 e4       	ldi	r21, 0x41	; 65
    1572:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1576:	dc 01       	movw	r26, r24
    1578:	cb 01       	movw	r24, r22
    157a:	bc 01       	movw	r22, r24
    157c:	cd 01       	movw	r24, r26
    157e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1582:	dc 01       	movw	r26, r24
    1584:	cb 01       	movw	r24, r22
    1586:	9c 8b       	std	Y+20, r25	; 0x14
    1588:	8b 8b       	std	Y+19, r24	; 0x13
    158a:	0f c0       	rjmp	.+30     	; 0x15aa <getPassword+0xfa>
    158c:	88 ec       	ldi	r24, 0xC8	; 200
    158e:	90 e0       	ldi	r25, 0x00	; 0
    1590:	9a 8b       	std	Y+18, r25	; 0x12
    1592:	89 8b       	std	Y+17, r24	; 0x11
    1594:	89 89       	ldd	r24, Y+17	; 0x11
    1596:	9a 89       	ldd	r25, Y+18	; 0x12
    1598:	01 97       	sbiw	r24, 0x01	; 1
    159a:	f1 f7       	brne	.-4      	; 0x1598 <getPassword+0xe8>
    159c:	9a 8b       	std	Y+18, r25	; 0x12
    159e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15a0:	8b 89       	ldd	r24, Y+19	; 0x13
    15a2:	9c 89       	ldd	r25, Y+20	; 0x14
    15a4:	01 97       	sbiw	r24, 0x01	; 1
    15a6:	9c 8b       	std	Y+20, r25	; 0x14
    15a8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15aa:	8b 89       	ldd	r24, Y+19	; 0x13
    15ac:	9c 89       	ldd	r25, Y+20	; 0x14
    15ae:	00 97       	sbiw	r24, 0x00	; 0
    15b0:	69 f7       	brne	.-38     	; 0x158c <getPassword+0xdc>
    15b2:	14 c0       	rjmp	.+40     	; 0x15dc <getPassword+0x12c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15b4:	6d 89       	ldd	r22, Y+21	; 0x15
    15b6:	7e 89       	ldd	r23, Y+22	; 0x16
    15b8:	8f 89       	ldd	r24, Y+23	; 0x17
    15ba:	98 8d       	ldd	r25, Y+24	; 0x18
    15bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15c0:	dc 01       	movw	r26, r24
    15c2:	cb 01       	movw	r24, r22
    15c4:	9c 8b       	std	Y+20, r25	; 0x14
    15c6:	8b 8b       	std	Y+19, r24	; 0x13
    15c8:	8b 89       	ldd	r24, Y+19	; 0x13
    15ca:	9c 89       	ldd	r25, Y+20	; 0x14
    15cc:	98 8b       	std	Y+16, r25	; 0x10
    15ce:	8f 87       	std	Y+15, r24	; 0x0f
    15d0:	8f 85       	ldd	r24, Y+15	; 0x0f
    15d2:	98 89       	ldd	r25, Y+16	; 0x10
    15d4:	01 97       	sbiw	r24, 0x01	; 1
    15d6:	f1 f7       	brne	.-4      	; 0x15d4 <getPassword+0x124>
    15d8:	98 8b       	std	Y+16, r25	; 0x10
    15da:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(350);
		LCD_displayCharacter('*');
    15dc:	8a e2       	ldi	r24, 0x2A	; 42
    15de:	0e 94 ee 11 	call	0x23dc	; 0x23dc <LCD_displayCharacter>
	uint8 password[8];
	LCD_clearScreen();
	LCD_displayString("Enter The Pass");
	LCD_moveCursor(1,0);
	/*Taking the password from the user*/
	for(passCounter = 0;passCounter<5;passCounter++)
    15e2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    15e4:	8f 5f       	subi	r24, 0xFF	; 255
    15e6:	8d 8f       	std	Y+29, r24	; 0x1d
    15e8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    15ea:	85 30       	cpi	r24, 0x05	; 5
    15ec:	08 f4       	brcc	.+2      	; 0x15f0 <getPassword+0x140>
    15ee:	78 cf       	rjmp	.-272    	; 0x14e0 <getPassword+0x30>
	{
		password[passCounter] = KEYPAD_getPressedKey();
		_delay_ms(350);
		LCD_displayCharacter('*');
	}
	password[passCounter]='#';
    15f0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    15f2:	28 2f       	mov	r18, r24
    15f4:	30 e0       	ldi	r19, 0x00	; 0
    15f6:	ce 01       	movw	r24, r28
    15f8:	4e 96       	adiw	r24, 0x1e	; 30
    15fa:	fc 01       	movw	r30, r24
    15fc:	e2 0f       	add	r30, r18
    15fe:	f3 1f       	adc	r31, r19
    1600:	83 e2       	ldi	r24, 0x23	; 35
    1602:	80 83       	st	Z, r24
	password[++passCounter]='\0';
    1604:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1606:	8f 5f       	subi	r24, 0xFF	; 255
    1608:	8d 8f       	std	Y+29, r24	; 0x1d
    160a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    160c:	28 2f       	mov	r18, r24
    160e:	30 e0       	ldi	r19, 0x00	; 0
    1610:	ce 01       	movw	r24, r28
    1612:	4e 96       	adiw	r24, 0x1e	; 30
    1614:	fc 01       	movw	r30, r24
    1616:	e2 0f       	add	r30, r18
    1618:	f3 1f       	adc	r31, r19
    161a:	10 82       	st	Z, r1
	/*Sending the password to MC2 to check it */
	while(UART_receiveByte() !=MC2_READY);
    161c:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <UART_receiveByte>
    1620:	80 31       	cpi	r24, 0x10	; 16
    1622:	e1 f7       	brne	.-8      	; 0x161c <getPassword+0x16c>
	UART_sendString(password);
    1624:	ce 01       	movw	r24, r28
    1626:	4e 96       	adiw	r24, 0x1e	; 30
    1628:	0e 94 56 15 	call	0x2aac	; 0x2aac <UART_sendString>
	/*Receiving the password confirmation*/
	UART_sendByte(MC1_READY);
    162c:	80 e1       	ldi	r24, 0x10	; 16
    162e:	0e 94 30 15 	call	0x2a60	; 0x2a60 <UART_sendByte>
	if(UART_receiveByte() == WRONG_PASSWORD)
    1632:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <UART_receiveByte>
    1636:	8b 30       	cpi	r24, 0x0B	; 11
    1638:	09 f0       	breq	.+2      	; 0x163c <getPassword+0x18c>
    163a:	7c c0       	rjmp	.+248    	; 0x1734 <getPassword+0x284>
	{
		LCD_clearScreen();
    163c:	0e 94 8a 14 	call	0x2914	; 0x2914 <LCD_clearScreen>
		LCD_displayString("WRONG PASSWORD!");
    1640:	8e ef       	ldi	r24, 0xFE	; 254
    1642:	90 e0       	ldi	r25, 0x00	; 0
    1644:	0e 94 e3 13 	call	0x27c6	; 0x27c6 <LCD_displayString>
		LCD_moveCursor(1,0);
    1648:	81 e0       	ldi	r24, 0x01	; 1
    164a:	60 e0       	ldi	r22, 0x00	; 0
    164c:	0e 94 0c 14 	call	0x2818	; 0x2818 <LCD_moveCursor>
    1650:	80 e0       	ldi	r24, 0x00	; 0
    1652:	90 e8       	ldi	r25, 0x80	; 128
    1654:	ab eb       	ldi	r26, 0xBB	; 187
    1656:	b4 e4       	ldi	r27, 0x44	; 68
    1658:	8b 87       	std	Y+11, r24	; 0x0b
    165a:	9c 87       	std	Y+12, r25	; 0x0c
    165c:	ad 87       	std	Y+13, r26	; 0x0d
    165e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1660:	6b 85       	ldd	r22, Y+11	; 0x0b
    1662:	7c 85       	ldd	r23, Y+12	; 0x0c
    1664:	8d 85       	ldd	r24, Y+13	; 0x0d
    1666:	9e 85       	ldd	r25, Y+14	; 0x0e
    1668:	20 e0       	ldi	r18, 0x00	; 0
    166a:	30 e0       	ldi	r19, 0x00	; 0
    166c:	4a ef       	ldi	r20, 0xFA	; 250
    166e:	54 e4       	ldi	r21, 0x44	; 68
    1670:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1674:	dc 01       	movw	r26, r24
    1676:	cb 01       	movw	r24, r22
    1678:	8f 83       	std	Y+7, r24	; 0x07
    167a:	98 87       	std	Y+8, r25	; 0x08
    167c:	a9 87       	std	Y+9, r26	; 0x09
    167e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1680:	6f 81       	ldd	r22, Y+7	; 0x07
    1682:	78 85       	ldd	r23, Y+8	; 0x08
    1684:	89 85       	ldd	r24, Y+9	; 0x09
    1686:	9a 85       	ldd	r25, Y+10	; 0x0a
    1688:	20 e0       	ldi	r18, 0x00	; 0
    168a:	30 e0       	ldi	r19, 0x00	; 0
    168c:	40 e8       	ldi	r20, 0x80	; 128
    168e:	5f e3       	ldi	r21, 0x3F	; 63
    1690:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1694:	88 23       	and	r24, r24
    1696:	2c f4       	brge	.+10     	; 0x16a2 <getPassword+0x1f2>
		__ticks = 1;
    1698:	81 e0       	ldi	r24, 0x01	; 1
    169a:	90 e0       	ldi	r25, 0x00	; 0
    169c:	9e 83       	std	Y+6, r25	; 0x06
    169e:	8d 83       	std	Y+5, r24	; 0x05
    16a0:	3f c0       	rjmp	.+126    	; 0x1720 <getPassword+0x270>
	else if (__tmp > 65535)
    16a2:	6f 81       	ldd	r22, Y+7	; 0x07
    16a4:	78 85       	ldd	r23, Y+8	; 0x08
    16a6:	89 85       	ldd	r24, Y+9	; 0x09
    16a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    16aa:	20 e0       	ldi	r18, 0x00	; 0
    16ac:	3f ef       	ldi	r19, 0xFF	; 255
    16ae:	4f e7       	ldi	r20, 0x7F	; 127
    16b0:	57 e4       	ldi	r21, 0x47	; 71
    16b2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    16b6:	18 16       	cp	r1, r24
    16b8:	4c f5       	brge	.+82     	; 0x170c <getPassword+0x25c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16ba:	6b 85       	ldd	r22, Y+11	; 0x0b
    16bc:	7c 85       	ldd	r23, Y+12	; 0x0c
    16be:	8d 85       	ldd	r24, Y+13	; 0x0d
    16c0:	9e 85       	ldd	r25, Y+14	; 0x0e
    16c2:	20 e0       	ldi	r18, 0x00	; 0
    16c4:	30 e0       	ldi	r19, 0x00	; 0
    16c6:	40 e2       	ldi	r20, 0x20	; 32
    16c8:	51 e4       	ldi	r21, 0x41	; 65
    16ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16ce:	dc 01       	movw	r26, r24
    16d0:	cb 01       	movw	r24, r22
    16d2:	bc 01       	movw	r22, r24
    16d4:	cd 01       	movw	r24, r26
    16d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16da:	dc 01       	movw	r26, r24
    16dc:	cb 01       	movw	r24, r22
    16de:	9e 83       	std	Y+6, r25	; 0x06
    16e0:	8d 83       	std	Y+5, r24	; 0x05
    16e2:	0f c0       	rjmp	.+30     	; 0x1702 <getPassword+0x252>
    16e4:	88 ec       	ldi	r24, 0xC8	; 200
    16e6:	90 e0       	ldi	r25, 0x00	; 0
    16e8:	9c 83       	std	Y+4, r25	; 0x04
    16ea:	8b 83       	std	Y+3, r24	; 0x03
    16ec:	8b 81       	ldd	r24, Y+3	; 0x03
    16ee:	9c 81       	ldd	r25, Y+4	; 0x04
    16f0:	01 97       	sbiw	r24, 0x01	; 1
    16f2:	f1 f7       	brne	.-4      	; 0x16f0 <getPassword+0x240>
    16f4:	9c 83       	std	Y+4, r25	; 0x04
    16f6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16f8:	8d 81       	ldd	r24, Y+5	; 0x05
    16fa:	9e 81       	ldd	r25, Y+6	; 0x06
    16fc:	01 97       	sbiw	r24, 0x01	; 1
    16fe:	9e 83       	std	Y+6, r25	; 0x06
    1700:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1702:	8d 81       	ldd	r24, Y+5	; 0x05
    1704:	9e 81       	ldd	r25, Y+6	; 0x06
    1706:	00 97       	sbiw	r24, 0x00	; 0
    1708:	69 f7       	brne	.-38     	; 0x16e4 <getPassword+0x234>
    170a:	14 c0       	rjmp	.+40     	; 0x1734 <getPassword+0x284>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    170c:	6f 81       	ldd	r22, Y+7	; 0x07
    170e:	78 85       	ldd	r23, Y+8	; 0x08
    1710:	89 85       	ldd	r24, Y+9	; 0x09
    1712:	9a 85       	ldd	r25, Y+10	; 0x0a
    1714:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1718:	dc 01       	movw	r26, r24
    171a:	cb 01       	movw	r24, r22
    171c:	9e 83       	std	Y+6, r25	; 0x06
    171e:	8d 83       	std	Y+5, r24	; 0x05
    1720:	8d 81       	ldd	r24, Y+5	; 0x05
    1722:	9e 81       	ldd	r25, Y+6	; 0x06
    1724:	9a 83       	std	Y+2, r25	; 0x02
    1726:	89 83       	std	Y+1, r24	; 0x01
    1728:	89 81       	ldd	r24, Y+1	; 0x01
    172a:	9a 81       	ldd	r25, Y+2	; 0x02
    172c:	01 97       	sbiw	r24, 0x01	; 1
    172e:	f1 f7       	brne	.-4      	; 0x172c <getPassword+0x27c>
    1730:	9a 83       	std	Y+2, r25	; 0x02
    1732:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1500);
	}

}
    1734:	a5 96       	adiw	r28, 0x25	; 37
    1736:	0f b6       	in	r0, 0x3f	; 63
    1738:	f8 94       	cli
    173a:	de bf       	out	0x3e, r29	; 62
    173c:	0f be       	out	0x3f, r0	; 63
    173e:	cd bf       	out	0x3d, r28	; 61
    1740:	cf 91       	pop	r28
    1742:	df 91       	pop	r29
    1744:	1f 91       	pop	r17
    1746:	0f 91       	pop	r16
    1748:	08 95       	ret

0000174a <opendoor>:

static void opendoor(void){
    174a:	df 93       	push	r29
    174c:	cf 93       	push	r28
    174e:	0f 92       	push	r0
    1750:	cd b7       	in	r28, 0x3d	; 61
    1752:	de b7       	in	r29, 0x3e	; 62
	uint8 state;
	UART_sendByte(MC1_READY);
    1754:	80 e1       	ldi	r24, 0x10	; 16
    1756:	0e 94 30 15 	call	0x2a60	; 0x2a60 <UART_sendByte>
	state = UART_receiveByte();
    175a:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <UART_receiveByte>
    175e:	89 83       	std	Y+1, r24	; 0x01
	if(state == UNLOCKING)
    1760:	89 81       	ldd	r24, Y+1	; 0x01
    1762:	87 30       	cpi	r24, 0x07	; 7
    1764:	51 f4       	brne	.+20     	; 0x177a <opendoor+0x30>
	{
		LCD_clearScreen();
    1766:	0e 94 8a 14 	call	0x2914	; 0x2914 <LCD_clearScreen>
		LCD_displayString("UNLOCKING...");
    176a:	8e e0       	ldi	r24, 0x0E	; 14
    176c:	91 e0       	ldi	r25, 0x01	; 1
    176e:	0e 94 e3 13 	call	0x27c6	; 0x27c6 <LCD_displayString>
		LCD_moveCursor(1,0);
    1772:	81 e0       	ldi	r24, 0x01	; 1
    1774:	60 e0       	ldi	r22, 0x00	; 0
    1776:	0e 94 0c 14 	call	0x2818	; 0x2818 <LCD_moveCursor>
	}
	UART_sendByte(MC1_READY);
    177a:	80 e1       	ldi	r24, 0x10	; 16
    177c:	0e 94 30 15 	call	0x2a60	; 0x2a60 <UART_sendByte>
	state = UART_receiveByte();
    1780:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <UART_receiveByte>
    1784:	89 83       	std	Y+1, r24	; 0x01
	if(state == OPENED)
    1786:	89 81       	ldd	r24, Y+1	; 0x01
    1788:	89 30       	cpi	r24, 0x09	; 9
    178a:	31 f4       	brne	.+12     	; 0x1798 <opendoor+0x4e>
	{
		LCD_clearScreen();
    178c:	0e 94 8a 14 	call	0x2914	; 0x2914 <LCD_clearScreen>
		LCD_displayString("Door Opened");
    1790:	8b e1       	ldi	r24, 0x1B	; 27
    1792:	91 e0       	ldi	r25, 0x01	; 1
    1794:	0e 94 e3 13 	call	0x27c6	; 0x27c6 <LCD_displayString>
	}
	UART_sendByte(MC1_READY);
    1798:	80 e1       	ldi	r24, 0x10	; 16
    179a:	0e 94 30 15 	call	0x2a60	; 0x2a60 <UART_sendByte>
	state = UART_receiveByte();
    179e:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <UART_receiveByte>
    17a2:	89 83       	std	Y+1, r24	; 0x01
	if(state == LOCKING)
    17a4:	89 81       	ldd	r24, Y+1	; 0x01
    17a6:	88 30       	cpi	r24, 0x08	; 8
    17a8:	31 f4       	brne	.+12     	; 0x17b6 <opendoor+0x6c>
	{
		LCD_clearScreen();
    17aa:	0e 94 8a 14 	call	0x2914	; 0x2914 <LCD_clearScreen>
		LCD_displayString("LOCKING...");
    17ae:	87 e2       	ldi	r24, 0x27	; 39
    17b0:	91 e0       	ldi	r25, 0x01	; 1
    17b2:	0e 94 e3 13 	call	0x27c6	; 0x27c6 <LCD_displayString>
	}
}
    17b6:	0f 90       	pop	r0
    17b8:	cf 91       	pop	r28
    17ba:	df 91       	pop	r29
    17bc:	08 95       	ret

000017be <GPIO_setupPinDirection>:

/*
 * Description:
 * configure the pin direction input/output
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction){
    17be:	df 93       	push	r29
    17c0:	cf 93       	push	r28
    17c2:	cd b7       	in	r28, 0x3d	; 61
    17c4:	de b7       	in	r29, 0x3e	; 62
    17c6:	27 97       	sbiw	r28, 0x07	; 7
    17c8:	0f b6       	in	r0, 0x3f	; 63
    17ca:	f8 94       	cli
    17cc:	de bf       	out	0x3e, r29	; 62
    17ce:	0f be       	out	0x3f, r0	; 63
    17d0:	cd bf       	out	0x3d, r28	; 61
    17d2:	89 83       	std	Y+1, r24	; 0x01
    17d4:	6a 83       	std	Y+2, r22	; 0x02
    17d6:	4b 83       	std	Y+3, r20	; 0x03
	if(port_num>=NUM_OF_PORTS || pin_num>=NUM_OF_PINS)
    17d8:	89 81       	ldd	r24, Y+1	; 0x01
    17da:	84 30       	cpi	r24, 0x04	; 4
    17dc:	08 f0       	brcs	.+2      	; 0x17e0 <GPIO_setupPinDirection+0x22>
    17de:	ea c0       	rjmp	.+468    	; 0x19b4 <GPIO_setupPinDirection+0x1f6>
    17e0:	8a 81       	ldd	r24, Y+2	; 0x02
    17e2:	88 30       	cpi	r24, 0x08	; 8
    17e4:	08 f0       	brcs	.+2      	; 0x17e8 <GPIO_setupPinDirection+0x2a>
    17e6:	e6 c0       	rjmp	.+460    	; 0x19b4 <GPIO_setupPinDirection+0x1f6>
	{
		/* Do nothing*/
	}
	else{
		if(direction)
    17e8:	8b 81       	ldd	r24, Y+3	; 0x03
    17ea:	88 23       	and	r24, r24
    17ec:	09 f4       	brne	.+2      	; 0x17f0 <GPIO_setupPinDirection+0x32>
    17ee:	6f c0       	rjmp	.+222    	; 0x18ce <GPIO_setupPinDirection+0x110>
		{
			switch(port_num)
    17f0:	89 81       	ldd	r24, Y+1	; 0x01
    17f2:	28 2f       	mov	r18, r24
    17f4:	30 e0       	ldi	r19, 0x00	; 0
    17f6:	3f 83       	std	Y+7, r19	; 0x07
    17f8:	2e 83       	std	Y+6, r18	; 0x06
    17fa:	8e 81       	ldd	r24, Y+6	; 0x06
    17fc:	9f 81       	ldd	r25, Y+7	; 0x07
    17fe:	81 30       	cpi	r24, 0x01	; 1
    1800:	91 05       	cpc	r25, r1
    1802:	49 f1       	breq	.+82     	; 0x1856 <GPIO_setupPinDirection+0x98>
    1804:	2e 81       	ldd	r18, Y+6	; 0x06
    1806:	3f 81       	ldd	r19, Y+7	; 0x07
    1808:	22 30       	cpi	r18, 0x02	; 2
    180a:	31 05       	cpc	r19, r1
    180c:	2c f4       	brge	.+10     	; 0x1818 <GPIO_setupPinDirection+0x5a>
    180e:	8e 81       	ldd	r24, Y+6	; 0x06
    1810:	9f 81       	ldd	r25, Y+7	; 0x07
    1812:	00 97       	sbiw	r24, 0x00	; 0
    1814:	61 f0       	breq	.+24     	; 0x182e <GPIO_setupPinDirection+0x70>
    1816:	ce c0       	rjmp	.+412    	; 0x19b4 <GPIO_setupPinDirection+0x1f6>
    1818:	2e 81       	ldd	r18, Y+6	; 0x06
    181a:	3f 81       	ldd	r19, Y+7	; 0x07
    181c:	22 30       	cpi	r18, 0x02	; 2
    181e:	31 05       	cpc	r19, r1
    1820:	71 f1       	breq	.+92     	; 0x187e <GPIO_setupPinDirection+0xc0>
    1822:	8e 81       	ldd	r24, Y+6	; 0x06
    1824:	9f 81       	ldd	r25, Y+7	; 0x07
    1826:	83 30       	cpi	r24, 0x03	; 3
    1828:	91 05       	cpc	r25, r1
    182a:	e9 f1       	breq	.+122    	; 0x18a6 <GPIO_setupPinDirection+0xe8>
    182c:	c3 c0       	rjmp	.+390    	; 0x19b4 <GPIO_setupPinDirection+0x1f6>
			{
			case PORTA_ID: SET_BIT(DDRA,pin_num);
    182e:	aa e3       	ldi	r26, 0x3A	; 58
    1830:	b0 e0       	ldi	r27, 0x00	; 0
    1832:	ea e3       	ldi	r30, 0x3A	; 58
    1834:	f0 e0       	ldi	r31, 0x00	; 0
    1836:	80 81       	ld	r24, Z
    1838:	48 2f       	mov	r20, r24
    183a:	8a 81       	ldd	r24, Y+2	; 0x02
    183c:	28 2f       	mov	r18, r24
    183e:	30 e0       	ldi	r19, 0x00	; 0
    1840:	81 e0       	ldi	r24, 0x01	; 1
    1842:	90 e0       	ldi	r25, 0x00	; 0
    1844:	02 2e       	mov	r0, r18
    1846:	02 c0       	rjmp	.+4      	; 0x184c <GPIO_setupPinDirection+0x8e>
    1848:	88 0f       	add	r24, r24
    184a:	99 1f       	adc	r25, r25
    184c:	0a 94       	dec	r0
    184e:	e2 f7       	brpl	.-8      	; 0x1848 <GPIO_setupPinDirection+0x8a>
    1850:	84 2b       	or	r24, r20
    1852:	8c 93       	st	X, r24
    1854:	af c0       	rjmp	.+350    	; 0x19b4 <GPIO_setupPinDirection+0x1f6>
			break;
			case PORTB_ID: SET_BIT(DDRB,pin_num);
    1856:	a7 e3       	ldi	r26, 0x37	; 55
    1858:	b0 e0       	ldi	r27, 0x00	; 0
    185a:	e7 e3       	ldi	r30, 0x37	; 55
    185c:	f0 e0       	ldi	r31, 0x00	; 0
    185e:	80 81       	ld	r24, Z
    1860:	48 2f       	mov	r20, r24
    1862:	8a 81       	ldd	r24, Y+2	; 0x02
    1864:	28 2f       	mov	r18, r24
    1866:	30 e0       	ldi	r19, 0x00	; 0
    1868:	81 e0       	ldi	r24, 0x01	; 1
    186a:	90 e0       	ldi	r25, 0x00	; 0
    186c:	02 2e       	mov	r0, r18
    186e:	02 c0       	rjmp	.+4      	; 0x1874 <GPIO_setupPinDirection+0xb6>
    1870:	88 0f       	add	r24, r24
    1872:	99 1f       	adc	r25, r25
    1874:	0a 94       	dec	r0
    1876:	e2 f7       	brpl	.-8      	; 0x1870 <GPIO_setupPinDirection+0xb2>
    1878:	84 2b       	or	r24, r20
    187a:	8c 93       	st	X, r24
    187c:	9b c0       	rjmp	.+310    	; 0x19b4 <GPIO_setupPinDirection+0x1f6>
			break;
			case PORTC_ID: SET_BIT(DDRC,pin_num);
    187e:	a4 e3       	ldi	r26, 0x34	; 52
    1880:	b0 e0       	ldi	r27, 0x00	; 0
    1882:	e4 e3       	ldi	r30, 0x34	; 52
    1884:	f0 e0       	ldi	r31, 0x00	; 0
    1886:	80 81       	ld	r24, Z
    1888:	48 2f       	mov	r20, r24
    188a:	8a 81       	ldd	r24, Y+2	; 0x02
    188c:	28 2f       	mov	r18, r24
    188e:	30 e0       	ldi	r19, 0x00	; 0
    1890:	81 e0       	ldi	r24, 0x01	; 1
    1892:	90 e0       	ldi	r25, 0x00	; 0
    1894:	02 2e       	mov	r0, r18
    1896:	02 c0       	rjmp	.+4      	; 0x189c <GPIO_setupPinDirection+0xde>
    1898:	88 0f       	add	r24, r24
    189a:	99 1f       	adc	r25, r25
    189c:	0a 94       	dec	r0
    189e:	e2 f7       	brpl	.-8      	; 0x1898 <GPIO_setupPinDirection+0xda>
    18a0:	84 2b       	or	r24, r20
    18a2:	8c 93       	st	X, r24
    18a4:	87 c0       	rjmp	.+270    	; 0x19b4 <GPIO_setupPinDirection+0x1f6>
			break;
			case PORTD_ID: SET_BIT(DDRD,pin_num);
    18a6:	a1 e3       	ldi	r26, 0x31	; 49
    18a8:	b0 e0       	ldi	r27, 0x00	; 0
    18aa:	e1 e3       	ldi	r30, 0x31	; 49
    18ac:	f0 e0       	ldi	r31, 0x00	; 0
    18ae:	80 81       	ld	r24, Z
    18b0:	48 2f       	mov	r20, r24
    18b2:	8a 81       	ldd	r24, Y+2	; 0x02
    18b4:	28 2f       	mov	r18, r24
    18b6:	30 e0       	ldi	r19, 0x00	; 0
    18b8:	81 e0       	ldi	r24, 0x01	; 1
    18ba:	90 e0       	ldi	r25, 0x00	; 0
    18bc:	02 2e       	mov	r0, r18
    18be:	02 c0       	rjmp	.+4      	; 0x18c4 <GPIO_setupPinDirection+0x106>
    18c0:	88 0f       	add	r24, r24
    18c2:	99 1f       	adc	r25, r25
    18c4:	0a 94       	dec	r0
    18c6:	e2 f7       	brpl	.-8      	; 0x18c0 <GPIO_setupPinDirection+0x102>
    18c8:	84 2b       	or	r24, r20
    18ca:	8c 93       	st	X, r24
    18cc:	73 c0       	rjmp	.+230    	; 0x19b4 <GPIO_setupPinDirection+0x1f6>
			break;
			}
		}
		else{
			switch(port_num)
    18ce:	89 81       	ldd	r24, Y+1	; 0x01
    18d0:	28 2f       	mov	r18, r24
    18d2:	30 e0       	ldi	r19, 0x00	; 0
    18d4:	3d 83       	std	Y+5, r19	; 0x05
    18d6:	2c 83       	std	Y+4, r18	; 0x04
    18d8:	8c 81       	ldd	r24, Y+4	; 0x04
    18da:	9d 81       	ldd	r25, Y+5	; 0x05
    18dc:	81 30       	cpi	r24, 0x01	; 1
    18de:	91 05       	cpc	r25, r1
    18e0:	59 f1       	breq	.+86     	; 0x1938 <GPIO_setupPinDirection+0x17a>
    18e2:	2c 81       	ldd	r18, Y+4	; 0x04
    18e4:	3d 81       	ldd	r19, Y+5	; 0x05
    18e6:	22 30       	cpi	r18, 0x02	; 2
    18e8:	31 05       	cpc	r19, r1
    18ea:	2c f4       	brge	.+10     	; 0x18f6 <GPIO_setupPinDirection+0x138>
    18ec:	8c 81       	ldd	r24, Y+4	; 0x04
    18ee:	9d 81       	ldd	r25, Y+5	; 0x05
    18f0:	00 97       	sbiw	r24, 0x00	; 0
    18f2:	69 f0       	breq	.+26     	; 0x190e <GPIO_setupPinDirection+0x150>
    18f4:	5f c0       	rjmp	.+190    	; 0x19b4 <GPIO_setupPinDirection+0x1f6>
    18f6:	2c 81       	ldd	r18, Y+4	; 0x04
    18f8:	3d 81       	ldd	r19, Y+5	; 0x05
    18fa:	22 30       	cpi	r18, 0x02	; 2
    18fc:	31 05       	cpc	r19, r1
    18fe:	89 f1       	breq	.+98     	; 0x1962 <GPIO_setupPinDirection+0x1a4>
    1900:	8c 81       	ldd	r24, Y+4	; 0x04
    1902:	9d 81       	ldd	r25, Y+5	; 0x05
    1904:	83 30       	cpi	r24, 0x03	; 3
    1906:	91 05       	cpc	r25, r1
    1908:	09 f4       	brne	.+2      	; 0x190c <GPIO_setupPinDirection+0x14e>
    190a:	40 c0       	rjmp	.+128    	; 0x198c <GPIO_setupPinDirection+0x1ce>
    190c:	53 c0       	rjmp	.+166    	; 0x19b4 <GPIO_setupPinDirection+0x1f6>
			{
			case PORTA_ID: CLEAR_BIT(DDRA,pin_num);
    190e:	aa e3       	ldi	r26, 0x3A	; 58
    1910:	b0 e0       	ldi	r27, 0x00	; 0
    1912:	ea e3       	ldi	r30, 0x3A	; 58
    1914:	f0 e0       	ldi	r31, 0x00	; 0
    1916:	80 81       	ld	r24, Z
    1918:	48 2f       	mov	r20, r24
    191a:	8a 81       	ldd	r24, Y+2	; 0x02
    191c:	28 2f       	mov	r18, r24
    191e:	30 e0       	ldi	r19, 0x00	; 0
    1920:	81 e0       	ldi	r24, 0x01	; 1
    1922:	90 e0       	ldi	r25, 0x00	; 0
    1924:	02 2e       	mov	r0, r18
    1926:	02 c0       	rjmp	.+4      	; 0x192c <GPIO_setupPinDirection+0x16e>
    1928:	88 0f       	add	r24, r24
    192a:	99 1f       	adc	r25, r25
    192c:	0a 94       	dec	r0
    192e:	e2 f7       	brpl	.-8      	; 0x1928 <GPIO_setupPinDirection+0x16a>
    1930:	80 95       	com	r24
    1932:	84 23       	and	r24, r20
    1934:	8c 93       	st	X, r24
    1936:	3e c0       	rjmp	.+124    	; 0x19b4 <GPIO_setupPinDirection+0x1f6>
			break;
			case PORTB_ID: CLEAR_BIT(DDRB,pin_num);
    1938:	a7 e3       	ldi	r26, 0x37	; 55
    193a:	b0 e0       	ldi	r27, 0x00	; 0
    193c:	e7 e3       	ldi	r30, 0x37	; 55
    193e:	f0 e0       	ldi	r31, 0x00	; 0
    1940:	80 81       	ld	r24, Z
    1942:	48 2f       	mov	r20, r24
    1944:	8a 81       	ldd	r24, Y+2	; 0x02
    1946:	28 2f       	mov	r18, r24
    1948:	30 e0       	ldi	r19, 0x00	; 0
    194a:	81 e0       	ldi	r24, 0x01	; 1
    194c:	90 e0       	ldi	r25, 0x00	; 0
    194e:	02 2e       	mov	r0, r18
    1950:	02 c0       	rjmp	.+4      	; 0x1956 <GPIO_setupPinDirection+0x198>
    1952:	88 0f       	add	r24, r24
    1954:	99 1f       	adc	r25, r25
    1956:	0a 94       	dec	r0
    1958:	e2 f7       	brpl	.-8      	; 0x1952 <GPIO_setupPinDirection+0x194>
    195a:	80 95       	com	r24
    195c:	84 23       	and	r24, r20
    195e:	8c 93       	st	X, r24
    1960:	29 c0       	rjmp	.+82     	; 0x19b4 <GPIO_setupPinDirection+0x1f6>
			break;
			case PORTC_ID: CLEAR_BIT(DDRC,pin_num);
    1962:	a4 e3       	ldi	r26, 0x34	; 52
    1964:	b0 e0       	ldi	r27, 0x00	; 0
    1966:	e4 e3       	ldi	r30, 0x34	; 52
    1968:	f0 e0       	ldi	r31, 0x00	; 0
    196a:	80 81       	ld	r24, Z
    196c:	48 2f       	mov	r20, r24
    196e:	8a 81       	ldd	r24, Y+2	; 0x02
    1970:	28 2f       	mov	r18, r24
    1972:	30 e0       	ldi	r19, 0x00	; 0
    1974:	81 e0       	ldi	r24, 0x01	; 1
    1976:	90 e0       	ldi	r25, 0x00	; 0
    1978:	02 2e       	mov	r0, r18
    197a:	02 c0       	rjmp	.+4      	; 0x1980 <GPIO_setupPinDirection+0x1c2>
    197c:	88 0f       	add	r24, r24
    197e:	99 1f       	adc	r25, r25
    1980:	0a 94       	dec	r0
    1982:	e2 f7       	brpl	.-8      	; 0x197c <GPIO_setupPinDirection+0x1be>
    1984:	80 95       	com	r24
    1986:	84 23       	and	r24, r20
    1988:	8c 93       	st	X, r24
    198a:	14 c0       	rjmp	.+40     	; 0x19b4 <GPIO_setupPinDirection+0x1f6>
			break;
			case PORTD_ID: CLEAR_BIT(DDRD,pin_num);
    198c:	a1 e3       	ldi	r26, 0x31	; 49
    198e:	b0 e0       	ldi	r27, 0x00	; 0
    1990:	e1 e3       	ldi	r30, 0x31	; 49
    1992:	f0 e0       	ldi	r31, 0x00	; 0
    1994:	80 81       	ld	r24, Z
    1996:	48 2f       	mov	r20, r24
    1998:	8a 81       	ldd	r24, Y+2	; 0x02
    199a:	28 2f       	mov	r18, r24
    199c:	30 e0       	ldi	r19, 0x00	; 0
    199e:	81 e0       	ldi	r24, 0x01	; 1
    19a0:	90 e0       	ldi	r25, 0x00	; 0
    19a2:	02 2e       	mov	r0, r18
    19a4:	02 c0       	rjmp	.+4      	; 0x19aa <GPIO_setupPinDirection+0x1ec>
    19a6:	88 0f       	add	r24, r24
    19a8:	99 1f       	adc	r25, r25
    19aa:	0a 94       	dec	r0
    19ac:	e2 f7       	brpl	.-8      	; 0x19a6 <GPIO_setupPinDirection+0x1e8>
    19ae:	80 95       	com	r24
    19b0:	84 23       	and	r24, r20
    19b2:	8c 93       	st	X, r24
			break;
			}
		}
	}
}
    19b4:	27 96       	adiw	r28, 0x07	; 7
    19b6:	0f b6       	in	r0, 0x3f	; 63
    19b8:	f8 94       	cli
    19ba:	de bf       	out	0x3e, r29	; 62
    19bc:	0f be       	out	0x3f, r0	; 63
    19be:	cd bf       	out	0x3d, r28	; 61
    19c0:	cf 91       	pop	r28
    19c2:	df 91       	pop	r29
    19c4:	08 95       	ret

000019c6 <GPIO_writePin>:
 * Description:
 * if the pin is output it will write logic high or logic low
 * if the pin is input it will enable the pull up resistor if it write logic high
 */

void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value){
    19c6:	df 93       	push	r29
    19c8:	cf 93       	push	r28
    19ca:	cd b7       	in	r28, 0x3d	; 61
    19cc:	de b7       	in	r29, 0x3e	; 62
    19ce:	27 97       	sbiw	r28, 0x07	; 7
    19d0:	0f b6       	in	r0, 0x3f	; 63
    19d2:	f8 94       	cli
    19d4:	de bf       	out	0x3e, r29	; 62
    19d6:	0f be       	out	0x3f, r0	; 63
    19d8:	cd bf       	out	0x3d, r28	; 61
    19da:	89 83       	std	Y+1, r24	; 0x01
    19dc:	6a 83       	std	Y+2, r22	; 0x02
    19de:	4b 83       	std	Y+3, r20	; 0x03
	if(port_num>=NUM_OF_PORTS || pin_num>=NUM_OF_PINS)
    19e0:	89 81       	ldd	r24, Y+1	; 0x01
    19e2:	84 30       	cpi	r24, 0x04	; 4
    19e4:	08 f0       	brcs	.+2      	; 0x19e8 <GPIO_writePin+0x22>
    19e6:	ea c0       	rjmp	.+468    	; 0x1bbc <GPIO_writePin+0x1f6>
    19e8:	8a 81       	ldd	r24, Y+2	; 0x02
    19ea:	88 30       	cpi	r24, 0x08	; 8
    19ec:	08 f0       	brcs	.+2      	; 0x19f0 <GPIO_writePin+0x2a>
    19ee:	e6 c0       	rjmp	.+460    	; 0x1bbc <GPIO_writePin+0x1f6>
	{
		/* Do nothing*/
	}
	else
	{
		if(value == LOGIC_HIGH)
    19f0:	8b 81       	ldd	r24, Y+3	; 0x03
    19f2:	81 30       	cpi	r24, 0x01	; 1
    19f4:	09 f0       	breq	.+2      	; 0x19f8 <GPIO_writePin+0x32>
    19f6:	6f c0       	rjmp	.+222    	; 0x1ad6 <GPIO_writePin+0x110>
		{
			switch(port_num)
    19f8:	89 81       	ldd	r24, Y+1	; 0x01
    19fa:	28 2f       	mov	r18, r24
    19fc:	30 e0       	ldi	r19, 0x00	; 0
    19fe:	3f 83       	std	Y+7, r19	; 0x07
    1a00:	2e 83       	std	Y+6, r18	; 0x06
    1a02:	8e 81       	ldd	r24, Y+6	; 0x06
    1a04:	9f 81       	ldd	r25, Y+7	; 0x07
    1a06:	81 30       	cpi	r24, 0x01	; 1
    1a08:	91 05       	cpc	r25, r1
    1a0a:	49 f1       	breq	.+82     	; 0x1a5e <GPIO_writePin+0x98>
    1a0c:	2e 81       	ldd	r18, Y+6	; 0x06
    1a0e:	3f 81       	ldd	r19, Y+7	; 0x07
    1a10:	22 30       	cpi	r18, 0x02	; 2
    1a12:	31 05       	cpc	r19, r1
    1a14:	2c f4       	brge	.+10     	; 0x1a20 <GPIO_writePin+0x5a>
    1a16:	8e 81       	ldd	r24, Y+6	; 0x06
    1a18:	9f 81       	ldd	r25, Y+7	; 0x07
    1a1a:	00 97       	sbiw	r24, 0x00	; 0
    1a1c:	61 f0       	breq	.+24     	; 0x1a36 <GPIO_writePin+0x70>
    1a1e:	ce c0       	rjmp	.+412    	; 0x1bbc <GPIO_writePin+0x1f6>
    1a20:	2e 81       	ldd	r18, Y+6	; 0x06
    1a22:	3f 81       	ldd	r19, Y+7	; 0x07
    1a24:	22 30       	cpi	r18, 0x02	; 2
    1a26:	31 05       	cpc	r19, r1
    1a28:	71 f1       	breq	.+92     	; 0x1a86 <GPIO_writePin+0xc0>
    1a2a:	8e 81       	ldd	r24, Y+6	; 0x06
    1a2c:	9f 81       	ldd	r25, Y+7	; 0x07
    1a2e:	83 30       	cpi	r24, 0x03	; 3
    1a30:	91 05       	cpc	r25, r1
    1a32:	e9 f1       	breq	.+122    	; 0x1aae <GPIO_writePin+0xe8>
    1a34:	c3 c0       	rjmp	.+390    	; 0x1bbc <GPIO_writePin+0x1f6>
			{
			case PORTA_ID: SET_BIT(PORTA,pin_num);
    1a36:	ab e3       	ldi	r26, 0x3B	; 59
    1a38:	b0 e0       	ldi	r27, 0x00	; 0
    1a3a:	eb e3       	ldi	r30, 0x3B	; 59
    1a3c:	f0 e0       	ldi	r31, 0x00	; 0
    1a3e:	80 81       	ld	r24, Z
    1a40:	48 2f       	mov	r20, r24
    1a42:	8a 81       	ldd	r24, Y+2	; 0x02
    1a44:	28 2f       	mov	r18, r24
    1a46:	30 e0       	ldi	r19, 0x00	; 0
    1a48:	81 e0       	ldi	r24, 0x01	; 1
    1a4a:	90 e0       	ldi	r25, 0x00	; 0
    1a4c:	02 2e       	mov	r0, r18
    1a4e:	02 c0       	rjmp	.+4      	; 0x1a54 <GPIO_writePin+0x8e>
    1a50:	88 0f       	add	r24, r24
    1a52:	99 1f       	adc	r25, r25
    1a54:	0a 94       	dec	r0
    1a56:	e2 f7       	brpl	.-8      	; 0x1a50 <GPIO_writePin+0x8a>
    1a58:	84 2b       	or	r24, r20
    1a5a:	8c 93       	st	X, r24
    1a5c:	af c0       	rjmp	.+350    	; 0x1bbc <GPIO_writePin+0x1f6>
			break;
			case PORTB_ID: SET_BIT(PORTB,pin_num);
    1a5e:	a8 e3       	ldi	r26, 0x38	; 56
    1a60:	b0 e0       	ldi	r27, 0x00	; 0
    1a62:	e8 e3       	ldi	r30, 0x38	; 56
    1a64:	f0 e0       	ldi	r31, 0x00	; 0
    1a66:	80 81       	ld	r24, Z
    1a68:	48 2f       	mov	r20, r24
    1a6a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a6c:	28 2f       	mov	r18, r24
    1a6e:	30 e0       	ldi	r19, 0x00	; 0
    1a70:	81 e0       	ldi	r24, 0x01	; 1
    1a72:	90 e0       	ldi	r25, 0x00	; 0
    1a74:	02 2e       	mov	r0, r18
    1a76:	02 c0       	rjmp	.+4      	; 0x1a7c <GPIO_writePin+0xb6>
    1a78:	88 0f       	add	r24, r24
    1a7a:	99 1f       	adc	r25, r25
    1a7c:	0a 94       	dec	r0
    1a7e:	e2 f7       	brpl	.-8      	; 0x1a78 <GPIO_writePin+0xb2>
    1a80:	84 2b       	or	r24, r20
    1a82:	8c 93       	st	X, r24
    1a84:	9b c0       	rjmp	.+310    	; 0x1bbc <GPIO_writePin+0x1f6>
			break;
			case PORTC_ID: SET_BIT(PORTC,pin_num);
    1a86:	a5 e3       	ldi	r26, 0x35	; 53
    1a88:	b0 e0       	ldi	r27, 0x00	; 0
    1a8a:	e5 e3       	ldi	r30, 0x35	; 53
    1a8c:	f0 e0       	ldi	r31, 0x00	; 0
    1a8e:	80 81       	ld	r24, Z
    1a90:	48 2f       	mov	r20, r24
    1a92:	8a 81       	ldd	r24, Y+2	; 0x02
    1a94:	28 2f       	mov	r18, r24
    1a96:	30 e0       	ldi	r19, 0x00	; 0
    1a98:	81 e0       	ldi	r24, 0x01	; 1
    1a9a:	90 e0       	ldi	r25, 0x00	; 0
    1a9c:	02 2e       	mov	r0, r18
    1a9e:	02 c0       	rjmp	.+4      	; 0x1aa4 <GPIO_writePin+0xde>
    1aa0:	88 0f       	add	r24, r24
    1aa2:	99 1f       	adc	r25, r25
    1aa4:	0a 94       	dec	r0
    1aa6:	e2 f7       	brpl	.-8      	; 0x1aa0 <GPIO_writePin+0xda>
    1aa8:	84 2b       	or	r24, r20
    1aaa:	8c 93       	st	X, r24
    1aac:	87 c0       	rjmp	.+270    	; 0x1bbc <GPIO_writePin+0x1f6>
			break;
			case PORTD_ID: SET_BIT(PORTD,pin_num);
    1aae:	a2 e3       	ldi	r26, 0x32	; 50
    1ab0:	b0 e0       	ldi	r27, 0x00	; 0
    1ab2:	e2 e3       	ldi	r30, 0x32	; 50
    1ab4:	f0 e0       	ldi	r31, 0x00	; 0
    1ab6:	80 81       	ld	r24, Z
    1ab8:	48 2f       	mov	r20, r24
    1aba:	8a 81       	ldd	r24, Y+2	; 0x02
    1abc:	28 2f       	mov	r18, r24
    1abe:	30 e0       	ldi	r19, 0x00	; 0
    1ac0:	81 e0       	ldi	r24, 0x01	; 1
    1ac2:	90 e0       	ldi	r25, 0x00	; 0
    1ac4:	02 2e       	mov	r0, r18
    1ac6:	02 c0       	rjmp	.+4      	; 0x1acc <GPIO_writePin+0x106>
    1ac8:	88 0f       	add	r24, r24
    1aca:	99 1f       	adc	r25, r25
    1acc:	0a 94       	dec	r0
    1ace:	e2 f7       	brpl	.-8      	; 0x1ac8 <GPIO_writePin+0x102>
    1ad0:	84 2b       	or	r24, r20
    1ad2:	8c 93       	st	X, r24
    1ad4:	73 c0       	rjmp	.+230    	; 0x1bbc <GPIO_writePin+0x1f6>
			break;
			}
		}
		else{
			switch(port_num)
    1ad6:	89 81       	ldd	r24, Y+1	; 0x01
    1ad8:	28 2f       	mov	r18, r24
    1ada:	30 e0       	ldi	r19, 0x00	; 0
    1adc:	3d 83       	std	Y+5, r19	; 0x05
    1ade:	2c 83       	std	Y+4, r18	; 0x04
    1ae0:	8c 81       	ldd	r24, Y+4	; 0x04
    1ae2:	9d 81       	ldd	r25, Y+5	; 0x05
    1ae4:	81 30       	cpi	r24, 0x01	; 1
    1ae6:	91 05       	cpc	r25, r1
    1ae8:	59 f1       	breq	.+86     	; 0x1b40 <GPIO_writePin+0x17a>
    1aea:	2c 81       	ldd	r18, Y+4	; 0x04
    1aec:	3d 81       	ldd	r19, Y+5	; 0x05
    1aee:	22 30       	cpi	r18, 0x02	; 2
    1af0:	31 05       	cpc	r19, r1
    1af2:	2c f4       	brge	.+10     	; 0x1afe <GPIO_writePin+0x138>
    1af4:	8c 81       	ldd	r24, Y+4	; 0x04
    1af6:	9d 81       	ldd	r25, Y+5	; 0x05
    1af8:	00 97       	sbiw	r24, 0x00	; 0
    1afa:	69 f0       	breq	.+26     	; 0x1b16 <GPIO_writePin+0x150>
    1afc:	5f c0       	rjmp	.+190    	; 0x1bbc <GPIO_writePin+0x1f6>
    1afe:	2c 81       	ldd	r18, Y+4	; 0x04
    1b00:	3d 81       	ldd	r19, Y+5	; 0x05
    1b02:	22 30       	cpi	r18, 0x02	; 2
    1b04:	31 05       	cpc	r19, r1
    1b06:	89 f1       	breq	.+98     	; 0x1b6a <GPIO_writePin+0x1a4>
    1b08:	8c 81       	ldd	r24, Y+4	; 0x04
    1b0a:	9d 81       	ldd	r25, Y+5	; 0x05
    1b0c:	83 30       	cpi	r24, 0x03	; 3
    1b0e:	91 05       	cpc	r25, r1
    1b10:	09 f4       	brne	.+2      	; 0x1b14 <GPIO_writePin+0x14e>
    1b12:	40 c0       	rjmp	.+128    	; 0x1b94 <GPIO_writePin+0x1ce>
    1b14:	53 c0       	rjmp	.+166    	; 0x1bbc <GPIO_writePin+0x1f6>
			{
			case PORTA_ID: CLEAR_BIT(PORTA,pin_num);
    1b16:	ab e3       	ldi	r26, 0x3B	; 59
    1b18:	b0 e0       	ldi	r27, 0x00	; 0
    1b1a:	eb e3       	ldi	r30, 0x3B	; 59
    1b1c:	f0 e0       	ldi	r31, 0x00	; 0
    1b1e:	80 81       	ld	r24, Z
    1b20:	48 2f       	mov	r20, r24
    1b22:	8a 81       	ldd	r24, Y+2	; 0x02
    1b24:	28 2f       	mov	r18, r24
    1b26:	30 e0       	ldi	r19, 0x00	; 0
    1b28:	81 e0       	ldi	r24, 0x01	; 1
    1b2a:	90 e0       	ldi	r25, 0x00	; 0
    1b2c:	02 2e       	mov	r0, r18
    1b2e:	02 c0       	rjmp	.+4      	; 0x1b34 <GPIO_writePin+0x16e>
    1b30:	88 0f       	add	r24, r24
    1b32:	99 1f       	adc	r25, r25
    1b34:	0a 94       	dec	r0
    1b36:	e2 f7       	brpl	.-8      	; 0x1b30 <GPIO_writePin+0x16a>
    1b38:	80 95       	com	r24
    1b3a:	84 23       	and	r24, r20
    1b3c:	8c 93       	st	X, r24
    1b3e:	3e c0       	rjmp	.+124    	; 0x1bbc <GPIO_writePin+0x1f6>
			break;
			case PORTB_ID: CLEAR_BIT(PORTB,pin_num);
    1b40:	a8 e3       	ldi	r26, 0x38	; 56
    1b42:	b0 e0       	ldi	r27, 0x00	; 0
    1b44:	e8 e3       	ldi	r30, 0x38	; 56
    1b46:	f0 e0       	ldi	r31, 0x00	; 0
    1b48:	80 81       	ld	r24, Z
    1b4a:	48 2f       	mov	r20, r24
    1b4c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b4e:	28 2f       	mov	r18, r24
    1b50:	30 e0       	ldi	r19, 0x00	; 0
    1b52:	81 e0       	ldi	r24, 0x01	; 1
    1b54:	90 e0       	ldi	r25, 0x00	; 0
    1b56:	02 2e       	mov	r0, r18
    1b58:	02 c0       	rjmp	.+4      	; 0x1b5e <GPIO_writePin+0x198>
    1b5a:	88 0f       	add	r24, r24
    1b5c:	99 1f       	adc	r25, r25
    1b5e:	0a 94       	dec	r0
    1b60:	e2 f7       	brpl	.-8      	; 0x1b5a <GPIO_writePin+0x194>
    1b62:	80 95       	com	r24
    1b64:	84 23       	and	r24, r20
    1b66:	8c 93       	st	X, r24
    1b68:	29 c0       	rjmp	.+82     	; 0x1bbc <GPIO_writePin+0x1f6>
			break;
			case PORTC_ID: CLEAR_BIT(PORTC,pin_num);
    1b6a:	a5 e3       	ldi	r26, 0x35	; 53
    1b6c:	b0 e0       	ldi	r27, 0x00	; 0
    1b6e:	e5 e3       	ldi	r30, 0x35	; 53
    1b70:	f0 e0       	ldi	r31, 0x00	; 0
    1b72:	80 81       	ld	r24, Z
    1b74:	48 2f       	mov	r20, r24
    1b76:	8a 81       	ldd	r24, Y+2	; 0x02
    1b78:	28 2f       	mov	r18, r24
    1b7a:	30 e0       	ldi	r19, 0x00	; 0
    1b7c:	81 e0       	ldi	r24, 0x01	; 1
    1b7e:	90 e0       	ldi	r25, 0x00	; 0
    1b80:	02 2e       	mov	r0, r18
    1b82:	02 c0       	rjmp	.+4      	; 0x1b88 <GPIO_writePin+0x1c2>
    1b84:	88 0f       	add	r24, r24
    1b86:	99 1f       	adc	r25, r25
    1b88:	0a 94       	dec	r0
    1b8a:	e2 f7       	brpl	.-8      	; 0x1b84 <GPIO_writePin+0x1be>
    1b8c:	80 95       	com	r24
    1b8e:	84 23       	and	r24, r20
    1b90:	8c 93       	st	X, r24
    1b92:	14 c0       	rjmp	.+40     	; 0x1bbc <GPIO_writePin+0x1f6>
			break;
			case PORTD_ID: CLEAR_BIT(PORTD,pin_num);
    1b94:	a2 e3       	ldi	r26, 0x32	; 50
    1b96:	b0 e0       	ldi	r27, 0x00	; 0
    1b98:	e2 e3       	ldi	r30, 0x32	; 50
    1b9a:	f0 e0       	ldi	r31, 0x00	; 0
    1b9c:	80 81       	ld	r24, Z
    1b9e:	48 2f       	mov	r20, r24
    1ba0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ba2:	28 2f       	mov	r18, r24
    1ba4:	30 e0       	ldi	r19, 0x00	; 0
    1ba6:	81 e0       	ldi	r24, 0x01	; 1
    1ba8:	90 e0       	ldi	r25, 0x00	; 0
    1baa:	02 2e       	mov	r0, r18
    1bac:	02 c0       	rjmp	.+4      	; 0x1bb2 <GPIO_writePin+0x1ec>
    1bae:	88 0f       	add	r24, r24
    1bb0:	99 1f       	adc	r25, r25
    1bb2:	0a 94       	dec	r0
    1bb4:	e2 f7       	brpl	.-8      	; 0x1bae <GPIO_writePin+0x1e8>
    1bb6:	80 95       	com	r24
    1bb8:	84 23       	and	r24, r20
    1bba:	8c 93       	st	X, r24
			break;
			}
		}
	}
}
    1bbc:	27 96       	adiw	r28, 0x07	; 7
    1bbe:	0f b6       	in	r0, 0x3f	; 63
    1bc0:	f8 94       	cli
    1bc2:	de bf       	out	0x3e, r29	; 62
    1bc4:	0f be       	out	0x3f, r0	; 63
    1bc6:	cd bf       	out	0x3d, r28	; 61
    1bc8:	cf 91       	pop	r28
    1bca:	df 91       	pop	r29
    1bcc:	08 95       	ret

00001bce <GPIO_readPin>:
/*
 * Description:
 * read the value on the required pin
 * if the port number or pin number is incorrect the function returns zero
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num){
    1bce:	df 93       	push	r29
    1bd0:	cf 93       	push	r28
    1bd2:	00 d0       	rcall	.+0      	; 0x1bd4 <GPIO_readPin+0x6>
    1bd4:	00 d0       	rcall	.+0      	; 0x1bd6 <GPIO_readPin+0x8>
    1bd6:	0f 92       	push	r0
    1bd8:	cd b7       	in	r28, 0x3d	; 61
    1bda:	de b7       	in	r29, 0x3e	; 62
    1bdc:	8a 83       	std	Y+2, r24	; 0x02
    1bde:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1be0:	19 82       	std	Y+1, r1	; 0x01
	if(port_num>=NUM_OF_PORTS || pin_num>=NUM_OF_PINS)
    1be2:	8a 81       	ldd	r24, Y+2	; 0x02
    1be4:	84 30       	cpi	r24, 0x04	; 4
    1be6:	08 f0       	brcs	.+2      	; 0x1bea <GPIO_readPin+0x1c>
    1be8:	84 c0       	rjmp	.+264    	; 0x1cf2 <GPIO_readPin+0x124>
    1bea:	8b 81       	ldd	r24, Y+3	; 0x03
    1bec:	88 30       	cpi	r24, 0x08	; 8
    1bee:	08 f0       	brcs	.+2      	; 0x1bf2 <GPIO_readPin+0x24>
    1bf0:	80 c0       	rjmp	.+256    	; 0x1cf2 <GPIO_readPin+0x124>
	{
		/*Do nothing*/
	}
	else
	{
		switch(port_num)
    1bf2:	8a 81       	ldd	r24, Y+2	; 0x02
    1bf4:	28 2f       	mov	r18, r24
    1bf6:	30 e0       	ldi	r19, 0x00	; 0
    1bf8:	3d 83       	std	Y+5, r19	; 0x05
    1bfa:	2c 83       	std	Y+4, r18	; 0x04
    1bfc:	4c 81       	ldd	r20, Y+4	; 0x04
    1bfe:	5d 81       	ldd	r21, Y+5	; 0x05
    1c00:	41 30       	cpi	r20, 0x01	; 1
    1c02:	51 05       	cpc	r21, r1
    1c04:	79 f1       	breq	.+94     	; 0x1c64 <GPIO_readPin+0x96>
    1c06:	8c 81       	ldd	r24, Y+4	; 0x04
    1c08:	9d 81       	ldd	r25, Y+5	; 0x05
    1c0a:	82 30       	cpi	r24, 0x02	; 2
    1c0c:	91 05       	cpc	r25, r1
    1c0e:	34 f4       	brge	.+12     	; 0x1c1c <GPIO_readPin+0x4e>
    1c10:	2c 81       	ldd	r18, Y+4	; 0x04
    1c12:	3d 81       	ldd	r19, Y+5	; 0x05
    1c14:	21 15       	cp	r18, r1
    1c16:	31 05       	cpc	r19, r1
    1c18:	69 f0       	breq	.+26     	; 0x1c34 <GPIO_readPin+0x66>
    1c1a:	6b c0       	rjmp	.+214    	; 0x1cf2 <GPIO_readPin+0x124>
    1c1c:	4c 81       	ldd	r20, Y+4	; 0x04
    1c1e:	5d 81       	ldd	r21, Y+5	; 0x05
    1c20:	42 30       	cpi	r20, 0x02	; 2
    1c22:	51 05       	cpc	r21, r1
    1c24:	b9 f1       	breq	.+110    	; 0x1c94 <GPIO_readPin+0xc6>
    1c26:	8c 81       	ldd	r24, Y+4	; 0x04
    1c28:	9d 81       	ldd	r25, Y+5	; 0x05
    1c2a:	83 30       	cpi	r24, 0x03	; 3
    1c2c:	91 05       	cpc	r25, r1
    1c2e:	09 f4       	brne	.+2      	; 0x1c32 <GPIO_readPin+0x64>
    1c30:	49 c0       	rjmp	.+146    	; 0x1cc4 <GPIO_readPin+0xf6>
    1c32:	5f c0       	rjmp	.+190    	; 0x1cf2 <GPIO_readPin+0x124>
		{
		case PORTA_ID: if(BIT_IS_SET(PINA,pin_num))
    1c34:	e9 e3       	ldi	r30, 0x39	; 57
    1c36:	f0 e0       	ldi	r31, 0x00	; 0
    1c38:	80 81       	ld	r24, Z
    1c3a:	28 2f       	mov	r18, r24
    1c3c:	30 e0       	ldi	r19, 0x00	; 0
    1c3e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c40:	88 2f       	mov	r24, r24
    1c42:	90 e0       	ldi	r25, 0x00	; 0
    1c44:	a9 01       	movw	r20, r18
    1c46:	02 c0       	rjmp	.+4      	; 0x1c4c <GPIO_readPin+0x7e>
    1c48:	55 95       	asr	r21
    1c4a:	47 95       	ror	r20
    1c4c:	8a 95       	dec	r24
    1c4e:	e2 f7       	brpl	.-8      	; 0x1c48 <GPIO_readPin+0x7a>
    1c50:	ca 01       	movw	r24, r20
    1c52:	81 70       	andi	r24, 0x01	; 1
    1c54:	90 70       	andi	r25, 0x00	; 0
    1c56:	88 23       	and	r24, r24
    1c58:	19 f0       	breq	.+6      	; 0x1c60 <GPIO_readPin+0x92>
		{
			pin_value = LOGIC_HIGH;
    1c5a:	81 e0       	ldi	r24, 0x01	; 1
    1c5c:	89 83       	std	Y+1, r24	; 0x01
    1c5e:	49 c0       	rjmp	.+146    	; 0x1cf2 <GPIO_readPin+0x124>
		}
		else
		{
			pin_value = LOGIC_LOW;
    1c60:	19 82       	std	Y+1, r1	; 0x01
    1c62:	47 c0       	rjmp	.+142    	; 0x1cf2 <GPIO_readPin+0x124>
		}
		break;
		case PORTB_ID: if(BIT_IS_SET(PINB,pin_num))
    1c64:	e6 e3       	ldi	r30, 0x36	; 54
    1c66:	f0 e0       	ldi	r31, 0x00	; 0
    1c68:	80 81       	ld	r24, Z
    1c6a:	28 2f       	mov	r18, r24
    1c6c:	30 e0       	ldi	r19, 0x00	; 0
    1c6e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c70:	88 2f       	mov	r24, r24
    1c72:	90 e0       	ldi	r25, 0x00	; 0
    1c74:	a9 01       	movw	r20, r18
    1c76:	02 c0       	rjmp	.+4      	; 0x1c7c <GPIO_readPin+0xae>
    1c78:	55 95       	asr	r21
    1c7a:	47 95       	ror	r20
    1c7c:	8a 95       	dec	r24
    1c7e:	e2 f7       	brpl	.-8      	; 0x1c78 <GPIO_readPin+0xaa>
    1c80:	ca 01       	movw	r24, r20
    1c82:	81 70       	andi	r24, 0x01	; 1
    1c84:	90 70       	andi	r25, 0x00	; 0
    1c86:	88 23       	and	r24, r24
    1c88:	19 f0       	breq	.+6      	; 0x1c90 <GPIO_readPin+0xc2>
		{
			pin_value = LOGIC_HIGH;
    1c8a:	81 e0       	ldi	r24, 0x01	; 1
    1c8c:	89 83       	std	Y+1, r24	; 0x01
    1c8e:	31 c0       	rjmp	.+98     	; 0x1cf2 <GPIO_readPin+0x124>
		}
		else
		{
			pin_value = LOGIC_LOW;
    1c90:	19 82       	std	Y+1, r1	; 0x01
    1c92:	2f c0       	rjmp	.+94     	; 0x1cf2 <GPIO_readPin+0x124>
		}
		break;
		case PORTC_ID: if(BIT_IS_SET(PINC,pin_num))
    1c94:	e3 e3       	ldi	r30, 0x33	; 51
    1c96:	f0 e0       	ldi	r31, 0x00	; 0
    1c98:	80 81       	ld	r24, Z
    1c9a:	28 2f       	mov	r18, r24
    1c9c:	30 e0       	ldi	r19, 0x00	; 0
    1c9e:	8b 81       	ldd	r24, Y+3	; 0x03
    1ca0:	88 2f       	mov	r24, r24
    1ca2:	90 e0       	ldi	r25, 0x00	; 0
    1ca4:	a9 01       	movw	r20, r18
    1ca6:	02 c0       	rjmp	.+4      	; 0x1cac <GPIO_readPin+0xde>
    1ca8:	55 95       	asr	r21
    1caa:	47 95       	ror	r20
    1cac:	8a 95       	dec	r24
    1cae:	e2 f7       	brpl	.-8      	; 0x1ca8 <GPIO_readPin+0xda>
    1cb0:	ca 01       	movw	r24, r20
    1cb2:	81 70       	andi	r24, 0x01	; 1
    1cb4:	90 70       	andi	r25, 0x00	; 0
    1cb6:	88 23       	and	r24, r24
    1cb8:	19 f0       	breq	.+6      	; 0x1cc0 <GPIO_readPin+0xf2>
		{
			pin_value = LOGIC_HIGH;
    1cba:	81 e0       	ldi	r24, 0x01	; 1
    1cbc:	89 83       	std	Y+1, r24	; 0x01
    1cbe:	19 c0       	rjmp	.+50     	; 0x1cf2 <GPIO_readPin+0x124>
		}
		else
		{
			pin_value = LOGIC_LOW;
    1cc0:	19 82       	std	Y+1, r1	; 0x01
    1cc2:	17 c0       	rjmp	.+46     	; 0x1cf2 <GPIO_readPin+0x124>
		}
		break;
		case PORTD_ID: if(BIT_IS_SET(PIND,pin_num))
    1cc4:	e0 e3       	ldi	r30, 0x30	; 48
    1cc6:	f0 e0       	ldi	r31, 0x00	; 0
    1cc8:	80 81       	ld	r24, Z
    1cca:	28 2f       	mov	r18, r24
    1ccc:	30 e0       	ldi	r19, 0x00	; 0
    1cce:	8b 81       	ldd	r24, Y+3	; 0x03
    1cd0:	88 2f       	mov	r24, r24
    1cd2:	90 e0       	ldi	r25, 0x00	; 0
    1cd4:	a9 01       	movw	r20, r18
    1cd6:	02 c0       	rjmp	.+4      	; 0x1cdc <GPIO_readPin+0x10e>
    1cd8:	55 95       	asr	r21
    1cda:	47 95       	ror	r20
    1cdc:	8a 95       	dec	r24
    1cde:	e2 f7       	brpl	.-8      	; 0x1cd8 <GPIO_readPin+0x10a>
    1ce0:	ca 01       	movw	r24, r20
    1ce2:	81 70       	andi	r24, 0x01	; 1
    1ce4:	90 70       	andi	r25, 0x00	; 0
    1ce6:	88 23       	and	r24, r24
    1ce8:	19 f0       	breq	.+6      	; 0x1cf0 <GPIO_readPin+0x122>
		{
			pin_value = LOGIC_HIGH;
    1cea:	81 e0       	ldi	r24, 0x01	; 1
    1cec:	89 83       	std	Y+1, r24	; 0x01
    1cee:	01 c0       	rjmp	.+2      	; 0x1cf2 <GPIO_readPin+0x124>
		}
		else
		{
			pin_value = LOGIC_LOW;
    1cf0:	19 82       	std	Y+1, r1	; 0x01
		}
		break;
		}
	}
	return pin_value;
    1cf2:	89 81       	ldd	r24, Y+1	; 0x01
}
    1cf4:	0f 90       	pop	r0
    1cf6:	0f 90       	pop	r0
    1cf8:	0f 90       	pop	r0
    1cfa:	0f 90       	pop	r0
    1cfc:	0f 90       	pop	r0
    1cfe:	cf 91       	pop	r28
    1d00:	df 91       	pop	r29
    1d02:	08 95       	ret

00001d04 <GPIO_setupPortDirection>:

/*
 * Description:
 * configure the port direction input/output
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction){
    1d04:	df 93       	push	r29
    1d06:	cf 93       	push	r28
    1d08:	00 d0       	rcall	.+0      	; 0x1d0a <GPIO_setupPortDirection+0x6>
    1d0a:	00 d0       	rcall	.+0      	; 0x1d0c <GPIO_setupPortDirection+0x8>
    1d0c:	cd b7       	in	r28, 0x3d	; 61
    1d0e:	de b7       	in	r29, 0x3e	; 62
    1d10:	89 83       	std	Y+1, r24	; 0x01
    1d12:	6a 83       	std	Y+2, r22	; 0x02
	if(port_num>= NUM_OF_PORTS)
    1d14:	89 81       	ldd	r24, Y+1	; 0x01
    1d16:	84 30       	cpi	r24, 0x04	; 4
    1d18:	90 f5       	brcc	.+100    	; 0x1d7e <GPIO_setupPortDirection+0x7a>
	{
		/* Do nothing */
	}
	else
	{
		switch(port_num)
    1d1a:	89 81       	ldd	r24, Y+1	; 0x01
    1d1c:	28 2f       	mov	r18, r24
    1d1e:	30 e0       	ldi	r19, 0x00	; 0
    1d20:	3c 83       	std	Y+4, r19	; 0x04
    1d22:	2b 83       	std	Y+3, r18	; 0x03
    1d24:	8b 81       	ldd	r24, Y+3	; 0x03
    1d26:	9c 81       	ldd	r25, Y+4	; 0x04
    1d28:	81 30       	cpi	r24, 0x01	; 1
    1d2a:	91 05       	cpc	r25, r1
    1d2c:	d1 f0       	breq	.+52     	; 0x1d62 <GPIO_setupPortDirection+0x5e>
    1d2e:	2b 81       	ldd	r18, Y+3	; 0x03
    1d30:	3c 81       	ldd	r19, Y+4	; 0x04
    1d32:	22 30       	cpi	r18, 0x02	; 2
    1d34:	31 05       	cpc	r19, r1
    1d36:	2c f4       	brge	.+10     	; 0x1d42 <GPIO_setupPortDirection+0x3e>
    1d38:	8b 81       	ldd	r24, Y+3	; 0x03
    1d3a:	9c 81       	ldd	r25, Y+4	; 0x04
    1d3c:	00 97       	sbiw	r24, 0x00	; 0
    1d3e:	61 f0       	breq	.+24     	; 0x1d58 <GPIO_setupPortDirection+0x54>
    1d40:	1e c0       	rjmp	.+60     	; 0x1d7e <GPIO_setupPortDirection+0x7a>
    1d42:	2b 81       	ldd	r18, Y+3	; 0x03
    1d44:	3c 81       	ldd	r19, Y+4	; 0x04
    1d46:	22 30       	cpi	r18, 0x02	; 2
    1d48:	31 05       	cpc	r19, r1
    1d4a:	81 f0       	breq	.+32     	; 0x1d6c <GPIO_setupPortDirection+0x68>
    1d4c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d4e:	9c 81       	ldd	r25, Y+4	; 0x04
    1d50:	83 30       	cpi	r24, 0x03	; 3
    1d52:	91 05       	cpc	r25, r1
    1d54:	81 f0       	breq	.+32     	; 0x1d76 <GPIO_setupPortDirection+0x72>
    1d56:	13 c0       	rjmp	.+38     	; 0x1d7e <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID: DDRA = direction;
    1d58:	ea e3       	ldi	r30, 0x3A	; 58
    1d5a:	f0 e0       	ldi	r31, 0x00	; 0
    1d5c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d5e:	80 83       	st	Z, r24
    1d60:	0e c0       	rjmp	.+28     	; 0x1d7e <GPIO_setupPortDirection+0x7a>
		break;
		case PORTB_ID: DDRB = direction;
    1d62:	e7 e3       	ldi	r30, 0x37	; 55
    1d64:	f0 e0       	ldi	r31, 0x00	; 0
    1d66:	8a 81       	ldd	r24, Y+2	; 0x02
    1d68:	80 83       	st	Z, r24
    1d6a:	09 c0       	rjmp	.+18     	; 0x1d7e <GPIO_setupPortDirection+0x7a>
		break;
		case PORTC_ID: DDRC = direction;
    1d6c:	e4 e3       	ldi	r30, 0x34	; 52
    1d6e:	f0 e0       	ldi	r31, 0x00	; 0
    1d70:	8a 81       	ldd	r24, Y+2	; 0x02
    1d72:	80 83       	st	Z, r24
    1d74:	04 c0       	rjmp	.+8      	; 0x1d7e <GPIO_setupPortDirection+0x7a>
		break;
		case PORTD_ID: DDRD = direction;
    1d76:	e1 e3       	ldi	r30, 0x31	; 49
    1d78:	f0 e0       	ldi	r31, 0x00	; 0
    1d7a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d7c:	80 83       	st	Z, r24
		break;
		}
	}
}
    1d7e:	0f 90       	pop	r0
    1d80:	0f 90       	pop	r0
    1d82:	0f 90       	pop	r0
    1d84:	0f 90       	pop	r0
    1d86:	cf 91       	pop	r28
    1d88:	df 91       	pop	r29
    1d8a:	08 95       	ret

00001d8c <GPIO_writePort>:
 * Description:
 * if the port is output it will write logic high or logic low
 * if the port is input it will enable the pull up resistor if it write logic high
 */

void GPIO_writePort(uint8 port_num, uint8 value){
    1d8c:	df 93       	push	r29
    1d8e:	cf 93       	push	r28
    1d90:	00 d0       	rcall	.+0      	; 0x1d92 <GPIO_writePort+0x6>
    1d92:	00 d0       	rcall	.+0      	; 0x1d94 <GPIO_writePort+0x8>
    1d94:	cd b7       	in	r28, 0x3d	; 61
    1d96:	de b7       	in	r29, 0x3e	; 62
    1d98:	89 83       	std	Y+1, r24	; 0x01
    1d9a:	6a 83       	std	Y+2, r22	; 0x02
	if(port_num>= NUM_OF_PORTS)
    1d9c:	89 81       	ldd	r24, Y+1	; 0x01
    1d9e:	84 30       	cpi	r24, 0x04	; 4
    1da0:	90 f5       	brcc	.+100    	; 0x1e06 <GPIO_writePort+0x7a>
	{
		/* Do nothing */
	}
	else
	{
		switch(port_num)
    1da2:	89 81       	ldd	r24, Y+1	; 0x01
    1da4:	28 2f       	mov	r18, r24
    1da6:	30 e0       	ldi	r19, 0x00	; 0
    1da8:	3c 83       	std	Y+4, r19	; 0x04
    1daa:	2b 83       	std	Y+3, r18	; 0x03
    1dac:	8b 81       	ldd	r24, Y+3	; 0x03
    1dae:	9c 81       	ldd	r25, Y+4	; 0x04
    1db0:	81 30       	cpi	r24, 0x01	; 1
    1db2:	91 05       	cpc	r25, r1
    1db4:	d1 f0       	breq	.+52     	; 0x1dea <GPIO_writePort+0x5e>
    1db6:	2b 81       	ldd	r18, Y+3	; 0x03
    1db8:	3c 81       	ldd	r19, Y+4	; 0x04
    1dba:	22 30       	cpi	r18, 0x02	; 2
    1dbc:	31 05       	cpc	r19, r1
    1dbe:	2c f4       	brge	.+10     	; 0x1dca <GPIO_writePort+0x3e>
    1dc0:	8b 81       	ldd	r24, Y+3	; 0x03
    1dc2:	9c 81       	ldd	r25, Y+4	; 0x04
    1dc4:	00 97       	sbiw	r24, 0x00	; 0
    1dc6:	61 f0       	breq	.+24     	; 0x1de0 <GPIO_writePort+0x54>
    1dc8:	1e c0       	rjmp	.+60     	; 0x1e06 <GPIO_writePort+0x7a>
    1dca:	2b 81       	ldd	r18, Y+3	; 0x03
    1dcc:	3c 81       	ldd	r19, Y+4	; 0x04
    1dce:	22 30       	cpi	r18, 0x02	; 2
    1dd0:	31 05       	cpc	r19, r1
    1dd2:	81 f0       	breq	.+32     	; 0x1df4 <GPIO_writePort+0x68>
    1dd4:	8b 81       	ldd	r24, Y+3	; 0x03
    1dd6:	9c 81       	ldd	r25, Y+4	; 0x04
    1dd8:	83 30       	cpi	r24, 0x03	; 3
    1dda:	91 05       	cpc	r25, r1
    1ddc:	81 f0       	breq	.+32     	; 0x1dfe <GPIO_writePort+0x72>
    1dde:	13 c0       	rjmp	.+38     	; 0x1e06 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1de0:	eb e3       	ldi	r30, 0x3B	; 59
    1de2:	f0 e0       	ldi	r31, 0x00	; 0
    1de4:	8a 81       	ldd	r24, Y+2	; 0x02
    1de6:	80 83       	st	Z, r24
    1de8:	0e c0       	rjmp	.+28     	; 0x1e06 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1dea:	e8 e3       	ldi	r30, 0x38	; 56
    1dec:	f0 e0       	ldi	r31, 0x00	; 0
    1dee:	8a 81       	ldd	r24, Y+2	; 0x02
    1df0:	80 83       	st	Z, r24
    1df2:	09 c0       	rjmp	.+18     	; 0x1e06 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1df4:	e5 e3       	ldi	r30, 0x35	; 53
    1df6:	f0 e0       	ldi	r31, 0x00	; 0
    1df8:	8a 81       	ldd	r24, Y+2	; 0x02
    1dfa:	80 83       	st	Z, r24
    1dfc:	04 c0       	rjmp	.+8      	; 0x1e06 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1dfe:	e2 e3       	ldi	r30, 0x32	; 50
    1e00:	f0 e0       	ldi	r31, 0x00	; 0
    1e02:	8a 81       	ldd	r24, Y+2	; 0x02
    1e04:	80 83       	st	Z, r24
			break;
		}
	}
}
    1e06:	0f 90       	pop	r0
    1e08:	0f 90       	pop	r0
    1e0a:	0f 90       	pop	r0
    1e0c:	0f 90       	pop	r0
    1e0e:	cf 91       	pop	r28
    1e10:	df 91       	pop	r29
    1e12:	08 95       	ret

00001e14 <GPIO_readPort>:
/*
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num){
    1e14:	df 93       	push	r29
    1e16:	cf 93       	push	r28
    1e18:	00 d0       	rcall	.+0      	; 0x1e1a <GPIO_readPort+0x6>
    1e1a:	00 d0       	rcall	.+0      	; 0x1e1c <GPIO_readPort+0x8>
    1e1c:	cd b7       	in	r28, 0x3d	; 61
    1e1e:	de b7       	in	r29, 0x3e	; 62
    1e20:	8a 83       	std	Y+2, r24	; 0x02

	uint8 value = LOGIC_LOW;
    1e22:	19 82       	std	Y+1, r1	; 0x01
	if(port_num>= NUM_OF_PORTS)
    1e24:	8a 81       	ldd	r24, Y+2	; 0x02
    1e26:	84 30       	cpi	r24, 0x04	; 4
    1e28:	90 f5       	brcc	.+100    	; 0x1e8e <GPIO_readPort+0x7a>
	{
		/* Do nothing */
	}
	else
	{
		switch(port_num)
    1e2a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e2c:	28 2f       	mov	r18, r24
    1e2e:	30 e0       	ldi	r19, 0x00	; 0
    1e30:	3c 83       	std	Y+4, r19	; 0x04
    1e32:	2b 83       	std	Y+3, r18	; 0x03
    1e34:	8b 81       	ldd	r24, Y+3	; 0x03
    1e36:	9c 81       	ldd	r25, Y+4	; 0x04
    1e38:	81 30       	cpi	r24, 0x01	; 1
    1e3a:	91 05       	cpc	r25, r1
    1e3c:	d1 f0       	breq	.+52     	; 0x1e72 <GPIO_readPort+0x5e>
    1e3e:	2b 81       	ldd	r18, Y+3	; 0x03
    1e40:	3c 81       	ldd	r19, Y+4	; 0x04
    1e42:	22 30       	cpi	r18, 0x02	; 2
    1e44:	31 05       	cpc	r19, r1
    1e46:	2c f4       	brge	.+10     	; 0x1e52 <GPIO_readPort+0x3e>
    1e48:	8b 81       	ldd	r24, Y+3	; 0x03
    1e4a:	9c 81       	ldd	r25, Y+4	; 0x04
    1e4c:	00 97       	sbiw	r24, 0x00	; 0
    1e4e:	61 f0       	breq	.+24     	; 0x1e68 <GPIO_readPort+0x54>
    1e50:	1e c0       	rjmp	.+60     	; 0x1e8e <GPIO_readPort+0x7a>
    1e52:	2b 81       	ldd	r18, Y+3	; 0x03
    1e54:	3c 81       	ldd	r19, Y+4	; 0x04
    1e56:	22 30       	cpi	r18, 0x02	; 2
    1e58:	31 05       	cpc	r19, r1
    1e5a:	81 f0       	breq	.+32     	; 0x1e7c <GPIO_readPort+0x68>
    1e5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e5e:	9c 81       	ldd	r25, Y+4	; 0x04
    1e60:	83 30       	cpi	r24, 0x03	; 3
    1e62:	91 05       	cpc	r25, r1
    1e64:	81 f0       	breq	.+32     	; 0x1e86 <GPIO_readPort+0x72>
    1e66:	13 c0       	rjmp	.+38     	; 0x1e8e <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1e68:	e9 e3       	ldi	r30, 0x39	; 57
    1e6a:	f0 e0       	ldi	r31, 0x00	; 0
    1e6c:	80 81       	ld	r24, Z
    1e6e:	89 83       	std	Y+1, r24	; 0x01
    1e70:	0e c0       	rjmp	.+28     	; 0x1e8e <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1e72:	e6 e3       	ldi	r30, 0x36	; 54
    1e74:	f0 e0       	ldi	r31, 0x00	; 0
    1e76:	80 81       	ld	r24, Z
    1e78:	89 83       	std	Y+1, r24	; 0x01
    1e7a:	09 c0       	rjmp	.+18     	; 0x1e8e <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1e7c:	e3 e3       	ldi	r30, 0x33	; 51
    1e7e:	f0 e0       	ldi	r31, 0x00	; 0
    1e80:	80 81       	ld	r24, Z
    1e82:	89 83       	std	Y+1, r24	; 0x01
    1e84:	04 c0       	rjmp	.+8      	; 0x1e8e <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1e86:	e0 e3       	ldi	r30, 0x30	; 48
    1e88:	f0 e0       	ldi	r31, 0x00	; 0
    1e8a:	80 81       	ld	r24, Z
    1e8c:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}
	return value;
    1e8e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e90:	0f 90       	pop	r0
    1e92:	0f 90       	pop	r0
    1e94:	0f 90       	pop	r0
    1e96:	0f 90       	pop	r0
    1e98:	cf 91       	pop	r28
    1e9a:	df 91       	pop	r29
    1e9c:	08 95       	ret

00001e9e <KEYPAD_getPressedKey>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
uint8 KEYPAD_getPressedKey(void)
{
    1e9e:	df 93       	push	r29
    1ea0:	cf 93       	push	r28
    1ea2:	00 d0       	rcall	.+0      	; 0x1ea4 <KEYPAD_getPressedKey+0x6>
    1ea4:	0f 92       	push	r0
    1ea6:	cd b7       	in	r28, 0x3d	; 61
    1ea8:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	uint8 keypad_port_value = 0;
    1eaa:	19 82       	std	Y+1, r1	; 0x01
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    1eac:	1b 82       	std	Y+3, r1	; 0x03
    1eae:	44 c0       	rjmp	.+136    	; 0x1f38 <KEYPAD_getPressedKey+0x9a>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this column will be output pin
			 */
			GPIO_setupPortDirection(KEYPAD_PORT_ID,PORT_INPUT);
    1eb0:	82 e0       	ldi	r24, 0x02	; 2
    1eb2:	60 e0       	ldi	r22, 0x00	; 0
    1eb4:	0e 94 82 0e 	call	0x1d04	; 0x1d04 <GPIO_setupPortDirection>
			GPIO_setupPinDirection(KEYPAD_PORT_ID,KEYPAD_FIRST_COLUMN_PIN_ID+col,PIN_OUTPUT);
    1eb8:	8b 81       	ldd	r24, Y+3	; 0x03
    1eba:	98 2f       	mov	r25, r24
    1ebc:	9c 5f       	subi	r25, 0xFC	; 252
    1ebe:	82 e0       	ldi	r24, 0x02	; 2
    1ec0:	69 2f       	mov	r22, r25
    1ec2:	41 e0       	ldi	r20, 0x01	; 1
    1ec4:	0e 94 df 0b 	call	0x17be	; 0x17be <GPIO_setupPinDirection>
			
#if(KEYPAD_BUTTON_PRESSED == LOGIC_LOW)
			/* Clear the column output pin and set the rest pins value */
			keypad_port_value = ~(1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
    1ec8:	8b 81       	ldd	r24, Y+3	; 0x03
    1eca:	88 2f       	mov	r24, r24
    1ecc:	90 e0       	ldi	r25, 0x00	; 0
    1ece:	9c 01       	movw	r18, r24
    1ed0:	2c 5f       	subi	r18, 0xFC	; 252
    1ed2:	3f 4f       	sbci	r19, 0xFF	; 255
    1ed4:	81 e0       	ldi	r24, 0x01	; 1
    1ed6:	90 e0       	ldi	r25, 0x00	; 0
    1ed8:	02 c0       	rjmp	.+4      	; 0x1ede <KEYPAD_getPressedKey+0x40>
    1eda:	88 0f       	add	r24, r24
    1edc:	99 1f       	adc	r25, r25
    1ede:	2a 95       	dec	r18
    1ee0:	e2 f7       	brpl	.-8      	; 0x1eda <KEYPAD_getPressedKey+0x3c>
    1ee2:	80 95       	com	r24
    1ee4:	89 83       	std	Y+1, r24	; 0x01
#else
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);
    1ee6:	82 e0       	ldi	r24, 0x02	; 2
    1ee8:	69 81       	ldd	r22, Y+1	; 0x01
    1eea:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <GPIO_writePort>

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    1eee:	1a 82       	std	Y+2, r1	; 0x02
    1ef0:	1d c0       	rjmp	.+58     	; 0x1f2c <KEYPAD_getPressedKey+0x8e>
			{
				/* Check if the switch is pressed in this row */
				if(GPIO_readPin(KEYPAD_PORT_ID,row+KEYPAD_FIRST_ROW_PIN_ID) == KEYPAD_BUTTON_PRESSED)
    1ef2:	82 e0       	ldi	r24, 0x02	; 2
    1ef4:	6a 81       	ldd	r22, Y+2	; 0x02
    1ef6:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <GPIO_readPin>
    1efa:	88 23       	and	r24, r24
    1efc:	a1 f4       	brne	.+40     	; 0x1f26 <KEYPAD_getPressedKey+0x88>
				{
					#if (KEYPAD_NUM_COLS == 3)
						return KEYPAD_4x3_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    1efe:	8a 81       	ldd	r24, Y+2	; 0x02
    1f00:	28 2f       	mov	r18, r24
    1f02:	30 e0       	ldi	r19, 0x00	; 0
    1f04:	c9 01       	movw	r24, r18
    1f06:	88 0f       	add	r24, r24
    1f08:	99 1f       	adc	r25, r25
    1f0a:	82 0f       	add	r24, r18
    1f0c:	93 1f       	adc	r25, r19
    1f0e:	98 2f       	mov	r25, r24
    1f10:	8b 81       	ldd	r24, Y+3	; 0x03
    1f12:	89 0f       	add	r24, r25
    1f14:	8f 5f       	subi	r24, 0xFF	; 255
    1f16:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <KEYPAD_4x3_adjustKeyNumber>
					#endif
				}
			}
		}
	}	
}
    1f1a:	0f 90       	pop	r0
    1f1c:	0f 90       	pop	r0
    1f1e:	0f 90       	pop	r0
    1f20:	cf 91       	pop	r28
    1f22:	df 91       	pop	r29
    1f24:	08 95       	ret
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    1f26:	8a 81       	ldd	r24, Y+2	; 0x02
    1f28:	8f 5f       	subi	r24, 0xFF	; 255
    1f2a:	8a 83       	std	Y+2, r24	; 0x02
    1f2c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f2e:	84 30       	cpi	r24, 0x04	; 4
    1f30:	00 f3       	brcs	.-64     	; 0x1ef2 <KEYPAD_getPressedKey+0x54>
{
	uint8 col,row;
	uint8 keypad_port_value = 0;
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    1f32:	8b 81       	ldd	r24, Y+3	; 0x03
    1f34:	8f 5f       	subi	r24, 0xFF	; 255
    1f36:	8b 83       	std	Y+3, r24	; 0x03
    1f38:	8b 81       	ldd	r24, Y+3	; 0x03
    1f3a:	83 30       	cpi	r24, 0x03	; 3
    1f3c:	08 f4       	brcc	.+2      	; 0x1f40 <KEYPAD_getPressedKey+0xa2>
    1f3e:	b8 cf       	rjmp	.-144    	; 0x1eb0 <KEYPAD_getPressedKey+0x12>
    1f40:	b5 cf       	rjmp	.-150    	; 0x1eac <KEYPAD_getPressedKey+0xe>

00001f42 <KEYPAD_4x3_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x3 shape
 */
static uint8 KEYPAD_4x3_adjustKeyNumber(uint8 button_number)
{
    1f42:	df 93       	push	r29
    1f44:	cf 93       	push	r28
    1f46:	00 d0       	rcall	.+0      	; 0x1f48 <KEYPAD_4x3_adjustKeyNumber+0x6>
    1f48:	00 d0       	rcall	.+0      	; 0x1f4a <KEYPAD_4x3_adjustKeyNumber+0x8>
    1f4a:	cd b7       	in	r28, 0x3d	; 61
    1f4c:	de b7       	in	r29, 0x3e	; 62
    1f4e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    1f50:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    1f52:	8a 81       	ldd	r24, Y+2	; 0x02
    1f54:	28 2f       	mov	r18, r24
    1f56:	30 e0       	ldi	r19, 0x00	; 0
    1f58:	3c 83       	std	Y+4, r19	; 0x04
    1f5a:	2b 83       	std	Y+3, r18	; 0x03
    1f5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f5e:	9c 81       	ldd	r25, Y+4	; 0x04
    1f60:	8a 30       	cpi	r24, 0x0A	; 10
    1f62:	91 05       	cpc	r25, r1
    1f64:	81 f0       	breq	.+32     	; 0x1f86 <KEYPAD_4x3_adjustKeyNumber+0x44>
    1f66:	2b 81       	ldd	r18, Y+3	; 0x03
    1f68:	3c 81       	ldd	r19, Y+4	; 0x04
    1f6a:	2a 30       	cpi	r18, 0x0A	; 10
    1f6c:	31 05       	cpc	r19, r1
    1f6e:	a4 f0       	brlt	.+40     	; 0x1f98 <KEYPAD_4x3_adjustKeyNumber+0x56>
    1f70:	8b 81       	ldd	r24, Y+3	; 0x03
    1f72:	9c 81       	ldd	r25, Y+4	; 0x04
    1f74:	8b 30       	cpi	r24, 0x0B	; 11
    1f76:	91 05       	cpc	r25, r1
    1f78:	49 f0       	breq	.+18     	; 0x1f8c <KEYPAD_4x3_adjustKeyNumber+0x4a>
    1f7a:	2b 81       	ldd	r18, Y+3	; 0x03
    1f7c:	3c 81       	ldd	r19, Y+4	; 0x04
    1f7e:	2c 30       	cpi	r18, 0x0C	; 12
    1f80:	31 05       	cpc	r19, r1
    1f82:	39 f0       	breq	.+14     	; 0x1f92 <KEYPAD_4x3_adjustKeyNumber+0x50>
    1f84:	09 c0       	rjmp	.+18     	; 0x1f98 <KEYPAD_4x3_adjustKeyNumber+0x56>
	{
		case 10: keypad_button = '*'; // ASCII Code of *
    1f86:	8a e2       	ldi	r24, 0x2A	; 42
    1f88:	89 83       	std	Y+1, r24	; 0x01
    1f8a:	08 c0       	rjmp	.+16     	; 0x1f9c <KEYPAD_4x3_adjustKeyNumber+0x5a>
				 break;
		case 11: keypad_button = 22;
    1f8c:	86 e1       	ldi	r24, 0x16	; 22
    1f8e:	89 83       	std	Y+1, r24	; 0x01
    1f90:	05 c0       	rjmp	.+10     	; 0x1f9c <KEYPAD_4x3_adjustKeyNumber+0x5a>
				 break;		
		case 12: keypad_button = '#'; // ASCII Code of #
    1f92:	83 e2       	ldi	r24, 0x23	; 35
    1f94:	89 83       	std	Y+1, r24	; 0x01
    1f96:	02 c0       	rjmp	.+4      	; 0x1f9c <KEYPAD_4x3_adjustKeyNumber+0x5a>
				 break;
		default: keypad_button = button_number;
    1f98:	8a 81       	ldd	r24, Y+2	; 0x02
    1f9a:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    1f9c:	89 81       	ldd	r24, Y+1	; 0x01
} 
    1f9e:	0f 90       	pop	r0
    1fa0:	0f 90       	pop	r0
    1fa2:	0f 90       	pop	r0
    1fa4:	0f 90       	pop	r0
    1fa6:	cf 91       	pop	r28
    1fa8:	df 91       	pop	r29
    1faa:	08 95       	ret

00001fac <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    1fac:	df 93       	push	r29
    1fae:	cf 93       	push	r28
    1fb0:	cd b7       	in	r28, 0x3d	; 61
    1fb2:	de b7       	in	r29, 0x3e	; 62
	/* Configure the direction for RS, RW and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    1fb4:	81 e0       	ldi	r24, 0x01	; 1
    1fb6:	65 e0       	ldi	r22, 0x05	; 5
    1fb8:	41 e0       	ldi	r20, 0x01	; 1
    1fba:	0e 94 df 0b 	call	0x17be	; 0x17be <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_RW_PORT_ID,LCD_RW_PIN_ID,PIN_OUTPUT);
    1fbe:	81 e0       	ldi	r24, 0x01	; 1
    1fc0:	66 e0       	ldi	r22, 0x06	; 6
    1fc2:	41 e0       	ldi	r20, 0x01	; 1
    1fc4:	0e 94 df 0b 	call	0x17be	; 0x17be <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    1fc8:	81 e0       	ldi	r24, 0x01	; 1
    1fca:	67 e0       	ldi	r22, 0x07	; 7
    1fcc:	41 e0       	ldi	r20, 0x01	; 1
    1fce:	0e 94 df 0b 	call	0x17be	; 0x17be <GPIO_setupPinDirection>
	LCD_sendCommand(LCD_GO_TO_HOME);
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE); /* use 2-line lcd + 4-bit Data Mode + 5*7 dot display Mode */

#elif (LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    1fd2:	80 e0       	ldi	r24, 0x00	; 0
    1fd4:	6f ef       	ldi	r22, 0xFF	; 255
    1fd6:	0e 94 82 0e 	call	0x1d04	; 0x1d04 <GPIO_setupPortDirection>
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
    1fda:	88 e3       	ldi	r24, 0x38	; 56
    1fdc:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <LCD_sendCommand>
#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    1fe0:	8c e0       	ldi	r24, 0x0C	; 12
    1fe2:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    1fe6:	81 e0       	ldi	r24, 0x01	; 1
    1fe8:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <LCD_sendCommand>
}
    1fec:	cf 91       	pop	r28
    1fee:	df 91       	pop	r29
    1ff0:	08 95       	ret

00001ff2 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    1ff2:	df 93       	push	r29
    1ff4:	cf 93       	push	r28
    1ff6:	cd b7       	in	r28, 0x3d	; 61
    1ff8:	de b7       	in	r29, 0x3e	; 62
    1ffa:	ea 97       	sbiw	r28, 0x3a	; 58
    1ffc:	0f b6       	in	r0, 0x3f	; 63
    1ffe:	f8 94       	cli
    2000:	de bf       	out	0x3e, r29	; 62
    2002:	0f be       	out	0x3f, r0	; 63
    2004:	cd bf       	out	0x3d, r28	; 61
    2006:	8a af       	std	Y+58, r24	; 0x3a
	uint8 lcd_port_value = 0;
    2008:	19 ae       	std	Y+57, r1	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    200a:	81 e0       	ldi	r24, 0x01	; 1
    200c:	65 e0       	ldi	r22, 0x05	; 5
    200e:	40 e0       	ldi	r20, 0x00	; 0
    2010:	0e 94 e3 0c 	call	0x19c6	; 0x19c6 <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    2014:	81 e0       	ldi	r24, 0x01	; 1
    2016:	66 e0       	ldi	r22, 0x06	; 6
    2018:	40 e0       	ldi	r20, 0x00	; 0
    201a:	0e 94 e3 0c 	call	0x19c6	; 0x19c6 <GPIO_writePin>
    201e:	80 e0       	ldi	r24, 0x00	; 0
    2020:	90 e0       	ldi	r25, 0x00	; 0
    2022:	a0 e8       	ldi	r26, 0x80	; 128
    2024:	bf e3       	ldi	r27, 0x3F	; 63
    2026:	8d ab       	std	Y+53, r24	; 0x35
    2028:	9e ab       	std	Y+54, r25	; 0x36
    202a:	af ab       	std	Y+55, r26	; 0x37
    202c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    202e:	6d a9       	ldd	r22, Y+53	; 0x35
    2030:	7e a9       	ldd	r23, Y+54	; 0x36
    2032:	8f a9       	ldd	r24, Y+55	; 0x37
    2034:	98 ad       	ldd	r25, Y+56	; 0x38
    2036:	20 e0       	ldi	r18, 0x00	; 0
    2038:	30 e0       	ldi	r19, 0x00	; 0
    203a:	4a ef       	ldi	r20, 0xFA	; 250
    203c:	54 e4       	ldi	r21, 0x44	; 68
    203e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2042:	dc 01       	movw	r26, r24
    2044:	cb 01       	movw	r24, r22
    2046:	89 ab       	std	Y+49, r24	; 0x31
    2048:	9a ab       	std	Y+50, r25	; 0x32
    204a:	ab ab       	std	Y+51, r26	; 0x33
    204c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    204e:	69 a9       	ldd	r22, Y+49	; 0x31
    2050:	7a a9       	ldd	r23, Y+50	; 0x32
    2052:	8b a9       	ldd	r24, Y+51	; 0x33
    2054:	9c a9       	ldd	r25, Y+52	; 0x34
    2056:	20 e0       	ldi	r18, 0x00	; 0
    2058:	30 e0       	ldi	r19, 0x00	; 0
    205a:	40 e8       	ldi	r20, 0x80	; 128
    205c:	5f e3       	ldi	r21, 0x3F	; 63
    205e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2062:	88 23       	and	r24, r24
    2064:	2c f4       	brge	.+10     	; 0x2070 <LCD_sendCommand+0x7e>
		__ticks = 1;
    2066:	81 e0       	ldi	r24, 0x01	; 1
    2068:	90 e0       	ldi	r25, 0x00	; 0
    206a:	98 ab       	std	Y+48, r25	; 0x30
    206c:	8f a7       	std	Y+47, r24	; 0x2f
    206e:	3f c0       	rjmp	.+126    	; 0x20ee <LCD_sendCommand+0xfc>
	else if (__tmp > 65535)
    2070:	69 a9       	ldd	r22, Y+49	; 0x31
    2072:	7a a9       	ldd	r23, Y+50	; 0x32
    2074:	8b a9       	ldd	r24, Y+51	; 0x33
    2076:	9c a9       	ldd	r25, Y+52	; 0x34
    2078:	20 e0       	ldi	r18, 0x00	; 0
    207a:	3f ef       	ldi	r19, 0xFF	; 255
    207c:	4f e7       	ldi	r20, 0x7F	; 127
    207e:	57 e4       	ldi	r21, 0x47	; 71
    2080:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2084:	18 16       	cp	r1, r24
    2086:	4c f5       	brge	.+82     	; 0x20da <LCD_sendCommand+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2088:	6d a9       	ldd	r22, Y+53	; 0x35
    208a:	7e a9       	ldd	r23, Y+54	; 0x36
    208c:	8f a9       	ldd	r24, Y+55	; 0x37
    208e:	98 ad       	ldd	r25, Y+56	; 0x38
    2090:	20 e0       	ldi	r18, 0x00	; 0
    2092:	30 e0       	ldi	r19, 0x00	; 0
    2094:	40 e2       	ldi	r20, 0x20	; 32
    2096:	51 e4       	ldi	r21, 0x41	; 65
    2098:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    209c:	dc 01       	movw	r26, r24
    209e:	cb 01       	movw	r24, r22
    20a0:	bc 01       	movw	r22, r24
    20a2:	cd 01       	movw	r24, r26
    20a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20a8:	dc 01       	movw	r26, r24
    20aa:	cb 01       	movw	r24, r22
    20ac:	98 ab       	std	Y+48, r25	; 0x30
    20ae:	8f a7       	std	Y+47, r24	; 0x2f
    20b0:	0f c0       	rjmp	.+30     	; 0x20d0 <LCD_sendCommand+0xde>
    20b2:	88 ec       	ldi	r24, 0xC8	; 200
    20b4:	90 e0       	ldi	r25, 0x00	; 0
    20b6:	9e a7       	std	Y+46, r25	; 0x2e
    20b8:	8d a7       	std	Y+45, r24	; 0x2d
    20ba:	8d a5       	ldd	r24, Y+45	; 0x2d
    20bc:	9e a5       	ldd	r25, Y+46	; 0x2e
    20be:	01 97       	sbiw	r24, 0x01	; 1
    20c0:	f1 f7       	brne	.-4      	; 0x20be <LCD_sendCommand+0xcc>
    20c2:	9e a7       	std	Y+46, r25	; 0x2e
    20c4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20c6:	8f a5       	ldd	r24, Y+47	; 0x2f
    20c8:	98 a9       	ldd	r25, Y+48	; 0x30
    20ca:	01 97       	sbiw	r24, 0x01	; 1
    20cc:	98 ab       	std	Y+48, r25	; 0x30
    20ce:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20d0:	8f a5       	ldd	r24, Y+47	; 0x2f
    20d2:	98 a9       	ldd	r25, Y+48	; 0x30
    20d4:	00 97       	sbiw	r24, 0x00	; 0
    20d6:	69 f7       	brne	.-38     	; 0x20b2 <LCD_sendCommand+0xc0>
    20d8:	14 c0       	rjmp	.+40     	; 0x2102 <LCD_sendCommand+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20da:	69 a9       	ldd	r22, Y+49	; 0x31
    20dc:	7a a9       	ldd	r23, Y+50	; 0x32
    20de:	8b a9       	ldd	r24, Y+51	; 0x33
    20e0:	9c a9       	ldd	r25, Y+52	; 0x34
    20e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20e6:	dc 01       	movw	r26, r24
    20e8:	cb 01       	movw	r24, r22
    20ea:	98 ab       	std	Y+48, r25	; 0x30
    20ec:	8f a7       	std	Y+47, r24	; 0x2f
    20ee:	8f a5       	ldd	r24, Y+47	; 0x2f
    20f0:	98 a9       	ldd	r25, Y+48	; 0x30
    20f2:	9c a7       	std	Y+44, r25	; 0x2c
    20f4:	8b a7       	std	Y+43, r24	; 0x2b
    20f6:	8b a5       	ldd	r24, Y+43	; 0x2b
    20f8:	9c a5       	ldd	r25, Y+44	; 0x2c
    20fa:	01 97       	sbiw	r24, 0x01	; 1
    20fc:	f1 f7       	brne	.-4      	; 0x20fa <LCD_sendCommand+0x108>
    20fe:	9c a7       	std	Y+44, r25	; 0x2c
    2100:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2102:	81 e0       	ldi	r24, 0x01	; 1
    2104:	67 e0       	ldi	r22, 0x07	; 7
    2106:	41 e0       	ldi	r20, 0x01	; 1
    2108:	0e 94 e3 0c 	call	0x19c6	; 0x19c6 <GPIO_writePin>
    210c:	80 e0       	ldi	r24, 0x00	; 0
    210e:	90 e0       	ldi	r25, 0x00	; 0
    2110:	a0 e8       	ldi	r26, 0x80	; 128
    2112:	bf e3       	ldi	r27, 0x3F	; 63
    2114:	8f a3       	std	Y+39, r24	; 0x27
    2116:	98 a7       	std	Y+40, r25	; 0x28
    2118:	a9 a7       	std	Y+41, r26	; 0x29
    211a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    211c:	6f a1       	ldd	r22, Y+39	; 0x27
    211e:	78 a5       	ldd	r23, Y+40	; 0x28
    2120:	89 a5       	ldd	r24, Y+41	; 0x29
    2122:	9a a5       	ldd	r25, Y+42	; 0x2a
    2124:	20 e0       	ldi	r18, 0x00	; 0
    2126:	30 e0       	ldi	r19, 0x00	; 0
    2128:	4a ef       	ldi	r20, 0xFA	; 250
    212a:	54 e4       	ldi	r21, 0x44	; 68
    212c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2130:	dc 01       	movw	r26, r24
    2132:	cb 01       	movw	r24, r22
    2134:	8b a3       	std	Y+35, r24	; 0x23
    2136:	9c a3       	std	Y+36, r25	; 0x24
    2138:	ad a3       	std	Y+37, r26	; 0x25
    213a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    213c:	6b a1       	ldd	r22, Y+35	; 0x23
    213e:	7c a1       	ldd	r23, Y+36	; 0x24
    2140:	8d a1       	ldd	r24, Y+37	; 0x25
    2142:	9e a1       	ldd	r25, Y+38	; 0x26
    2144:	20 e0       	ldi	r18, 0x00	; 0
    2146:	30 e0       	ldi	r19, 0x00	; 0
    2148:	40 e8       	ldi	r20, 0x80	; 128
    214a:	5f e3       	ldi	r21, 0x3F	; 63
    214c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2150:	88 23       	and	r24, r24
    2152:	2c f4       	brge	.+10     	; 0x215e <LCD_sendCommand+0x16c>
		__ticks = 1;
    2154:	81 e0       	ldi	r24, 0x01	; 1
    2156:	90 e0       	ldi	r25, 0x00	; 0
    2158:	9a a3       	std	Y+34, r25	; 0x22
    215a:	89 a3       	std	Y+33, r24	; 0x21
    215c:	3f c0       	rjmp	.+126    	; 0x21dc <LCD_sendCommand+0x1ea>
	else if (__tmp > 65535)
    215e:	6b a1       	ldd	r22, Y+35	; 0x23
    2160:	7c a1       	ldd	r23, Y+36	; 0x24
    2162:	8d a1       	ldd	r24, Y+37	; 0x25
    2164:	9e a1       	ldd	r25, Y+38	; 0x26
    2166:	20 e0       	ldi	r18, 0x00	; 0
    2168:	3f ef       	ldi	r19, 0xFF	; 255
    216a:	4f e7       	ldi	r20, 0x7F	; 127
    216c:	57 e4       	ldi	r21, 0x47	; 71
    216e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2172:	18 16       	cp	r1, r24
    2174:	4c f5       	brge	.+82     	; 0x21c8 <LCD_sendCommand+0x1d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2176:	6f a1       	ldd	r22, Y+39	; 0x27
    2178:	78 a5       	ldd	r23, Y+40	; 0x28
    217a:	89 a5       	ldd	r24, Y+41	; 0x29
    217c:	9a a5       	ldd	r25, Y+42	; 0x2a
    217e:	20 e0       	ldi	r18, 0x00	; 0
    2180:	30 e0       	ldi	r19, 0x00	; 0
    2182:	40 e2       	ldi	r20, 0x20	; 32
    2184:	51 e4       	ldi	r21, 0x41	; 65
    2186:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    218a:	dc 01       	movw	r26, r24
    218c:	cb 01       	movw	r24, r22
    218e:	bc 01       	movw	r22, r24
    2190:	cd 01       	movw	r24, r26
    2192:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2196:	dc 01       	movw	r26, r24
    2198:	cb 01       	movw	r24, r22
    219a:	9a a3       	std	Y+34, r25	; 0x22
    219c:	89 a3       	std	Y+33, r24	; 0x21
    219e:	0f c0       	rjmp	.+30     	; 0x21be <LCD_sendCommand+0x1cc>
    21a0:	88 ec       	ldi	r24, 0xC8	; 200
    21a2:	90 e0       	ldi	r25, 0x00	; 0
    21a4:	98 a3       	std	Y+32, r25	; 0x20
    21a6:	8f 8f       	std	Y+31, r24	; 0x1f
    21a8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    21aa:	98 a1       	ldd	r25, Y+32	; 0x20
    21ac:	01 97       	sbiw	r24, 0x01	; 1
    21ae:	f1 f7       	brne	.-4      	; 0x21ac <LCD_sendCommand+0x1ba>
    21b0:	98 a3       	std	Y+32, r25	; 0x20
    21b2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21b4:	89 a1       	ldd	r24, Y+33	; 0x21
    21b6:	9a a1       	ldd	r25, Y+34	; 0x22
    21b8:	01 97       	sbiw	r24, 0x01	; 1
    21ba:	9a a3       	std	Y+34, r25	; 0x22
    21bc:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21be:	89 a1       	ldd	r24, Y+33	; 0x21
    21c0:	9a a1       	ldd	r25, Y+34	; 0x22
    21c2:	00 97       	sbiw	r24, 0x00	; 0
    21c4:	69 f7       	brne	.-38     	; 0x21a0 <LCD_sendCommand+0x1ae>
    21c6:	14 c0       	rjmp	.+40     	; 0x21f0 <LCD_sendCommand+0x1fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21c8:	6b a1       	ldd	r22, Y+35	; 0x23
    21ca:	7c a1       	ldd	r23, Y+36	; 0x24
    21cc:	8d a1       	ldd	r24, Y+37	; 0x25
    21ce:	9e a1       	ldd	r25, Y+38	; 0x26
    21d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21d4:	dc 01       	movw	r26, r24
    21d6:	cb 01       	movw	r24, r22
    21d8:	9a a3       	std	Y+34, r25	; 0x22
    21da:	89 a3       	std	Y+33, r24	; 0x21
    21dc:	89 a1       	ldd	r24, Y+33	; 0x21
    21de:	9a a1       	ldd	r25, Y+34	; 0x22
    21e0:	9e 8f       	std	Y+30, r25	; 0x1e
    21e2:	8d 8f       	std	Y+29, r24	; 0x1d
    21e4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    21e6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    21e8:	01 97       	sbiw	r24, 0x01	; 1
    21ea:	f1 f7       	brne	.-4      	; 0x21e8 <LCD_sendCommand+0x1f6>
    21ec:	9e 8f       	std	Y+30, r25	; 0x1e
    21ee:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif (LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    21f0:	80 e0       	ldi	r24, 0x00	; 0
    21f2:	6a ad       	ldd	r22, Y+58	; 0x3a
    21f4:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <GPIO_writePort>
    21f8:	80 e0       	ldi	r24, 0x00	; 0
    21fa:	90 e0       	ldi	r25, 0x00	; 0
    21fc:	a0 e8       	ldi	r26, 0x80	; 128
    21fe:	bf e3       	ldi	r27, 0x3F	; 63
    2200:	89 8f       	std	Y+25, r24	; 0x19
    2202:	9a 8f       	std	Y+26, r25	; 0x1a
    2204:	ab 8f       	std	Y+27, r26	; 0x1b
    2206:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2208:	69 8d       	ldd	r22, Y+25	; 0x19
    220a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    220c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    220e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2210:	20 e0       	ldi	r18, 0x00	; 0
    2212:	30 e0       	ldi	r19, 0x00	; 0
    2214:	4a ef       	ldi	r20, 0xFA	; 250
    2216:	54 e4       	ldi	r21, 0x44	; 68
    2218:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    221c:	dc 01       	movw	r26, r24
    221e:	cb 01       	movw	r24, r22
    2220:	8d 8b       	std	Y+21, r24	; 0x15
    2222:	9e 8b       	std	Y+22, r25	; 0x16
    2224:	af 8b       	std	Y+23, r26	; 0x17
    2226:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2228:	6d 89       	ldd	r22, Y+21	; 0x15
    222a:	7e 89       	ldd	r23, Y+22	; 0x16
    222c:	8f 89       	ldd	r24, Y+23	; 0x17
    222e:	98 8d       	ldd	r25, Y+24	; 0x18
    2230:	20 e0       	ldi	r18, 0x00	; 0
    2232:	30 e0       	ldi	r19, 0x00	; 0
    2234:	40 e8       	ldi	r20, 0x80	; 128
    2236:	5f e3       	ldi	r21, 0x3F	; 63
    2238:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    223c:	88 23       	and	r24, r24
    223e:	2c f4       	brge	.+10     	; 0x224a <LCD_sendCommand+0x258>
		__ticks = 1;
    2240:	81 e0       	ldi	r24, 0x01	; 1
    2242:	90 e0       	ldi	r25, 0x00	; 0
    2244:	9c 8b       	std	Y+20, r25	; 0x14
    2246:	8b 8b       	std	Y+19, r24	; 0x13
    2248:	3f c0       	rjmp	.+126    	; 0x22c8 <LCD_sendCommand+0x2d6>
	else if (__tmp > 65535)
    224a:	6d 89       	ldd	r22, Y+21	; 0x15
    224c:	7e 89       	ldd	r23, Y+22	; 0x16
    224e:	8f 89       	ldd	r24, Y+23	; 0x17
    2250:	98 8d       	ldd	r25, Y+24	; 0x18
    2252:	20 e0       	ldi	r18, 0x00	; 0
    2254:	3f ef       	ldi	r19, 0xFF	; 255
    2256:	4f e7       	ldi	r20, 0x7F	; 127
    2258:	57 e4       	ldi	r21, 0x47	; 71
    225a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    225e:	18 16       	cp	r1, r24
    2260:	4c f5       	brge	.+82     	; 0x22b4 <LCD_sendCommand+0x2c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2262:	69 8d       	ldd	r22, Y+25	; 0x19
    2264:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2266:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2268:	9c 8d       	ldd	r25, Y+28	; 0x1c
    226a:	20 e0       	ldi	r18, 0x00	; 0
    226c:	30 e0       	ldi	r19, 0x00	; 0
    226e:	40 e2       	ldi	r20, 0x20	; 32
    2270:	51 e4       	ldi	r21, 0x41	; 65
    2272:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2276:	dc 01       	movw	r26, r24
    2278:	cb 01       	movw	r24, r22
    227a:	bc 01       	movw	r22, r24
    227c:	cd 01       	movw	r24, r26
    227e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2282:	dc 01       	movw	r26, r24
    2284:	cb 01       	movw	r24, r22
    2286:	9c 8b       	std	Y+20, r25	; 0x14
    2288:	8b 8b       	std	Y+19, r24	; 0x13
    228a:	0f c0       	rjmp	.+30     	; 0x22aa <LCD_sendCommand+0x2b8>
    228c:	88 ec       	ldi	r24, 0xC8	; 200
    228e:	90 e0       	ldi	r25, 0x00	; 0
    2290:	9a 8b       	std	Y+18, r25	; 0x12
    2292:	89 8b       	std	Y+17, r24	; 0x11
    2294:	89 89       	ldd	r24, Y+17	; 0x11
    2296:	9a 89       	ldd	r25, Y+18	; 0x12
    2298:	01 97       	sbiw	r24, 0x01	; 1
    229a:	f1 f7       	brne	.-4      	; 0x2298 <LCD_sendCommand+0x2a6>
    229c:	9a 8b       	std	Y+18, r25	; 0x12
    229e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22a0:	8b 89       	ldd	r24, Y+19	; 0x13
    22a2:	9c 89       	ldd	r25, Y+20	; 0x14
    22a4:	01 97       	sbiw	r24, 0x01	; 1
    22a6:	9c 8b       	std	Y+20, r25	; 0x14
    22a8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22aa:	8b 89       	ldd	r24, Y+19	; 0x13
    22ac:	9c 89       	ldd	r25, Y+20	; 0x14
    22ae:	00 97       	sbiw	r24, 0x00	; 0
    22b0:	69 f7       	brne	.-38     	; 0x228c <LCD_sendCommand+0x29a>
    22b2:	14 c0       	rjmp	.+40     	; 0x22dc <LCD_sendCommand+0x2ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22b4:	6d 89       	ldd	r22, Y+21	; 0x15
    22b6:	7e 89       	ldd	r23, Y+22	; 0x16
    22b8:	8f 89       	ldd	r24, Y+23	; 0x17
    22ba:	98 8d       	ldd	r25, Y+24	; 0x18
    22bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22c0:	dc 01       	movw	r26, r24
    22c2:	cb 01       	movw	r24, r22
    22c4:	9c 8b       	std	Y+20, r25	; 0x14
    22c6:	8b 8b       	std	Y+19, r24	; 0x13
    22c8:	8b 89       	ldd	r24, Y+19	; 0x13
    22ca:	9c 89       	ldd	r25, Y+20	; 0x14
    22cc:	98 8b       	std	Y+16, r25	; 0x10
    22ce:	8f 87       	std	Y+15, r24	; 0x0f
    22d0:	8f 85       	ldd	r24, Y+15	; 0x0f
    22d2:	98 89       	ldd	r25, Y+16	; 0x10
    22d4:	01 97       	sbiw	r24, 0x01	; 1
    22d6:	f1 f7       	brne	.-4      	; 0x22d4 <LCD_sendCommand+0x2e2>
    22d8:	98 8b       	std	Y+16, r25	; 0x10
    22da:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    22dc:	81 e0       	ldi	r24, 0x01	; 1
    22de:	67 e0       	ldi	r22, 0x07	; 7
    22e0:	40 e0       	ldi	r20, 0x00	; 0
    22e2:	0e 94 e3 0c 	call	0x19c6	; 0x19c6 <GPIO_writePin>
    22e6:	80 e0       	ldi	r24, 0x00	; 0
    22e8:	90 e0       	ldi	r25, 0x00	; 0
    22ea:	a0 e8       	ldi	r26, 0x80	; 128
    22ec:	bf e3       	ldi	r27, 0x3F	; 63
    22ee:	8b 87       	std	Y+11, r24	; 0x0b
    22f0:	9c 87       	std	Y+12, r25	; 0x0c
    22f2:	ad 87       	std	Y+13, r26	; 0x0d
    22f4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22f6:	6b 85       	ldd	r22, Y+11	; 0x0b
    22f8:	7c 85       	ldd	r23, Y+12	; 0x0c
    22fa:	8d 85       	ldd	r24, Y+13	; 0x0d
    22fc:	9e 85       	ldd	r25, Y+14	; 0x0e
    22fe:	20 e0       	ldi	r18, 0x00	; 0
    2300:	30 e0       	ldi	r19, 0x00	; 0
    2302:	4a ef       	ldi	r20, 0xFA	; 250
    2304:	54 e4       	ldi	r21, 0x44	; 68
    2306:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    230a:	dc 01       	movw	r26, r24
    230c:	cb 01       	movw	r24, r22
    230e:	8f 83       	std	Y+7, r24	; 0x07
    2310:	98 87       	std	Y+8, r25	; 0x08
    2312:	a9 87       	std	Y+9, r26	; 0x09
    2314:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2316:	6f 81       	ldd	r22, Y+7	; 0x07
    2318:	78 85       	ldd	r23, Y+8	; 0x08
    231a:	89 85       	ldd	r24, Y+9	; 0x09
    231c:	9a 85       	ldd	r25, Y+10	; 0x0a
    231e:	20 e0       	ldi	r18, 0x00	; 0
    2320:	30 e0       	ldi	r19, 0x00	; 0
    2322:	40 e8       	ldi	r20, 0x80	; 128
    2324:	5f e3       	ldi	r21, 0x3F	; 63
    2326:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    232a:	88 23       	and	r24, r24
    232c:	2c f4       	brge	.+10     	; 0x2338 <LCD_sendCommand+0x346>
		__ticks = 1;
    232e:	81 e0       	ldi	r24, 0x01	; 1
    2330:	90 e0       	ldi	r25, 0x00	; 0
    2332:	9e 83       	std	Y+6, r25	; 0x06
    2334:	8d 83       	std	Y+5, r24	; 0x05
    2336:	3f c0       	rjmp	.+126    	; 0x23b6 <LCD_sendCommand+0x3c4>
	else if (__tmp > 65535)
    2338:	6f 81       	ldd	r22, Y+7	; 0x07
    233a:	78 85       	ldd	r23, Y+8	; 0x08
    233c:	89 85       	ldd	r24, Y+9	; 0x09
    233e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2340:	20 e0       	ldi	r18, 0x00	; 0
    2342:	3f ef       	ldi	r19, 0xFF	; 255
    2344:	4f e7       	ldi	r20, 0x7F	; 127
    2346:	57 e4       	ldi	r21, 0x47	; 71
    2348:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    234c:	18 16       	cp	r1, r24
    234e:	4c f5       	brge	.+82     	; 0x23a2 <LCD_sendCommand+0x3b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2350:	6b 85       	ldd	r22, Y+11	; 0x0b
    2352:	7c 85       	ldd	r23, Y+12	; 0x0c
    2354:	8d 85       	ldd	r24, Y+13	; 0x0d
    2356:	9e 85       	ldd	r25, Y+14	; 0x0e
    2358:	20 e0       	ldi	r18, 0x00	; 0
    235a:	30 e0       	ldi	r19, 0x00	; 0
    235c:	40 e2       	ldi	r20, 0x20	; 32
    235e:	51 e4       	ldi	r21, 0x41	; 65
    2360:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2364:	dc 01       	movw	r26, r24
    2366:	cb 01       	movw	r24, r22
    2368:	bc 01       	movw	r22, r24
    236a:	cd 01       	movw	r24, r26
    236c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2370:	dc 01       	movw	r26, r24
    2372:	cb 01       	movw	r24, r22
    2374:	9e 83       	std	Y+6, r25	; 0x06
    2376:	8d 83       	std	Y+5, r24	; 0x05
    2378:	0f c0       	rjmp	.+30     	; 0x2398 <LCD_sendCommand+0x3a6>
    237a:	88 ec       	ldi	r24, 0xC8	; 200
    237c:	90 e0       	ldi	r25, 0x00	; 0
    237e:	9c 83       	std	Y+4, r25	; 0x04
    2380:	8b 83       	std	Y+3, r24	; 0x03
    2382:	8b 81       	ldd	r24, Y+3	; 0x03
    2384:	9c 81       	ldd	r25, Y+4	; 0x04
    2386:	01 97       	sbiw	r24, 0x01	; 1
    2388:	f1 f7       	brne	.-4      	; 0x2386 <LCD_sendCommand+0x394>
    238a:	9c 83       	std	Y+4, r25	; 0x04
    238c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    238e:	8d 81       	ldd	r24, Y+5	; 0x05
    2390:	9e 81       	ldd	r25, Y+6	; 0x06
    2392:	01 97       	sbiw	r24, 0x01	; 1
    2394:	9e 83       	std	Y+6, r25	; 0x06
    2396:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2398:	8d 81       	ldd	r24, Y+5	; 0x05
    239a:	9e 81       	ldd	r25, Y+6	; 0x06
    239c:	00 97       	sbiw	r24, 0x00	; 0
    239e:	69 f7       	brne	.-38     	; 0x237a <LCD_sendCommand+0x388>
    23a0:	14 c0       	rjmp	.+40     	; 0x23ca <LCD_sendCommand+0x3d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23a2:	6f 81       	ldd	r22, Y+7	; 0x07
    23a4:	78 85       	ldd	r23, Y+8	; 0x08
    23a6:	89 85       	ldd	r24, Y+9	; 0x09
    23a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    23aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23ae:	dc 01       	movw	r26, r24
    23b0:	cb 01       	movw	r24, r22
    23b2:	9e 83       	std	Y+6, r25	; 0x06
    23b4:	8d 83       	std	Y+5, r24	; 0x05
    23b6:	8d 81       	ldd	r24, Y+5	; 0x05
    23b8:	9e 81       	ldd	r25, Y+6	; 0x06
    23ba:	9a 83       	std	Y+2, r25	; 0x02
    23bc:	89 83       	std	Y+1, r24	; 0x01
    23be:	89 81       	ldd	r24, Y+1	; 0x01
    23c0:	9a 81       	ldd	r25, Y+2	; 0x02
    23c2:	01 97       	sbiw	r24, 0x01	; 1
    23c4:	f1 f7       	brne	.-4      	; 0x23c2 <LCD_sendCommand+0x3d0>
    23c6:	9a 83       	std	Y+2, r25	; 0x02
    23c8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    23ca:	ea 96       	adiw	r28, 0x3a	; 58
    23cc:	0f b6       	in	r0, 0x3f	; 63
    23ce:	f8 94       	cli
    23d0:	de bf       	out	0x3e, r29	; 62
    23d2:	0f be       	out	0x3f, r0	; 63
    23d4:	cd bf       	out	0x3d, r28	; 61
    23d6:	cf 91       	pop	r28
    23d8:	df 91       	pop	r29
    23da:	08 95       	ret

000023dc <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    23dc:	df 93       	push	r29
    23de:	cf 93       	push	r28
    23e0:	cd b7       	in	r28, 0x3d	; 61
    23e2:	de b7       	in	r29, 0x3e	; 62
    23e4:	ea 97       	sbiw	r28, 0x3a	; 58
    23e6:	0f b6       	in	r0, 0x3f	; 63
    23e8:	f8 94       	cli
    23ea:	de bf       	out	0x3e, r29	; 62
    23ec:	0f be       	out	0x3f, r0	; 63
    23ee:	cd bf       	out	0x3d, r28	; 61
    23f0:	8a af       	std	Y+58, r24	; 0x3a
	uint8 lcd_port_value = 0;
    23f2:	19 ae       	std	Y+57, r1	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    23f4:	81 e0       	ldi	r24, 0x01	; 1
    23f6:	65 e0       	ldi	r22, 0x05	; 5
    23f8:	41 e0       	ldi	r20, 0x01	; 1
    23fa:	0e 94 e3 0c 	call	0x19c6	; 0x19c6 <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    23fe:	81 e0       	ldi	r24, 0x01	; 1
    2400:	66 e0       	ldi	r22, 0x06	; 6
    2402:	40 e0       	ldi	r20, 0x00	; 0
    2404:	0e 94 e3 0c 	call	0x19c6	; 0x19c6 <GPIO_writePin>
    2408:	80 e0       	ldi	r24, 0x00	; 0
    240a:	90 e0       	ldi	r25, 0x00	; 0
    240c:	a0 e8       	ldi	r26, 0x80	; 128
    240e:	bf e3       	ldi	r27, 0x3F	; 63
    2410:	8d ab       	std	Y+53, r24	; 0x35
    2412:	9e ab       	std	Y+54, r25	; 0x36
    2414:	af ab       	std	Y+55, r26	; 0x37
    2416:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2418:	6d a9       	ldd	r22, Y+53	; 0x35
    241a:	7e a9       	ldd	r23, Y+54	; 0x36
    241c:	8f a9       	ldd	r24, Y+55	; 0x37
    241e:	98 ad       	ldd	r25, Y+56	; 0x38
    2420:	20 e0       	ldi	r18, 0x00	; 0
    2422:	30 e0       	ldi	r19, 0x00	; 0
    2424:	4a ef       	ldi	r20, 0xFA	; 250
    2426:	54 e4       	ldi	r21, 0x44	; 68
    2428:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    242c:	dc 01       	movw	r26, r24
    242e:	cb 01       	movw	r24, r22
    2430:	89 ab       	std	Y+49, r24	; 0x31
    2432:	9a ab       	std	Y+50, r25	; 0x32
    2434:	ab ab       	std	Y+51, r26	; 0x33
    2436:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2438:	69 a9       	ldd	r22, Y+49	; 0x31
    243a:	7a a9       	ldd	r23, Y+50	; 0x32
    243c:	8b a9       	ldd	r24, Y+51	; 0x33
    243e:	9c a9       	ldd	r25, Y+52	; 0x34
    2440:	20 e0       	ldi	r18, 0x00	; 0
    2442:	30 e0       	ldi	r19, 0x00	; 0
    2444:	40 e8       	ldi	r20, 0x80	; 128
    2446:	5f e3       	ldi	r21, 0x3F	; 63
    2448:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    244c:	88 23       	and	r24, r24
    244e:	2c f4       	brge	.+10     	; 0x245a <LCD_displayCharacter+0x7e>
		__ticks = 1;
    2450:	81 e0       	ldi	r24, 0x01	; 1
    2452:	90 e0       	ldi	r25, 0x00	; 0
    2454:	98 ab       	std	Y+48, r25	; 0x30
    2456:	8f a7       	std	Y+47, r24	; 0x2f
    2458:	3f c0       	rjmp	.+126    	; 0x24d8 <LCD_displayCharacter+0xfc>
	else if (__tmp > 65535)
    245a:	69 a9       	ldd	r22, Y+49	; 0x31
    245c:	7a a9       	ldd	r23, Y+50	; 0x32
    245e:	8b a9       	ldd	r24, Y+51	; 0x33
    2460:	9c a9       	ldd	r25, Y+52	; 0x34
    2462:	20 e0       	ldi	r18, 0x00	; 0
    2464:	3f ef       	ldi	r19, 0xFF	; 255
    2466:	4f e7       	ldi	r20, 0x7F	; 127
    2468:	57 e4       	ldi	r21, 0x47	; 71
    246a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    246e:	18 16       	cp	r1, r24
    2470:	4c f5       	brge	.+82     	; 0x24c4 <LCD_displayCharacter+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2472:	6d a9       	ldd	r22, Y+53	; 0x35
    2474:	7e a9       	ldd	r23, Y+54	; 0x36
    2476:	8f a9       	ldd	r24, Y+55	; 0x37
    2478:	98 ad       	ldd	r25, Y+56	; 0x38
    247a:	20 e0       	ldi	r18, 0x00	; 0
    247c:	30 e0       	ldi	r19, 0x00	; 0
    247e:	40 e2       	ldi	r20, 0x20	; 32
    2480:	51 e4       	ldi	r21, 0x41	; 65
    2482:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2486:	dc 01       	movw	r26, r24
    2488:	cb 01       	movw	r24, r22
    248a:	bc 01       	movw	r22, r24
    248c:	cd 01       	movw	r24, r26
    248e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2492:	dc 01       	movw	r26, r24
    2494:	cb 01       	movw	r24, r22
    2496:	98 ab       	std	Y+48, r25	; 0x30
    2498:	8f a7       	std	Y+47, r24	; 0x2f
    249a:	0f c0       	rjmp	.+30     	; 0x24ba <LCD_displayCharacter+0xde>
    249c:	88 ec       	ldi	r24, 0xC8	; 200
    249e:	90 e0       	ldi	r25, 0x00	; 0
    24a0:	9e a7       	std	Y+46, r25	; 0x2e
    24a2:	8d a7       	std	Y+45, r24	; 0x2d
    24a4:	8d a5       	ldd	r24, Y+45	; 0x2d
    24a6:	9e a5       	ldd	r25, Y+46	; 0x2e
    24a8:	01 97       	sbiw	r24, 0x01	; 1
    24aa:	f1 f7       	brne	.-4      	; 0x24a8 <LCD_displayCharacter+0xcc>
    24ac:	9e a7       	std	Y+46, r25	; 0x2e
    24ae:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24b0:	8f a5       	ldd	r24, Y+47	; 0x2f
    24b2:	98 a9       	ldd	r25, Y+48	; 0x30
    24b4:	01 97       	sbiw	r24, 0x01	; 1
    24b6:	98 ab       	std	Y+48, r25	; 0x30
    24b8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24ba:	8f a5       	ldd	r24, Y+47	; 0x2f
    24bc:	98 a9       	ldd	r25, Y+48	; 0x30
    24be:	00 97       	sbiw	r24, 0x00	; 0
    24c0:	69 f7       	brne	.-38     	; 0x249c <LCD_displayCharacter+0xc0>
    24c2:	14 c0       	rjmp	.+40     	; 0x24ec <LCD_displayCharacter+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24c4:	69 a9       	ldd	r22, Y+49	; 0x31
    24c6:	7a a9       	ldd	r23, Y+50	; 0x32
    24c8:	8b a9       	ldd	r24, Y+51	; 0x33
    24ca:	9c a9       	ldd	r25, Y+52	; 0x34
    24cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24d0:	dc 01       	movw	r26, r24
    24d2:	cb 01       	movw	r24, r22
    24d4:	98 ab       	std	Y+48, r25	; 0x30
    24d6:	8f a7       	std	Y+47, r24	; 0x2f
    24d8:	8f a5       	ldd	r24, Y+47	; 0x2f
    24da:	98 a9       	ldd	r25, Y+48	; 0x30
    24dc:	9c a7       	std	Y+44, r25	; 0x2c
    24de:	8b a7       	std	Y+43, r24	; 0x2b
    24e0:	8b a5       	ldd	r24, Y+43	; 0x2b
    24e2:	9c a5       	ldd	r25, Y+44	; 0x2c
    24e4:	01 97       	sbiw	r24, 0x01	; 1
    24e6:	f1 f7       	brne	.-4      	; 0x24e4 <LCD_displayCharacter+0x108>
    24e8:	9c a7       	std	Y+44, r25	; 0x2c
    24ea:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    24ec:	81 e0       	ldi	r24, 0x01	; 1
    24ee:	67 e0       	ldi	r22, 0x07	; 7
    24f0:	41 e0       	ldi	r20, 0x01	; 1
    24f2:	0e 94 e3 0c 	call	0x19c6	; 0x19c6 <GPIO_writePin>
    24f6:	80 e0       	ldi	r24, 0x00	; 0
    24f8:	90 e0       	ldi	r25, 0x00	; 0
    24fa:	a0 e8       	ldi	r26, 0x80	; 128
    24fc:	bf e3       	ldi	r27, 0x3F	; 63
    24fe:	8f a3       	std	Y+39, r24	; 0x27
    2500:	98 a7       	std	Y+40, r25	; 0x28
    2502:	a9 a7       	std	Y+41, r26	; 0x29
    2504:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2506:	6f a1       	ldd	r22, Y+39	; 0x27
    2508:	78 a5       	ldd	r23, Y+40	; 0x28
    250a:	89 a5       	ldd	r24, Y+41	; 0x29
    250c:	9a a5       	ldd	r25, Y+42	; 0x2a
    250e:	20 e0       	ldi	r18, 0x00	; 0
    2510:	30 e0       	ldi	r19, 0x00	; 0
    2512:	4a ef       	ldi	r20, 0xFA	; 250
    2514:	54 e4       	ldi	r21, 0x44	; 68
    2516:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    251a:	dc 01       	movw	r26, r24
    251c:	cb 01       	movw	r24, r22
    251e:	8b a3       	std	Y+35, r24	; 0x23
    2520:	9c a3       	std	Y+36, r25	; 0x24
    2522:	ad a3       	std	Y+37, r26	; 0x25
    2524:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2526:	6b a1       	ldd	r22, Y+35	; 0x23
    2528:	7c a1       	ldd	r23, Y+36	; 0x24
    252a:	8d a1       	ldd	r24, Y+37	; 0x25
    252c:	9e a1       	ldd	r25, Y+38	; 0x26
    252e:	20 e0       	ldi	r18, 0x00	; 0
    2530:	30 e0       	ldi	r19, 0x00	; 0
    2532:	40 e8       	ldi	r20, 0x80	; 128
    2534:	5f e3       	ldi	r21, 0x3F	; 63
    2536:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    253a:	88 23       	and	r24, r24
    253c:	2c f4       	brge	.+10     	; 0x2548 <LCD_displayCharacter+0x16c>
		__ticks = 1;
    253e:	81 e0       	ldi	r24, 0x01	; 1
    2540:	90 e0       	ldi	r25, 0x00	; 0
    2542:	9a a3       	std	Y+34, r25	; 0x22
    2544:	89 a3       	std	Y+33, r24	; 0x21
    2546:	3f c0       	rjmp	.+126    	; 0x25c6 <LCD_displayCharacter+0x1ea>
	else if (__tmp > 65535)
    2548:	6b a1       	ldd	r22, Y+35	; 0x23
    254a:	7c a1       	ldd	r23, Y+36	; 0x24
    254c:	8d a1       	ldd	r24, Y+37	; 0x25
    254e:	9e a1       	ldd	r25, Y+38	; 0x26
    2550:	20 e0       	ldi	r18, 0x00	; 0
    2552:	3f ef       	ldi	r19, 0xFF	; 255
    2554:	4f e7       	ldi	r20, 0x7F	; 127
    2556:	57 e4       	ldi	r21, 0x47	; 71
    2558:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    255c:	18 16       	cp	r1, r24
    255e:	4c f5       	brge	.+82     	; 0x25b2 <LCD_displayCharacter+0x1d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2560:	6f a1       	ldd	r22, Y+39	; 0x27
    2562:	78 a5       	ldd	r23, Y+40	; 0x28
    2564:	89 a5       	ldd	r24, Y+41	; 0x29
    2566:	9a a5       	ldd	r25, Y+42	; 0x2a
    2568:	20 e0       	ldi	r18, 0x00	; 0
    256a:	30 e0       	ldi	r19, 0x00	; 0
    256c:	40 e2       	ldi	r20, 0x20	; 32
    256e:	51 e4       	ldi	r21, 0x41	; 65
    2570:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2574:	dc 01       	movw	r26, r24
    2576:	cb 01       	movw	r24, r22
    2578:	bc 01       	movw	r22, r24
    257a:	cd 01       	movw	r24, r26
    257c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2580:	dc 01       	movw	r26, r24
    2582:	cb 01       	movw	r24, r22
    2584:	9a a3       	std	Y+34, r25	; 0x22
    2586:	89 a3       	std	Y+33, r24	; 0x21
    2588:	0f c0       	rjmp	.+30     	; 0x25a8 <LCD_displayCharacter+0x1cc>
    258a:	88 ec       	ldi	r24, 0xC8	; 200
    258c:	90 e0       	ldi	r25, 0x00	; 0
    258e:	98 a3       	std	Y+32, r25	; 0x20
    2590:	8f 8f       	std	Y+31, r24	; 0x1f
    2592:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2594:	98 a1       	ldd	r25, Y+32	; 0x20
    2596:	01 97       	sbiw	r24, 0x01	; 1
    2598:	f1 f7       	brne	.-4      	; 0x2596 <LCD_displayCharacter+0x1ba>
    259a:	98 a3       	std	Y+32, r25	; 0x20
    259c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    259e:	89 a1       	ldd	r24, Y+33	; 0x21
    25a0:	9a a1       	ldd	r25, Y+34	; 0x22
    25a2:	01 97       	sbiw	r24, 0x01	; 1
    25a4:	9a a3       	std	Y+34, r25	; 0x22
    25a6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25a8:	89 a1       	ldd	r24, Y+33	; 0x21
    25aa:	9a a1       	ldd	r25, Y+34	; 0x22
    25ac:	00 97       	sbiw	r24, 0x00	; 0
    25ae:	69 f7       	brne	.-38     	; 0x258a <LCD_displayCharacter+0x1ae>
    25b0:	14 c0       	rjmp	.+40     	; 0x25da <LCD_displayCharacter+0x1fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25b2:	6b a1       	ldd	r22, Y+35	; 0x23
    25b4:	7c a1       	ldd	r23, Y+36	; 0x24
    25b6:	8d a1       	ldd	r24, Y+37	; 0x25
    25b8:	9e a1       	ldd	r25, Y+38	; 0x26
    25ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25be:	dc 01       	movw	r26, r24
    25c0:	cb 01       	movw	r24, r22
    25c2:	9a a3       	std	Y+34, r25	; 0x22
    25c4:	89 a3       	std	Y+33, r24	; 0x21
    25c6:	89 a1       	ldd	r24, Y+33	; 0x21
    25c8:	9a a1       	ldd	r25, Y+34	; 0x22
    25ca:	9e 8f       	std	Y+30, r25	; 0x1e
    25cc:	8d 8f       	std	Y+29, r24	; 0x1d
    25ce:	8d 8d       	ldd	r24, Y+29	; 0x1d
    25d0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    25d2:	01 97       	sbiw	r24, 0x01	; 1
    25d4:	f1 f7       	brne	.-4      	; 0x25d2 <LCD_displayCharacter+0x1f6>
    25d6:	9e 8f       	std	Y+30, r25	; 0x1e
    25d8:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif (LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required data to the data bus D0 --> D7 */
    25da:	80 e0       	ldi	r24, 0x00	; 0
    25dc:	6a ad       	ldd	r22, Y+58	; 0x3a
    25de:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <GPIO_writePort>
    25e2:	80 e0       	ldi	r24, 0x00	; 0
    25e4:	90 e0       	ldi	r25, 0x00	; 0
    25e6:	a0 e8       	ldi	r26, 0x80	; 128
    25e8:	bf e3       	ldi	r27, 0x3F	; 63
    25ea:	89 8f       	std	Y+25, r24	; 0x19
    25ec:	9a 8f       	std	Y+26, r25	; 0x1a
    25ee:	ab 8f       	std	Y+27, r26	; 0x1b
    25f0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25f2:	69 8d       	ldd	r22, Y+25	; 0x19
    25f4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    25f6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    25f8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    25fa:	20 e0       	ldi	r18, 0x00	; 0
    25fc:	30 e0       	ldi	r19, 0x00	; 0
    25fe:	4a ef       	ldi	r20, 0xFA	; 250
    2600:	54 e4       	ldi	r21, 0x44	; 68
    2602:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2606:	dc 01       	movw	r26, r24
    2608:	cb 01       	movw	r24, r22
    260a:	8d 8b       	std	Y+21, r24	; 0x15
    260c:	9e 8b       	std	Y+22, r25	; 0x16
    260e:	af 8b       	std	Y+23, r26	; 0x17
    2610:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2612:	6d 89       	ldd	r22, Y+21	; 0x15
    2614:	7e 89       	ldd	r23, Y+22	; 0x16
    2616:	8f 89       	ldd	r24, Y+23	; 0x17
    2618:	98 8d       	ldd	r25, Y+24	; 0x18
    261a:	20 e0       	ldi	r18, 0x00	; 0
    261c:	30 e0       	ldi	r19, 0x00	; 0
    261e:	40 e8       	ldi	r20, 0x80	; 128
    2620:	5f e3       	ldi	r21, 0x3F	; 63
    2622:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2626:	88 23       	and	r24, r24
    2628:	2c f4       	brge	.+10     	; 0x2634 <LCD_displayCharacter+0x258>
		__ticks = 1;
    262a:	81 e0       	ldi	r24, 0x01	; 1
    262c:	90 e0       	ldi	r25, 0x00	; 0
    262e:	9c 8b       	std	Y+20, r25	; 0x14
    2630:	8b 8b       	std	Y+19, r24	; 0x13
    2632:	3f c0       	rjmp	.+126    	; 0x26b2 <LCD_displayCharacter+0x2d6>
	else if (__tmp > 65535)
    2634:	6d 89       	ldd	r22, Y+21	; 0x15
    2636:	7e 89       	ldd	r23, Y+22	; 0x16
    2638:	8f 89       	ldd	r24, Y+23	; 0x17
    263a:	98 8d       	ldd	r25, Y+24	; 0x18
    263c:	20 e0       	ldi	r18, 0x00	; 0
    263e:	3f ef       	ldi	r19, 0xFF	; 255
    2640:	4f e7       	ldi	r20, 0x7F	; 127
    2642:	57 e4       	ldi	r21, 0x47	; 71
    2644:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2648:	18 16       	cp	r1, r24
    264a:	4c f5       	brge	.+82     	; 0x269e <LCD_displayCharacter+0x2c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    264c:	69 8d       	ldd	r22, Y+25	; 0x19
    264e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2650:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2652:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2654:	20 e0       	ldi	r18, 0x00	; 0
    2656:	30 e0       	ldi	r19, 0x00	; 0
    2658:	40 e2       	ldi	r20, 0x20	; 32
    265a:	51 e4       	ldi	r21, 0x41	; 65
    265c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2660:	dc 01       	movw	r26, r24
    2662:	cb 01       	movw	r24, r22
    2664:	bc 01       	movw	r22, r24
    2666:	cd 01       	movw	r24, r26
    2668:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    266c:	dc 01       	movw	r26, r24
    266e:	cb 01       	movw	r24, r22
    2670:	9c 8b       	std	Y+20, r25	; 0x14
    2672:	8b 8b       	std	Y+19, r24	; 0x13
    2674:	0f c0       	rjmp	.+30     	; 0x2694 <LCD_displayCharacter+0x2b8>
    2676:	88 ec       	ldi	r24, 0xC8	; 200
    2678:	90 e0       	ldi	r25, 0x00	; 0
    267a:	9a 8b       	std	Y+18, r25	; 0x12
    267c:	89 8b       	std	Y+17, r24	; 0x11
    267e:	89 89       	ldd	r24, Y+17	; 0x11
    2680:	9a 89       	ldd	r25, Y+18	; 0x12
    2682:	01 97       	sbiw	r24, 0x01	; 1
    2684:	f1 f7       	brne	.-4      	; 0x2682 <LCD_displayCharacter+0x2a6>
    2686:	9a 8b       	std	Y+18, r25	; 0x12
    2688:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    268a:	8b 89       	ldd	r24, Y+19	; 0x13
    268c:	9c 89       	ldd	r25, Y+20	; 0x14
    268e:	01 97       	sbiw	r24, 0x01	; 1
    2690:	9c 8b       	std	Y+20, r25	; 0x14
    2692:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2694:	8b 89       	ldd	r24, Y+19	; 0x13
    2696:	9c 89       	ldd	r25, Y+20	; 0x14
    2698:	00 97       	sbiw	r24, 0x00	; 0
    269a:	69 f7       	brne	.-38     	; 0x2676 <LCD_displayCharacter+0x29a>
    269c:	14 c0       	rjmp	.+40     	; 0x26c6 <LCD_displayCharacter+0x2ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    269e:	6d 89       	ldd	r22, Y+21	; 0x15
    26a0:	7e 89       	ldd	r23, Y+22	; 0x16
    26a2:	8f 89       	ldd	r24, Y+23	; 0x17
    26a4:	98 8d       	ldd	r25, Y+24	; 0x18
    26a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26aa:	dc 01       	movw	r26, r24
    26ac:	cb 01       	movw	r24, r22
    26ae:	9c 8b       	std	Y+20, r25	; 0x14
    26b0:	8b 8b       	std	Y+19, r24	; 0x13
    26b2:	8b 89       	ldd	r24, Y+19	; 0x13
    26b4:	9c 89       	ldd	r25, Y+20	; 0x14
    26b6:	98 8b       	std	Y+16, r25	; 0x10
    26b8:	8f 87       	std	Y+15, r24	; 0x0f
    26ba:	8f 85       	ldd	r24, Y+15	; 0x0f
    26bc:	98 89       	ldd	r25, Y+16	; 0x10
    26be:	01 97       	sbiw	r24, 0x01	; 1
    26c0:	f1 f7       	brne	.-4      	; 0x26be <LCD_displayCharacter+0x2e2>
    26c2:	98 8b       	std	Y+16, r25	; 0x10
    26c4:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    26c6:	81 e0       	ldi	r24, 0x01	; 1
    26c8:	67 e0       	ldi	r22, 0x07	; 7
    26ca:	40 e0       	ldi	r20, 0x00	; 0
    26cc:	0e 94 e3 0c 	call	0x19c6	; 0x19c6 <GPIO_writePin>
    26d0:	80 e0       	ldi	r24, 0x00	; 0
    26d2:	90 e0       	ldi	r25, 0x00	; 0
    26d4:	a0 e8       	ldi	r26, 0x80	; 128
    26d6:	bf e3       	ldi	r27, 0x3F	; 63
    26d8:	8b 87       	std	Y+11, r24	; 0x0b
    26da:	9c 87       	std	Y+12, r25	; 0x0c
    26dc:	ad 87       	std	Y+13, r26	; 0x0d
    26de:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26e0:	6b 85       	ldd	r22, Y+11	; 0x0b
    26e2:	7c 85       	ldd	r23, Y+12	; 0x0c
    26e4:	8d 85       	ldd	r24, Y+13	; 0x0d
    26e6:	9e 85       	ldd	r25, Y+14	; 0x0e
    26e8:	20 e0       	ldi	r18, 0x00	; 0
    26ea:	30 e0       	ldi	r19, 0x00	; 0
    26ec:	4a ef       	ldi	r20, 0xFA	; 250
    26ee:	54 e4       	ldi	r21, 0x44	; 68
    26f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26f4:	dc 01       	movw	r26, r24
    26f6:	cb 01       	movw	r24, r22
    26f8:	8f 83       	std	Y+7, r24	; 0x07
    26fa:	98 87       	std	Y+8, r25	; 0x08
    26fc:	a9 87       	std	Y+9, r26	; 0x09
    26fe:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2700:	6f 81       	ldd	r22, Y+7	; 0x07
    2702:	78 85       	ldd	r23, Y+8	; 0x08
    2704:	89 85       	ldd	r24, Y+9	; 0x09
    2706:	9a 85       	ldd	r25, Y+10	; 0x0a
    2708:	20 e0       	ldi	r18, 0x00	; 0
    270a:	30 e0       	ldi	r19, 0x00	; 0
    270c:	40 e8       	ldi	r20, 0x80	; 128
    270e:	5f e3       	ldi	r21, 0x3F	; 63
    2710:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2714:	88 23       	and	r24, r24
    2716:	2c f4       	brge	.+10     	; 0x2722 <LCD_displayCharacter+0x346>
		__ticks = 1;
    2718:	81 e0       	ldi	r24, 0x01	; 1
    271a:	90 e0       	ldi	r25, 0x00	; 0
    271c:	9e 83       	std	Y+6, r25	; 0x06
    271e:	8d 83       	std	Y+5, r24	; 0x05
    2720:	3f c0       	rjmp	.+126    	; 0x27a0 <LCD_displayCharacter+0x3c4>
	else if (__tmp > 65535)
    2722:	6f 81       	ldd	r22, Y+7	; 0x07
    2724:	78 85       	ldd	r23, Y+8	; 0x08
    2726:	89 85       	ldd	r24, Y+9	; 0x09
    2728:	9a 85       	ldd	r25, Y+10	; 0x0a
    272a:	20 e0       	ldi	r18, 0x00	; 0
    272c:	3f ef       	ldi	r19, 0xFF	; 255
    272e:	4f e7       	ldi	r20, 0x7F	; 127
    2730:	57 e4       	ldi	r21, 0x47	; 71
    2732:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2736:	18 16       	cp	r1, r24
    2738:	4c f5       	brge	.+82     	; 0x278c <LCD_displayCharacter+0x3b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    273a:	6b 85       	ldd	r22, Y+11	; 0x0b
    273c:	7c 85       	ldd	r23, Y+12	; 0x0c
    273e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2740:	9e 85       	ldd	r25, Y+14	; 0x0e
    2742:	20 e0       	ldi	r18, 0x00	; 0
    2744:	30 e0       	ldi	r19, 0x00	; 0
    2746:	40 e2       	ldi	r20, 0x20	; 32
    2748:	51 e4       	ldi	r21, 0x41	; 65
    274a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    274e:	dc 01       	movw	r26, r24
    2750:	cb 01       	movw	r24, r22
    2752:	bc 01       	movw	r22, r24
    2754:	cd 01       	movw	r24, r26
    2756:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    275a:	dc 01       	movw	r26, r24
    275c:	cb 01       	movw	r24, r22
    275e:	9e 83       	std	Y+6, r25	; 0x06
    2760:	8d 83       	std	Y+5, r24	; 0x05
    2762:	0f c0       	rjmp	.+30     	; 0x2782 <LCD_displayCharacter+0x3a6>
    2764:	88 ec       	ldi	r24, 0xC8	; 200
    2766:	90 e0       	ldi	r25, 0x00	; 0
    2768:	9c 83       	std	Y+4, r25	; 0x04
    276a:	8b 83       	std	Y+3, r24	; 0x03
    276c:	8b 81       	ldd	r24, Y+3	; 0x03
    276e:	9c 81       	ldd	r25, Y+4	; 0x04
    2770:	01 97       	sbiw	r24, 0x01	; 1
    2772:	f1 f7       	brne	.-4      	; 0x2770 <LCD_displayCharacter+0x394>
    2774:	9c 83       	std	Y+4, r25	; 0x04
    2776:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2778:	8d 81       	ldd	r24, Y+5	; 0x05
    277a:	9e 81       	ldd	r25, Y+6	; 0x06
    277c:	01 97       	sbiw	r24, 0x01	; 1
    277e:	9e 83       	std	Y+6, r25	; 0x06
    2780:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2782:	8d 81       	ldd	r24, Y+5	; 0x05
    2784:	9e 81       	ldd	r25, Y+6	; 0x06
    2786:	00 97       	sbiw	r24, 0x00	; 0
    2788:	69 f7       	brne	.-38     	; 0x2764 <LCD_displayCharacter+0x388>
    278a:	14 c0       	rjmp	.+40     	; 0x27b4 <LCD_displayCharacter+0x3d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    278c:	6f 81       	ldd	r22, Y+7	; 0x07
    278e:	78 85       	ldd	r23, Y+8	; 0x08
    2790:	89 85       	ldd	r24, Y+9	; 0x09
    2792:	9a 85       	ldd	r25, Y+10	; 0x0a
    2794:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2798:	dc 01       	movw	r26, r24
    279a:	cb 01       	movw	r24, r22
    279c:	9e 83       	std	Y+6, r25	; 0x06
    279e:	8d 83       	std	Y+5, r24	; 0x05
    27a0:	8d 81       	ldd	r24, Y+5	; 0x05
    27a2:	9e 81       	ldd	r25, Y+6	; 0x06
    27a4:	9a 83       	std	Y+2, r25	; 0x02
    27a6:	89 83       	std	Y+1, r24	; 0x01
    27a8:	89 81       	ldd	r24, Y+1	; 0x01
    27aa:	9a 81       	ldd	r25, Y+2	; 0x02
    27ac:	01 97       	sbiw	r24, 0x01	; 1
    27ae:	f1 f7       	brne	.-4      	; 0x27ac <LCD_displayCharacter+0x3d0>
    27b0:	9a 83       	std	Y+2, r25	; 0x02
    27b2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    27b4:	ea 96       	adiw	r28, 0x3a	; 58
    27b6:	0f b6       	in	r0, 0x3f	; 63
    27b8:	f8 94       	cli
    27ba:	de bf       	out	0x3e, r29	; 62
    27bc:	0f be       	out	0x3f, r0	; 63
    27be:	cd bf       	out	0x3d, r28	; 61
    27c0:	cf 91       	pop	r28
    27c2:	df 91       	pop	r29
    27c4:	08 95       	ret

000027c6 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    27c6:	df 93       	push	r29
    27c8:	cf 93       	push	r28
    27ca:	00 d0       	rcall	.+0      	; 0x27cc <LCD_displayString+0x6>
    27cc:	0f 92       	push	r0
    27ce:	cd b7       	in	r28, 0x3d	; 61
    27d0:	de b7       	in	r29, 0x3e	; 62
    27d2:	9b 83       	std	Y+3, r25	; 0x03
    27d4:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    27d6:	19 82       	std	Y+1, r1	; 0x01
    27d8:	0e c0       	rjmp	.+28     	; 0x27f6 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    27da:	89 81       	ldd	r24, Y+1	; 0x01
    27dc:	28 2f       	mov	r18, r24
    27de:	30 e0       	ldi	r19, 0x00	; 0
    27e0:	8a 81       	ldd	r24, Y+2	; 0x02
    27e2:	9b 81       	ldd	r25, Y+3	; 0x03
    27e4:	fc 01       	movw	r30, r24
    27e6:	e2 0f       	add	r30, r18
    27e8:	f3 1f       	adc	r31, r19
    27ea:	80 81       	ld	r24, Z
    27ec:	0e 94 ee 11 	call	0x23dc	; 0x23dc <LCD_displayCharacter>
		i++;
    27f0:	89 81       	ldd	r24, Y+1	; 0x01
    27f2:	8f 5f       	subi	r24, 0xFF	; 255
    27f4:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    27f6:	89 81       	ldd	r24, Y+1	; 0x01
    27f8:	28 2f       	mov	r18, r24
    27fa:	30 e0       	ldi	r19, 0x00	; 0
    27fc:	8a 81       	ldd	r24, Y+2	; 0x02
    27fe:	9b 81       	ldd	r25, Y+3	; 0x03
    2800:	fc 01       	movw	r30, r24
    2802:	e2 0f       	add	r30, r18
    2804:	f3 1f       	adc	r31, r19
    2806:	80 81       	ld	r24, Z
    2808:	88 23       	and	r24, r24
    280a:	39 f7       	brne	.-50     	; 0x27da <LCD_displayString+0x14>
	{
		LCD_displayCharacter(Str[i]);
		i++;
	}

}
    280c:	0f 90       	pop	r0
    280e:	0f 90       	pop	r0
    2810:	0f 90       	pop	r0
    2812:	cf 91       	pop	r28
    2814:	df 91       	pop	r29
    2816:	08 95       	ret

00002818 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    2818:	df 93       	push	r29
    281a:	cf 93       	push	r28
    281c:	00 d0       	rcall	.+0      	; 0x281e <LCD_moveCursor+0x6>
    281e:	00 d0       	rcall	.+0      	; 0x2820 <LCD_moveCursor+0x8>
    2820:	0f 92       	push	r0
    2822:	cd b7       	in	r28, 0x3d	; 61
    2824:	de b7       	in	r29, 0x3e	; 62
    2826:	8a 83       	std	Y+2, r24	; 0x02
    2828:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;

	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    282a:	8a 81       	ldd	r24, Y+2	; 0x02
    282c:	28 2f       	mov	r18, r24
    282e:	30 e0       	ldi	r19, 0x00	; 0
    2830:	3d 83       	std	Y+5, r19	; 0x05
    2832:	2c 83       	std	Y+4, r18	; 0x04
    2834:	8c 81       	ldd	r24, Y+4	; 0x04
    2836:	9d 81       	ldd	r25, Y+5	; 0x05
    2838:	81 30       	cpi	r24, 0x01	; 1
    283a:	91 05       	cpc	r25, r1
    283c:	c1 f0       	breq	.+48     	; 0x286e <LCD_moveCursor+0x56>
    283e:	2c 81       	ldd	r18, Y+4	; 0x04
    2840:	3d 81       	ldd	r19, Y+5	; 0x05
    2842:	22 30       	cpi	r18, 0x02	; 2
    2844:	31 05       	cpc	r19, r1
    2846:	2c f4       	brge	.+10     	; 0x2852 <LCD_moveCursor+0x3a>
    2848:	8c 81       	ldd	r24, Y+4	; 0x04
    284a:	9d 81       	ldd	r25, Y+5	; 0x05
    284c:	00 97       	sbiw	r24, 0x00	; 0
    284e:	61 f0       	breq	.+24     	; 0x2868 <LCD_moveCursor+0x50>
    2850:	19 c0       	rjmp	.+50     	; 0x2884 <LCD_moveCursor+0x6c>
    2852:	2c 81       	ldd	r18, Y+4	; 0x04
    2854:	3d 81       	ldd	r19, Y+5	; 0x05
    2856:	22 30       	cpi	r18, 0x02	; 2
    2858:	31 05       	cpc	r19, r1
    285a:	69 f0       	breq	.+26     	; 0x2876 <LCD_moveCursor+0x5e>
    285c:	8c 81       	ldd	r24, Y+4	; 0x04
    285e:	9d 81       	ldd	r25, Y+5	; 0x05
    2860:	83 30       	cpi	r24, 0x03	; 3
    2862:	91 05       	cpc	r25, r1
    2864:	61 f0       	breq	.+24     	; 0x287e <LCD_moveCursor+0x66>
    2866:	0e c0       	rjmp	.+28     	; 0x2884 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    2868:	8b 81       	ldd	r24, Y+3	; 0x03
    286a:	89 83       	std	Y+1, r24	; 0x01
    286c:	0b c0       	rjmp	.+22     	; 0x2884 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    286e:	8b 81       	ldd	r24, Y+3	; 0x03
    2870:	80 5c       	subi	r24, 0xC0	; 192
    2872:	89 83       	std	Y+1, r24	; 0x01
    2874:	07 c0       	rjmp	.+14     	; 0x2884 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    2876:	8b 81       	ldd	r24, Y+3	; 0x03
    2878:	80 5f       	subi	r24, 0xF0	; 240
    287a:	89 83       	std	Y+1, r24	; 0x01
    287c:	03 c0       	rjmp	.+6      	; 0x2884 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    287e:	8b 81       	ldd	r24, Y+3	; 0x03
    2880:	80 5b       	subi	r24, 0xB0	; 176
    2882:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    2884:	89 81       	ldd	r24, Y+1	; 0x01
    2886:	80 68       	ori	r24, 0x80	; 128
    2888:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <LCD_sendCommand>
}
    288c:	0f 90       	pop	r0
    288e:	0f 90       	pop	r0
    2890:	0f 90       	pop	r0
    2892:	0f 90       	pop	r0
    2894:	0f 90       	pop	r0
    2896:	cf 91       	pop	r28
    2898:	df 91       	pop	r29
    289a:	08 95       	ret

0000289c <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    289c:	df 93       	push	r29
    289e:	cf 93       	push	r28
    28a0:	00 d0       	rcall	.+0      	; 0x28a2 <LCD_displayStringRowColumn+0x6>
    28a2:	00 d0       	rcall	.+0      	; 0x28a4 <LCD_displayStringRowColumn+0x8>
    28a4:	cd b7       	in	r28, 0x3d	; 61
    28a6:	de b7       	in	r29, 0x3e	; 62
    28a8:	89 83       	std	Y+1, r24	; 0x01
    28aa:	6a 83       	std	Y+2, r22	; 0x02
    28ac:	5c 83       	std	Y+4, r21	; 0x04
    28ae:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    28b0:	89 81       	ldd	r24, Y+1	; 0x01
    28b2:	6a 81       	ldd	r22, Y+2	; 0x02
    28b4:	0e 94 0c 14 	call	0x2818	; 0x2818 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    28b8:	8b 81       	ldd	r24, Y+3	; 0x03
    28ba:	9c 81       	ldd	r25, Y+4	; 0x04
    28bc:	0e 94 e3 13 	call	0x27c6	; 0x27c6 <LCD_displayString>
}
    28c0:	0f 90       	pop	r0
    28c2:	0f 90       	pop	r0
    28c4:	0f 90       	pop	r0
    28c6:	0f 90       	pop	r0
    28c8:	cf 91       	pop	r28
    28ca:	df 91       	pop	r29
    28cc:	08 95       	ret

000028ce <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    28ce:	df 93       	push	r29
    28d0:	cf 93       	push	r28
    28d2:	cd b7       	in	r28, 0x3d	; 61
    28d4:	de b7       	in	r29, 0x3e	; 62
    28d6:	62 97       	sbiw	r28, 0x12	; 18
    28d8:	0f b6       	in	r0, 0x3f	; 63
    28da:	f8 94       	cli
    28dc:	de bf       	out	0x3e, r29	; 62
    28de:	0f be       	out	0x3f, r0	; 63
    28e0:	cd bf       	out	0x3d, r28	; 61
    28e2:	9a 8b       	std	Y+18, r25	; 0x12
    28e4:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    28e6:	89 89       	ldd	r24, Y+17	; 0x11
    28e8:	9a 89       	ldd	r25, Y+18	; 0x12
    28ea:	9e 01       	movw	r18, r28
    28ec:	2f 5f       	subi	r18, 0xFF	; 255
    28ee:	3f 4f       	sbci	r19, 0xFF	; 255
    28f0:	b9 01       	movw	r22, r18
    28f2:	4a e0       	ldi	r20, 0x0A	; 10
    28f4:	50 e0       	ldi	r21, 0x00	; 0
    28f6:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <itoa>
   LCD_displayString(buff); /* Display the string */
    28fa:	ce 01       	movw	r24, r28
    28fc:	01 96       	adiw	r24, 0x01	; 1
    28fe:	0e 94 e3 13 	call	0x27c6	; 0x27c6 <LCD_displayString>
}
    2902:	62 96       	adiw	r28, 0x12	; 18
    2904:	0f b6       	in	r0, 0x3f	; 63
    2906:	f8 94       	cli
    2908:	de bf       	out	0x3e, r29	; 62
    290a:	0f be       	out	0x3f, r0	; 63
    290c:	cd bf       	out	0x3d, r28	; 61
    290e:	cf 91       	pop	r28
    2910:	df 91       	pop	r29
    2912:	08 95       	ret

00002914 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    2914:	df 93       	push	r29
    2916:	cf 93       	push	r28
    2918:	cd b7       	in	r28, 0x3d	; 61
    291a:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    291c:	81 e0       	ldi	r24, 0x01	; 1
    291e:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <LCD_sendCommand>
}
    2922:	cf 91       	pop	r28
    2924:	df 91       	pop	r29
    2926:	08 95       	ret

00002928 <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType*Config_Ptr)
{
    2928:	df 93       	push	r29
    292a:	cf 93       	push	r28
    292c:	00 d0       	rcall	.+0      	; 0x292e <UART_init+0x6>
    292e:	00 d0       	rcall	.+0      	; 0x2930 <UART_init+0x8>
    2930:	cd b7       	in	r28, 0x3d	; 61
    2932:	de b7       	in	r29, 0x3e	; 62
    2934:	9c 83       	std	Y+4, r25	; 0x04
    2936:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    2938:	1a 82       	std	Y+2, r1	; 0x02
    293a:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    293c:	eb e2       	ldi	r30, 0x2B	; 43
    293e:	f0 e0       	ldi	r31, 0x00	; 0
    2940:	82 e0       	ldi	r24, 0x02	; 2
    2942:	80 83       	st	Z, r24
	 * UDRIE = 0 Disable USART Data Register Empty Interrupt Enable
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2  obtained from frame_size variable in the configurations structure
	 ***********************************************************************/ 
	if (Config_Ptr->bits!= BITS_9){
    2944:	eb 81       	ldd	r30, Y+3	; 0x03
    2946:	fc 81       	ldd	r31, Y+4	; 0x04
    2948:	80 81       	ld	r24, Z
    294a:	87 30       	cpi	r24, 0x07	; 7
    294c:	29 f0       	breq	.+10     	; 0x2958 <UART_init+0x30>
	UCSRB = (1<<RXEN) | (1<<TXEN);}
    294e:	ea e2       	ldi	r30, 0x2A	; 42
    2950:	f0 e0       	ldi	r31, 0x00	; 0
    2952:	88 e1       	ldi	r24, 0x18	; 24
    2954:	80 83       	st	Z, r24
    2956:	04 c0       	rjmp	.+8      	; 0x2960 <UART_init+0x38>
	else{
		UCSRB = (1<<RXEN) | (1<<TXEN)|(1<<UCSZ2);
    2958:	ea e2       	ldi	r30, 0x2A	; 42
    295a:	f0 e0       	ldi	r31, 0x00	; 0
    295c:	8c e1       	ldi	r24, 0x1C	; 28
    295e:	80 83       	st	Z, r24
	 * UPM1:0    obtained from parity_mode variable in the configurations structure
	 * USBS      obtained from stop_bits variable in the configurations structure
	 * UCSZ1:0   obtained from frame_size variable in the configurations structure
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL);
    2960:	e0 e4       	ldi	r30, 0x40	; 64
    2962:	f0 e0       	ldi	r31, 0x00	; 0
    2964:	80 e8       	ldi	r24, 0x80	; 128
    2966:	80 83       	st	Z, r24
	UCSRC |= (UCSRC&0xf9)|((Config_Ptr->bits&0x03)<<1);
    2968:	a0 e4       	ldi	r26, 0x40	; 64
    296a:	b0 e0       	ldi	r27, 0x00	; 0
    296c:	e0 e4       	ldi	r30, 0x40	; 64
    296e:	f0 e0       	ldi	r31, 0x00	; 0
    2970:	80 81       	ld	r24, Z
    2972:	38 2f       	mov	r19, r24
    2974:	e0 e4       	ldi	r30, 0x40	; 64
    2976:	f0 e0       	ldi	r31, 0x00	; 0
    2978:	80 81       	ld	r24, Z
    297a:	28 2f       	mov	r18, r24
    297c:	29 7f       	andi	r18, 0xF9	; 249
    297e:	eb 81       	ldd	r30, Y+3	; 0x03
    2980:	fc 81       	ldd	r31, Y+4	; 0x04
    2982:	80 81       	ld	r24, Z
    2984:	88 2f       	mov	r24, r24
    2986:	90 e0       	ldi	r25, 0x00	; 0
    2988:	83 70       	andi	r24, 0x03	; 3
    298a:	90 70       	andi	r25, 0x00	; 0
    298c:	88 0f       	add	r24, r24
    298e:	99 1f       	adc	r25, r25
    2990:	82 2b       	or	r24, r18
    2992:	83 2b       	or	r24, r19
    2994:	8c 93       	st	X, r24
	UCSRC |=(UCSRC&0xcf)|((Config_Ptr->parity)<<4);
    2996:	a0 e4       	ldi	r26, 0x40	; 64
    2998:	b0 e0       	ldi	r27, 0x00	; 0
    299a:	e0 e4       	ldi	r30, 0x40	; 64
    299c:	f0 e0       	ldi	r31, 0x00	; 0
    299e:	80 81       	ld	r24, Z
    29a0:	38 2f       	mov	r19, r24
    29a2:	e0 e4       	ldi	r30, 0x40	; 64
    29a4:	f0 e0       	ldi	r31, 0x00	; 0
    29a6:	80 81       	ld	r24, Z
    29a8:	28 2f       	mov	r18, r24
    29aa:	2f 7c       	andi	r18, 0xCF	; 207
    29ac:	eb 81       	ldd	r30, Y+3	; 0x03
    29ae:	fc 81       	ldd	r31, Y+4	; 0x04
    29b0:	81 81       	ldd	r24, Z+1	; 0x01
    29b2:	88 2f       	mov	r24, r24
    29b4:	90 e0       	ldi	r25, 0x00	; 0
    29b6:	82 95       	swap	r24
    29b8:	92 95       	swap	r25
    29ba:	90 7f       	andi	r25, 0xF0	; 240
    29bc:	98 27       	eor	r25, r24
    29be:	80 7f       	andi	r24, 0xF0	; 240
    29c0:	98 27       	eor	r25, r24
    29c2:	82 2b       	or	r24, r18
    29c4:	83 2b       	or	r24, r19
    29c6:	8c 93       	st	X, r24
	UCSRC |=(UCSRC&0xf7)|((Config_Ptr->stop_bits)<<3);
    29c8:	a0 e4       	ldi	r26, 0x40	; 64
    29ca:	b0 e0       	ldi	r27, 0x00	; 0
    29cc:	e0 e4       	ldi	r30, 0x40	; 64
    29ce:	f0 e0       	ldi	r31, 0x00	; 0
    29d0:	80 81       	ld	r24, Z
    29d2:	38 2f       	mov	r19, r24
    29d4:	e0 e4       	ldi	r30, 0x40	; 64
    29d6:	f0 e0       	ldi	r31, 0x00	; 0
    29d8:	80 81       	ld	r24, Z
    29da:	28 2f       	mov	r18, r24
    29dc:	27 7f       	andi	r18, 0xF7	; 247
    29de:	eb 81       	ldd	r30, Y+3	; 0x03
    29e0:	fc 81       	ldd	r31, Y+4	; 0x04
    29e2:	82 81       	ldd	r24, Z+2	; 0x02
    29e4:	88 2f       	mov	r24, r24
    29e6:	90 e0       	ldi	r25, 0x00	; 0
    29e8:	88 0f       	add	r24, r24
    29ea:	99 1f       	adc	r25, r25
    29ec:	88 0f       	add	r24, r24
    29ee:	99 1f       	adc	r25, r25
    29f0:	88 0f       	add	r24, r24
    29f2:	99 1f       	adc	r25, r25
    29f4:	82 2b       	or	r24, r18
    29f6:	83 2b       	or	r24, r19
    29f8:	8c 93       	st	X, r24
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (Config_Ptr->baud_rate * 8UL))) - 1);
    29fa:	eb 81       	ldd	r30, Y+3	; 0x03
    29fc:	fc 81       	ldd	r31, Y+4	; 0x04
    29fe:	83 81       	ldd	r24, Z+3	; 0x03
    2a00:	94 81       	ldd	r25, Z+4	; 0x04
    2a02:	a5 81       	ldd	r26, Z+5	; 0x05
    2a04:	b6 81       	ldd	r27, Z+6	; 0x06
    2a06:	88 0f       	add	r24, r24
    2a08:	99 1f       	adc	r25, r25
    2a0a:	aa 1f       	adc	r26, r26
    2a0c:	bb 1f       	adc	r27, r27
    2a0e:	88 0f       	add	r24, r24
    2a10:	99 1f       	adc	r25, r25
    2a12:	aa 1f       	adc	r26, r26
    2a14:	bb 1f       	adc	r27, r27
    2a16:	88 0f       	add	r24, r24
    2a18:	99 1f       	adc	r25, r25
    2a1a:	aa 1f       	adc	r26, r26
    2a1c:	bb 1f       	adc	r27, r27
    2a1e:	9c 01       	movw	r18, r24
    2a20:	ad 01       	movw	r20, r26
    2a22:	80 e0       	ldi	r24, 0x00	; 0
    2a24:	92 e1       	ldi	r25, 0x12	; 18
    2a26:	aa e7       	ldi	r26, 0x7A	; 122
    2a28:	b0 e0       	ldi	r27, 0x00	; 0
    2a2a:	bc 01       	movw	r22, r24
    2a2c:	cd 01       	movw	r24, r26
    2a2e:	0e 94 c2 15 	call	0x2b84	; 0x2b84 <__udivmodsi4>
    2a32:	da 01       	movw	r26, r20
    2a34:	c9 01       	movw	r24, r18
    2a36:	01 97       	sbiw	r24, 0x01	; 1
    2a38:	9a 83       	std	Y+2, r25	; 0x02
    2a3a:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    2a3c:	e0 e4       	ldi	r30, 0x40	; 64
    2a3e:	f0 e0       	ldi	r31, 0x00	; 0
    2a40:	89 81       	ldd	r24, Y+1	; 0x01
    2a42:	9a 81       	ldd	r25, Y+2	; 0x02
    2a44:	89 2f       	mov	r24, r25
    2a46:	99 27       	eor	r25, r25
    2a48:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    2a4a:	e9 e2       	ldi	r30, 0x29	; 41
    2a4c:	f0 e0       	ldi	r31, 0x00	; 0
    2a4e:	89 81       	ldd	r24, Y+1	; 0x01
    2a50:	80 83       	st	Z, r24
}
    2a52:	0f 90       	pop	r0
    2a54:	0f 90       	pop	r0
    2a56:	0f 90       	pop	r0
    2a58:	0f 90       	pop	r0
    2a5a:	cf 91       	pop	r28
    2a5c:	df 91       	pop	r29
    2a5e:	08 95       	ret

00002a60 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    2a60:	df 93       	push	r29
    2a62:	cf 93       	push	r28
    2a64:	0f 92       	push	r0
    2a66:	cd b7       	in	r28, 0x3d	; 61
    2a68:	de b7       	in	r29, 0x3e	; 62
    2a6a:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    2a6c:	eb e2       	ldi	r30, 0x2B	; 43
    2a6e:	f0 e0       	ldi	r31, 0x00	; 0
    2a70:	80 81       	ld	r24, Z
    2a72:	88 2f       	mov	r24, r24
    2a74:	90 e0       	ldi	r25, 0x00	; 0
    2a76:	80 72       	andi	r24, 0x20	; 32
    2a78:	90 70       	andi	r25, 0x00	; 0
    2a7a:	00 97       	sbiw	r24, 0x00	; 0
    2a7c:	b9 f3       	breq	.-18     	; 0x2a6c <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    2a7e:	ec e2       	ldi	r30, 0x2C	; 44
    2a80:	f0 e0       	ldi	r31, 0x00	; 0
    2a82:	89 81       	ldd	r24, Y+1	; 0x01
    2a84:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    2a86:	0f 90       	pop	r0
    2a88:	cf 91       	pop	r28
    2a8a:	df 91       	pop	r29
    2a8c:	08 95       	ret

00002a8e <UART_receiveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_receiveByte(void)
{
    2a8e:	df 93       	push	r29
    2a90:	cf 93       	push	r28
    2a92:	cd b7       	in	r28, 0x3d	; 61
    2a94:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    2a96:	eb e2       	ldi	r30, 0x2B	; 43
    2a98:	f0 e0       	ldi	r31, 0x00	; 0
    2a9a:	80 81       	ld	r24, Z
    2a9c:	88 23       	and	r24, r24
    2a9e:	dc f7       	brge	.-10     	; 0x2a96 <UART_receiveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    2aa0:	ec e2       	ldi	r30, 0x2C	; 44
    2aa2:	f0 e0       	ldi	r31, 0x00	; 0
    2aa4:	80 81       	ld	r24, Z
}
    2aa6:	cf 91       	pop	r28
    2aa8:	df 91       	pop	r29
    2aaa:	08 95       	ret

00002aac <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    2aac:	df 93       	push	r29
    2aae:	cf 93       	push	r28
    2ab0:	00 d0       	rcall	.+0      	; 0x2ab2 <UART_sendString+0x6>
    2ab2:	0f 92       	push	r0
    2ab4:	cd b7       	in	r28, 0x3d	; 61
    2ab6:	de b7       	in	r29, 0x3e	; 62
    2ab8:	9b 83       	std	Y+3, r25	; 0x03
    2aba:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2abc:	19 82       	std	Y+1, r1	; 0x01
    2abe:	0e c0       	rjmp	.+28     	; 0x2adc <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    2ac0:	89 81       	ldd	r24, Y+1	; 0x01
    2ac2:	28 2f       	mov	r18, r24
    2ac4:	30 e0       	ldi	r19, 0x00	; 0
    2ac6:	8a 81       	ldd	r24, Y+2	; 0x02
    2ac8:	9b 81       	ldd	r25, Y+3	; 0x03
    2aca:	fc 01       	movw	r30, r24
    2acc:	e2 0f       	add	r30, r18
    2ace:	f3 1f       	adc	r31, r19
    2ad0:	80 81       	ld	r24, Z
    2ad2:	0e 94 30 15 	call	0x2a60	; 0x2a60 <UART_sendByte>
		i++;
    2ad6:	89 81       	ldd	r24, Y+1	; 0x01
    2ad8:	8f 5f       	subi	r24, 0xFF	; 255
    2ada:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    2adc:	89 81       	ldd	r24, Y+1	; 0x01
    2ade:	28 2f       	mov	r18, r24
    2ae0:	30 e0       	ldi	r19, 0x00	; 0
    2ae2:	8a 81       	ldd	r24, Y+2	; 0x02
    2ae4:	9b 81       	ldd	r25, Y+3	; 0x03
    2ae6:	fc 01       	movw	r30, r24
    2ae8:	e2 0f       	add	r30, r18
    2aea:	f3 1f       	adc	r31, r19
    2aec:	80 81       	ld	r24, Z
    2aee:	88 23       	and	r24, r24
    2af0:	39 f7       	brne	.-50     	; 0x2ac0 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    2af2:	0f 90       	pop	r0
    2af4:	0f 90       	pop	r0
    2af6:	0f 90       	pop	r0
    2af8:	cf 91       	pop	r28
    2afa:	df 91       	pop	r29
    2afc:	08 95       	ret

00002afe <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    2afe:	0f 93       	push	r16
    2b00:	1f 93       	push	r17
    2b02:	df 93       	push	r29
    2b04:	cf 93       	push	r28
    2b06:	00 d0       	rcall	.+0      	; 0x2b08 <UART_receiveString+0xa>
    2b08:	0f 92       	push	r0
    2b0a:	cd b7       	in	r28, 0x3d	; 61
    2b0c:	de b7       	in	r29, 0x3e	; 62
    2b0e:	9b 83       	std	Y+3, r25	; 0x03
    2b10:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2b12:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_receiveByte();
    2b14:	89 81       	ldd	r24, Y+1	; 0x01
    2b16:	28 2f       	mov	r18, r24
    2b18:	30 e0       	ldi	r19, 0x00	; 0
    2b1a:	8a 81       	ldd	r24, Y+2	; 0x02
    2b1c:	9b 81       	ldd	r25, Y+3	; 0x03
    2b1e:	8c 01       	movw	r16, r24
    2b20:	02 0f       	add	r16, r18
    2b22:	13 1f       	adc	r17, r19
    2b24:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <UART_receiveByte>
    2b28:	f8 01       	movw	r30, r16
    2b2a:	80 83       	st	Z, r24
    2b2c:	0f c0       	rjmp	.+30     	; 0x2b4c <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    2b2e:	89 81       	ldd	r24, Y+1	; 0x01
    2b30:	8f 5f       	subi	r24, 0xFF	; 255
    2b32:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_receiveByte();
    2b34:	89 81       	ldd	r24, Y+1	; 0x01
    2b36:	28 2f       	mov	r18, r24
    2b38:	30 e0       	ldi	r19, 0x00	; 0
    2b3a:	8a 81       	ldd	r24, Y+2	; 0x02
    2b3c:	9b 81       	ldd	r25, Y+3	; 0x03
    2b3e:	8c 01       	movw	r16, r24
    2b40:	02 0f       	add	r16, r18
    2b42:	13 1f       	adc	r17, r19
    2b44:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <UART_receiveByte>
    2b48:	f8 01       	movw	r30, r16
    2b4a:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_receiveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    2b4c:	89 81       	ldd	r24, Y+1	; 0x01
    2b4e:	28 2f       	mov	r18, r24
    2b50:	30 e0       	ldi	r19, 0x00	; 0
    2b52:	8a 81       	ldd	r24, Y+2	; 0x02
    2b54:	9b 81       	ldd	r25, Y+3	; 0x03
    2b56:	fc 01       	movw	r30, r24
    2b58:	e2 0f       	add	r30, r18
    2b5a:	f3 1f       	adc	r31, r19
    2b5c:	80 81       	ld	r24, Z
    2b5e:	83 32       	cpi	r24, 0x23	; 35
    2b60:	31 f7       	brne	.-52     	; 0x2b2e <UART_receiveString+0x30>
		i++;
		Str[i] = UART_receiveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    2b62:	89 81       	ldd	r24, Y+1	; 0x01
    2b64:	28 2f       	mov	r18, r24
    2b66:	30 e0       	ldi	r19, 0x00	; 0
    2b68:	8a 81       	ldd	r24, Y+2	; 0x02
    2b6a:	9b 81       	ldd	r25, Y+3	; 0x03
    2b6c:	fc 01       	movw	r30, r24
    2b6e:	e2 0f       	add	r30, r18
    2b70:	f3 1f       	adc	r31, r19
    2b72:	10 82       	st	Z, r1
}
    2b74:	0f 90       	pop	r0
    2b76:	0f 90       	pop	r0
    2b78:	0f 90       	pop	r0
    2b7a:	cf 91       	pop	r28
    2b7c:	df 91       	pop	r29
    2b7e:	1f 91       	pop	r17
    2b80:	0f 91       	pop	r16
    2b82:	08 95       	ret

00002b84 <__udivmodsi4>:
    2b84:	a1 e2       	ldi	r26, 0x21	; 33
    2b86:	1a 2e       	mov	r1, r26
    2b88:	aa 1b       	sub	r26, r26
    2b8a:	bb 1b       	sub	r27, r27
    2b8c:	fd 01       	movw	r30, r26
    2b8e:	0d c0       	rjmp	.+26     	; 0x2baa <__udivmodsi4_ep>

00002b90 <__udivmodsi4_loop>:
    2b90:	aa 1f       	adc	r26, r26
    2b92:	bb 1f       	adc	r27, r27
    2b94:	ee 1f       	adc	r30, r30
    2b96:	ff 1f       	adc	r31, r31
    2b98:	a2 17       	cp	r26, r18
    2b9a:	b3 07       	cpc	r27, r19
    2b9c:	e4 07       	cpc	r30, r20
    2b9e:	f5 07       	cpc	r31, r21
    2ba0:	20 f0       	brcs	.+8      	; 0x2baa <__udivmodsi4_ep>
    2ba2:	a2 1b       	sub	r26, r18
    2ba4:	b3 0b       	sbc	r27, r19
    2ba6:	e4 0b       	sbc	r30, r20
    2ba8:	f5 0b       	sbc	r31, r21

00002baa <__udivmodsi4_ep>:
    2baa:	66 1f       	adc	r22, r22
    2bac:	77 1f       	adc	r23, r23
    2bae:	88 1f       	adc	r24, r24
    2bb0:	99 1f       	adc	r25, r25
    2bb2:	1a 94       	dec	r1
    2bb4:	69 f7       	brne	.-38     	; 0x2b90 <__udivmodsi4_loop>
    2bb6:	60 95       	com	r22
    2bb8:	70 95       	com	r23
    2bba:	80 95       	com	r24
    2bbc:	90 95       	com	r25
    2bbe:	9b 01       	movw	r18, r22
    2bc0:	ac 01       	movw	r20, r24
    2bc2:	bd 01       	movw	r22, r26
    2bc4:	cf 01       	movw	r24, r30
    2bc6:	08 95       	ret

00002bc8 <__prologue_saves__>:
    2bc8:	2f 92       	push	r2
    2bca:	3f 92       	push	r3
    2bcc:	4f 92       	push	r4
    2bce:	5f 92       	push	r5
    2bd0:	6f 92       	push	r6
    2bd2:	7f 92       	push	r7
    2bd4:	8f 92       	push	r8
    2bd6:	9f 92       	push	r9
    2bd8:	af 92       	push	r10
    2bda:	bf 92       	push	r11
    2bdc:	cf 92       	push	r12
    2bde:	df 92       	push	r13
    2be0:	ef 92       	push	r14
    2be2:	ff 92       	push	r15
    2be4:	0f 93       	push	r16
    2be6:	1f 93       	push	r17
    2be8:	cf 93       	push	r28
    2bea:	df 93       	push	r29
    2bec:	cd b7       	in	r28, 0x3d	; 61
    2bee:	de b7       	in	r29, 0x3e	; 62
    2bf0:	ca 1b       	sub	r28, r26
    2bf2:	db 0b       	sbc	r29, r27
    2bf4:	0f b6       	in	r0, 0x3f	; 63
    2bf6:	f8 94       	cli
    2bf8:	de bf       	out	0x3e, r29	; 62
    2bfa:	0f be       	out	0x3f, r0	; 63
    2bfc:	cd bf       	out	0x3d, r28	; 61
    2bfe:	09 94       	ijmp

00002c00 <__epilogue_restores__>:
    2c00:	2a 88       	ldd	r2, Y+18	; 0x12
    2c02:	39 88       	ldd	r3, Y+17	; 0x11
    2c04:	48 88       	ldd	r4, Y+16	; 0x10
    2c06:	5f 84       	ldd	r5, Y+15	; 0x0f
    2c08:	6e 84       	ldd	r6, Y+14	; 0x0e
    2c0a:	7d 84       	ldd	r7, Y+13	; 0x0d
    2c0c:	8c 84       	ldd	r8, Y+12	; 0x0c
    2c0e:	9b 84       	ldd	r9, Y+11	; 0x0b
    2c10:	aa 84       	ldd	r10, Y+10	; 0x0a
    2c12:	b9 84       	ldd	r11, Y+9	; 0x09
    2c14:	c8 84       	ldd	r12, Y+8	; 0x08
    2c16:	df 80       	ldd	r13, Y+7	; 0x07
    2c18:	ee 80       	ldd	r14, Y+6	; 0x06
    2c1a:	fd 80       	ldd	r15, Y+5	; 0x05
    2c1c:	0c 81       	ldd	r16, Y+4	; 0x04
    2c1e:	1b 81       	ldd	r17, Y+3	; 0x03
    2c20:	aa 81       	ldd	r26, Y+2	; 0x02
    2c22:	b9 81       	ldd	r27, Y+1	; 0x01
    2c24:	ce 0f       	add	r28, r30
    2c26:	d1 1d       	adc	r29, r1
    2c28:	0f b6       	in	r0, 0x3f	; 63
    2c2a:	f8 94       	cli
    2c2c:	de bf       	out	0x3e, r29	; 62
    2c2e:	0f be       	out	0x3f, r0	; 63
    2c30:	cd bf       	out	0x3d, r28	; 61
    2c32:	ed 01       	movw	r28, r26
    2c34:	08 95       	ret

00002c36 <itoa>:
    2c36:	fb 01       	movw	r30, r22
    2c38:	9f 01       	movw	r18, r30
    2c3a:	e8 94       	clt
    2c3c:	42 30       	cpi	r20, 0x02	; 2
    2c3e:	c4 f0       	brlt	.+48     	; 0x2c70 <itoa+0x3a>
    2c40:	45 32       	cpi	r20, 0x25	; 37
    2c42:	b4 f4       	brge	.+44     	; 0x2c70 <itoa+0x3a>
    2c44:	4a 30       	cpi	r20, 0x0A	; 10
    2c46:	29 f4       	brne	.+10     	; 0x2c52 <itoa+0x1c>
    2c48:	97 fb       	bst	r25, 7
    2c4a:	1e f4       	brtc	.+6      	; 0x2c52 <itoa+0x1c>
    2c4c:	90 95       	com	r25
    2c4e:	81 95       	neg	r24
    2c50:	9f 4f       	sbci	r25, 0xFF	; 255
    2c52:	64 2f       	mov	r22, r20
    2c54:	77 27       	eor	r23, r23
    2c56:	0e 94 4c 16 	call	0x2c98	; 0x2c98 <__udivmodhi4>
    2c5a:	80 5d       	subi	r24, 0xD0	; 208
    2c5c:	8a 33       	cpi	r24, 0x3A	; 58
    2c5e:	0c f0       	brlt	.+2      	; 0x2c62 <itoa+0x2c>
    2c60:	89 5d       	subi	r24, 0xD9	; 217
    2c62:	81 93       	st	Z+, r24
    2c64:	cb 01       	movw	r24, r22
    2c66:	00 97       	sbiw	r24, 0x00	; 0
    2c68:	a1 f7       	brne	.-24     	; 0x2c52 <itoa+0x1c>
    2c6a:	16 f4       	brtc	.+4      	; 0x2c70 <itoa+0x3a>
    2c6c:	5d e2       	ldi	r21, 0x2D	; 45
    2c6e:	51 93       	st	Z+, r21
    2c70:	10 82       	st	Z, r1
    2c72:	c9 01       	movw	r24, r18
    2c74:	0c 94 3c 16 	jmp	0x2c78	; 0x2c78 <strrev>

00002c78 <strrev>:
    2c78:	dc 01       	movw	r26, r24
    2c7a:	fc 01       	movw	r30, r24
    2c7c:	67 2f       	mov	r22, r23
    2c7e:	71 91       	ld	r23, Z+
    2c80:	77 23       	and	r23, r23
    2c82:	e1 f7       	brne	.-8      	; 0x2c7c <strrev+0x4>
    2c84:	32 97       	sbiw	r30, 0x02	; 2
    2c86:	04 c0       	rjmp	.+8      	; 0x2c90 <strrev+0x18>
    2c88:	7c 91       	ld	r23, X
    2c8a:	6d 93       	st	X+, r22
    2c8c:	70 83       	st	Z, r23
    2c8e:	62 91       	ld	r22, -Z
    2c90:	ae 17       	cp	r26, r30
    2c92:	bf 07       	cpc	r27, r31
    2c94:	c8 f3       	brcs	.-14     	; 0x2c88 <strrev+0x10>
    2c96:	08 95       	ret

00002c98 <__udivmodhi4>:
    2c98:	aa 1b       	sub	r26, r26
    2c9a:	bb 1b       	sub	r27, r27
    2c9c:	51 e1       	ldi	r21, 0x11	; 17
    2c9e:	07 c0       	rjmp	.+14     	; 0x2cae <__udivmodhi4_ep>

00002ca0 <__udivmodhi4_loop>:
    2ca0:	aa 1f       	adc	r26, r26
    2ca2:	bb 1f       	adc	r27, r27
    2ca4:	a6 17       	cp	r26, r22
    2ca6:	b7 07       	cpc	r27, r23
    2ca8:	10 f0       	brcs	.+4      	; 0x2cae <__udivmodhi4_ep>
    2caa:	a6 1b       	sub	r26, r22
    2cac:	b7 0b       	sbc	r27, r23

00002cae <__udivmodhi4_ep>:
    2cae:	88 1f       	adc	r24, r24
    2cb0:	99 1f       	adc	r25, r25
    2cb2:	5a 95       	dec	r21
    2cb4:	a9 f7       	brne	.-22     	; 0x2ca0 <__udivmodhi4_loop>
    2cb6:	80 95       	com	r24
    2cb8:	90 95       	com	r25
    2cba:	bc 01       	movw	r22, r24
    2cbc:	cd 01       	movw	r24, r26
    2cbe:	08 95       	ret

00002cc0 <_exit>:
    2cc0:	f8 94       	cli

00002cc2 <__stop_program>:
    2cc2:	ff cf       	rjmp	.-2      	; 0x2cc2 <__stop_program>

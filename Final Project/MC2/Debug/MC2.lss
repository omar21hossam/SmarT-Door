
MC2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002684  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000022  00800060  00002684  00002718  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000014  00800082  00800082  0000273a  2**0
                  ALLOC
  3 .stab         00002724  00000000  00000000  0000273c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000015c1  00000000  00000000  00004e60  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00006421  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00006561  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000066d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000831a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00009205  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00009fb4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000a114  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000a3a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000ab6f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 d4 0e 	jmp	0x1da8	; 0x1da8 <__vector_3>
      10:	0c 94 08 0e 	jmp	0x1c10	; 0x1c10 <__vector_4>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 6e 0e 	jmp	0x1cdc	; 0x1cdc <__vector_6>
      1c:	0c 94 a1 0e 	jmp	0x1d42	; 0x1d42 <__vector_7>
      20:	0c 94 d5 0d 	jmp	0x1baa	; 0x1baa <__vector_8>
      24:	0c 94 a2 0d 	jmp	0x1b44	; 0x1b44 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 3b 0e 	jmp	0x1c76	; 0x1c76 <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e8       	ldi	r30, 0x84	; 132
      68:	f6 e2       	ldi	r31, 0x26	; 38
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 38       	cpi	r26, 0x82	; 130
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a2 e8       	ldi	r26, 0x82	; 130
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 39       	cpi	r26, 0x96	; 150
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a3 05 	call	0xb46	; 0xb46 <main>
      8a:	0c 94 40 13 	jmp	0x2680	; 0x2680 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 09 13 	jmp	0x2612	; 0x2612 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 25 13 	jmp	0x264a	; 0x264a <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 15 13 	jmp	0x262a	; 0x262a <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 31 13 	jmp	0x2662	; 0x2662 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 15 13 	jmp	0x262a	; 0x262a <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 31 13 	jmp	0x2662	; 0x2662 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 09 13 	jmp	0x2612	; 0x2612 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 25 13 	jmp	0x264a	; 0x264a <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 15 13 	jmp	0x262a	; 0x262a <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 31 13 	jmp	0x2662	; 0x2662 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 15 13 	jmp	0x262a	; 0x262a <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 31 13 	jmp	0x2662	; 0x2662 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 15 13 	jmp	0x262a	; 0x262a <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 31 13 	jmp	0x2662	; 0x2662 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 19 13 	jmp	0x2632	; 0x2632 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 35 13 	jmp	0x266a	; 0x266a <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <main>:
void openDoor(void);
void buzzerOn(void);
void changeDoorState(void);
void changeSystemState(void);

int main(void){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	2e 97       	sbiw	r28, 0x0e	; 14
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
	UART_ConfigType config_uart = {BITS_8,DISABLED,BIT_1,9600};
     b5a:	9e 01       	movw	r18, r28
     b5c:	2f 5f       	subi	r18, 0xFF	; 255
     b5e:	3f 4f       	sbci	r19, 0xFF	; 255
     b60:	3b 87       	std	Y+11, r19	; 0x0b
     b62:	2a 87       	std	Y+10, r18	; 0x0a
     b64:	88 e6       	ldi	r24, 0x68	; 104
     b66:	90 e0       	ldi	r25, 0x00	; 0
     b68:	9d 87       	std	Y+13, r25	; 0x0d
     b6a:	8c 87       	std	Y+12, r24	; 0x0c
     b6c:	97 e0       	ldi	r25, 0x07	; 7
     b6e:	9e 87       	std	Y+14, r25	; 0x0e
     b70:	ec 85       	ldd	r30, Y+12	; 0x0c
     b72:	fd 85       	ldd	r31, Y+13	; 0x0d
     b74:	00 80       	ld	r0, Z
     b76:	2c 85       	ldd	r18, Y+12	; 0x0c
     b78:	3d 85       	ldd	r19, Y+13	; 0x0d
     b7a:	2f 5f       	subi	r18, 0xFF	; 255
     b7c:	3f 4f       	sbci	r19, 0xFF	; 255
     b7e:	3d 87       	std	Y+13, r19	; 0x0d
     b80:	2c 87       	std	Y+12, r18	; 0x0c
     b82:	ea 85       	ldd	r30, Y+10	; 0x0a
     b84:	fb 85       	ldd	r31, Y+11	; 0x0b
     b86:	00 82       	st	Z, r0
     b88:	2a 85       	ldd	r18, Y+10	; 0x0a
     b8a:	3b 85       	ldd	r19, Y+11	; 0x0b
     b8c:	2f 5f       	subi	r18, 0xFF	; 255
     b8e:	3f 4f       	sbci	r19, 0xFF	; 255
     b90:	3b 87       	std	Y+11, r19	; 0x0b
     b92:	2a 87       	std	Y+10, r18	; 0x0a
     b94:	3e 85       	ldd	r19, Y+14	; 0x0e
     b96:	31 50       	subi	r19, 0x01	; 1
     b98:	3e 87       	std	Y+14, r19	; 0x0e
     b9a:	8e 85       	ldd	r24, Y+14	; 0x0e
     b9c:	88 23       	and	r24, r24
     b9e:	41 f7       	brne	.-48     	; 0xb70 <main+0x2a>
		UART_init(&config_uart);
     ba0:	ce 01       	movw	r24, r28
     ba2:	01 96       	adiw	r24, 0x01	; 1
     ba4:	0e 94 b9 11 	call	0x2372	; 0x2372 <UART_init>

	UART_init(&config_uart);
     ba8:	ce 01       	movw	r24, r28
     baa:	01 96       	adiw	r24, 0x01	; 1
     bac:	0e 94 b9 11 	call	0x2372	; 0x2372 <UART_init>
	SREG |= (1<<7);
     bb0:	af e5       	ldi	r26, 0x5F	; 95
     bb2:	b0 e0       	ldi	r27, 0x00	; 0
     bb4:	ef e5       	ldi	r30, 0x5F	; 95
     bb6:	f0 e0       	ldi	r31, 0x00	; 0
     bb8:	80 81       	ld	r24, Z
     bba:	80 68       	ori	r24, 0x80	; 128
     bbc:	8c 93       	st	X, r24
	if(g_loginCounter == 0){
     bbe:	80 91 82 00 	lds	r24, 0x0082
     bc2:	88 23       	and	r24, r24
     bc4:	41 f4       	brne	.+16     	; 0xbd6 <main+0x90>
		g_systemState = NEW_PASSWORD;
     bc6:	10 92 94 00 	sts	0x0094, r1
		g_loginCounter++;
     bca:	80 91 82 00 	lds	r24, 0x0082
     bce:	8f 5f       	subi	r24, 0xFF	; 255
     bd0:	80 93 82 00 	sts	0x0082, r24
     bd4:	0a c0       	rjmp	.+20     	; 0xbea <main+0xa4>
		//////////////////// g_logincounter must be saved in eeprom//////////////////////
	}
	else{
		g_systemState = VIEW_OPTIONS;
     bd6:	83 e0       	ldi	r24, 0x03	; 3
     bd8:	80 93 94 00 	sts	0x0094, r24
		EEPROM_readString(PASSWORD_ADDRESS,g_password);
     bdc:	2c e8       	ldi	r18, 0x8C	; 140
     bde:	30 e0       	ldi	r19, 0x00	; 0
     be0:	84 e0       	ldi	r24, 0x04	; 4
     be2:	90 e0       	ldi	r25, 0x00	; 0
     be4:	b9 01       	movw	r22, r18
     be6:	0e 94 14 09 	call	0x1228	; 0x1228 <EEPROM_readString>
	}
	while(1)
	{while(UART_receiveByte() !=MC1_READY);
     bea:	0e 94 6c 12 	call	0x24d8	; 0x24d8 <UART_receiveByte>
     bee:	80 31       	cpi	r24, 0x10	; 16
     bf0:	e1 f7       	brne	.-8      	; 0xbea <main+0xa4>
	UART_sendByte(g_systemState);
     bf2:	80 91 94 00 	lds	r24, 0x0094
     bf6:	0e 94 55 12 	call	0x24aa	; 0x24aa <UART_sendByte>
	switch(g_systemState){
     bfa:	80 91 94 00 	lds	r24, 0x0094
     bfe:	e8 2f       	mov	r30, r24
     c00:	f0 e0       	ldi	r31, 0x00	; 0
     c02:	f9 87       	std	Y+9, r31	; 0x09
     c04:	e8 87       	std	Y+8, r30	; 0x08
     c06:	28 85       	ldd	r18, Y+8	; 0x08
     c08:	39 85       	ldd	r19, Y+9	; 0x09
     c0a:	22 30       	cpi	r18, 0x02	; 2
     c0c:	31 05       	cpc	r19, r1
     c0e:	d9 f1       	breq	.+118    	; 0xc86 <main+0x140>
     c10:	88 85       	ldd	r24, Y+8	; 0x08
     c12:	99 85       	ldd	r25, Y+9	; 0x09
     c14:	83 30       	cpi	r24, 0x03	; 3
     c16:	91 05       	cpc	r25, r1
     c18:	54 f4       	brge	.+20     	; 0xc2e <main+0xe8>
     c1a:	e8 85       	ldd	r30, Y+8	; 0x08
     c1c:	f9 85       	ldd	r31, Y+9	; 0x09
     c1e:	30 97       	sbiw	r30, 0x00	; 0
     c20:	89 f0       	breq	.+34     	; 0xc44 <main+0xfe>
     c22:	28 85       	ldd	r18, Y+8	; 0x08
     c24:	39 85       	ldd	r19, Y+9	; 0x09
     c26:	21 30       	cpi	r18, 0x01	; 1
     c28:	31 05       	cpc	r19, r1
     c2a:	a9 f1       	breq	.+106    	; 0xc96 <main+0x150>
     c2c:	de cf       	rjmp	.-68     	; 0xbea <main+0xa4>
     c2e:	88 85       	ldd	r24, Y+8	; 0x08
     c30:	99 85       	ldd	r25, Y+9	; 0x09
     c32:	83 30       	cpi	r24, 0x03	; 3
     c34:	91 05       	cpc	r25, r1
     c36:	c1 f0       	breq	.+48     	; 0xc68 <main+0x122>
     c38:	e8 85       	ldd	r30, Y+8	; 0x08
     c3a:	f9 85       	ldd	r31, Y+9	; 0x09
     c3c:	e4 30       	cpi	r30, 0x04	; 4
     c3e:	f1 05       	cpc	r31, r1
     c40:	91 f1       	breq	.+100    	; 0xca6 <main+0x160>
     c42:	d3 cf       	rjmp	.-90     	; 0xbea <main+0xa4>
	case NEW_PASSWORD:
		UART_sendByte(MC2_READY);
     c44:	80 e1       	ldi	r24, 0x10	; 16
     c46:	0e 94 55 12 	call	0x24aa	; 0x24aa <UART_sendByte>
		UART_receiveString(g_password);
     c4a:	8c e8       	ldi	r24, 0x8C	; 140
     c4c:	90 e0       	ldi	r25, 0x00	; 0
     c4e:	0e 94 a4 12 	call	0x2548	; 0x2548 <UART_receiveString>
		EEPROM_writeString(PASSWORD_ADDRESS,g_password);
     c52:	2c e8       	ldi	r18, 0x8C	; 140
     c54:	30 e0       	ldi	r19, 0x00	; 0
     c56:	84 e0       	ldi	r24, 0x04	; 4
     c58:	90 e0       	ldi	r25, 0x00	; 0
     c5a:	b9 01       	movw	r22, r18
     c5c:	0e 94 e6 08 	call	0x11cc	; 0x11cc <EEPROM_writeString>
		g_systemState = VIEW_OPTIONS;
     c60:	83 e0       	ldi	r24, 0x03	; 3
     c62:	80 93 94 00 	sts	0x0094, r24
     c66:	c1 cf       	rjmp	.-126    	; 0xbea <main+0xa4>
		break;
	case VIEW_OPTIONS:
		UART_sendByte(MC2_READY);
     c68:	80 e1       	ldi	r24, 0x10	; 16
     c6a:	0e 94 55 12 	call	0x24aa	; 0x24aa <UART_sendByte>
		if(UART_receiveByte() == OPEN_DOOR){
     c6e:	0e 94 6c 12 	call	0x24d8	; 0x24d8 <UART_receiveByte>
     c72:	86 30       	cpi	r24, 0x06	; 6
     c74:	21 f4       	brne	.+8      	; 0xc7e <main+0x138>
			g_systemState =CHECK_PASSWORD_FOR_OPEN_DOOR;
     c76:	82 e0       	ldi	r24, 0x02	; 2
     c78:	80 93 94 00 	sts	0x0094, r24
     c7c:	b6 cf       	rjmp	.-148    	; 0xbea <main+0xa4>
		}
		else{
			g_systemState = CHECK_PASSWORD_FOR_NEW_PASSWORD;
     c7e:	81 e0       	ldi	r24, 0x01	; 1
     c80:	80 93 94 00 	sts	0x0094, r24
     c84:	b2 cf       	rjmp	.-156    	; 0xbea <main+0xa4>
		}
		break;
	case CHECK_PASSWORD_FOR_OPEN_DOOR:
		if(checkPassword() == SUCCESS){
     c86:	0e 94 56 06 	call	0xcac	; 0xcac <checkPassword>
     c8a:	81 30       	cpi	r24, 0x01	; 1
     c8c:	09 f0       	breq	.+2      	; 0xc90 <main+0x14a>
     c8e:	ad cf       	rjmp	.-166    	; 0xbea <main+0xa4>
			openDoor();
     c90:	0e 94 b4 06 	call	0xd68	; 0xd68 <openDoor>
     c94:	aa cf       	rjmp	.-172    	; 0xbea <main+0xa4>
		}
		break;
	case CHECK_PASSWORD_FOR_NEW_PASSWORD:
		if(checkPassword() == SUCCESS){
     c96:	0e 94 56 06 	call	0xcac	; 0xcac <checkPassword>
     c9a:	81 30       	cpi	r24, 0x01	; 1
     c9c:	09 f0       	breq	.+2      	; 0xca0 <main+0x15a>
     c9e:	a5 cf       	rjmp	.-182    	; 0xbea <main+0xa4>
			g_systemState = NEW_PASSWORD;
     ca0:	10 92 94 00 	sts	0x0094, r1
     ca4:	a2 cf       	rjmp	.-188    	; 0xbea <main+0xa4>
		}
		break;
	case BUZZER_ON:
		buzzerOn();
     ca6:	0e 94 31 07 	call	0xe62	; 0xe62 <buzzerOn>
     caa:	9f cf       	rjmp	.-194    	; 0xbea <main+0xa4>

00000cac <checkPassword>:
}

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
uint8 checkPassword(void){
     cac:	df 93       	push	r29
     cae:	cf 93       	push	r28
     cb0:	cd b7       	in	r28, 0x3d	; 61
     cb2:	de b7       	in	r29, 0x3e	; 62
     cb4:	2a 97       	sbiw	r28, 0x0a	; 10
     cb6:	0f b6       	in	r0, 0x3f	; 63
     cb8:	f8 94       	cli
     cba:	de bf       	out	0x3e, r29	; 62
     cbc:	0f be       	out	0x3f, r0	; 63
     cbe:	cd bf       	out	0x3d, r28	; 61
	static uint8 fail_time=0;
	uint8 passCounter;
	uint8 userpassword[8];
	UART_sendByte(MC2_READY);
     cc0:	80 e1       	ldi	r24, 0x10	; 16
     cc2:	0e 94 55 12 	call	0x24aa	; 0x24aa <UART_sendByte>
	UART_receiveString(userpassword);
     cc6:	ce 01       	movw	r24, r28
     cc8:	02 96       	adiw	r24, 0x02	; 2
     cca:	0e 94 a4 12 	call	0x2548	; 0x2548 <UART_receiveString>
	EEPROM_readString(PASSWORD_ADDRESS,g_password);
     cce:	2c e8       	ldi	r18, 0x8C	; 140
     cd0:	30 e0       	ldi	r19, 0x00	; 0
     cd2:	84 e0       	ldi	r24, 0x04	; 4
     cd4:	90 e0       	ldi	r25, 0x00	; 0
     cd6:	b9 01       	movw	r22, r18
     cd8:	0e 94 14 09 	call	0x1228	; 0x1228 <EEPROM_readString>
	for(passCounter = 0;passCounter < 6;passCounter++){
     cdc:	19 82       	std	Y+1, r1	; 0x01
     cde:	2c c0       	rjmp	.+88     	; 0xd38 <checkPassword+0x8c>
		if(g_password[passCounter] != userpassword[passCounter])
     ce0:	89 81       	ldd	r24, Y+1	; 0x01
     ce2:	88 2f       	mov	r24, r24
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	fc 01       	movw	r30, r24
     ce8:	e4 57       	subi	r30, 0x74	; 116
     cea:	ff 4f       	sbci	r31, 0xFF	; 255
     cec:	40 81       	ld	r20, Z
     cee:	89 81       	ldd	r24, Y+1	; 0x01
     cf0:	28 2f       	mov	r18, r24
     cf2:	30 e0       	ldi	r19, 0x00	; 0
     cf4:	ce 01       	movw	r24, r28
     cf6:	02 96       	adiw	r24, 0x02	; 2
     cf8:	fc 01       	movw	r30, r24
     cfa:	e2 0f       	add	r30, r18
     cfc:	f3 1f       	adc	r31, r19
     cfe:	80 81       	ld	r24, Z
     d00:	48 17       	cp	r20, r24
     d02:	b9 f0       	breq	.+46     	; 0xd32 <checkPassword+0x86>
		{
			fail_time++;
     d04:	80 91 83 00 	lds	r24, 0x0083
     d08:	8f 5f       	subi	r24, 0xFF	; 255
     d0a:	80 93 83 00 	sts	0x0083, r24
			while(UART_receiveByte()!= MC1_READY);
     d0e:	0e 94 6c 12 	call	0x24d8	; 0x24d8 <UART_receiveByte>
     d12:	80 31       	cpi	r24, 0x10	; 16
     d14:	e1 f7       	brne	.-8      	; 0xd0e <checkPassword+0x62>
			UART_sendByte(WRONG_PASSWORD);
     d16:	8b e0       	ldi	r24, 0x0B	; 11
     d18:	0e 94 55 12 	call	0x24aa	; 0x24aa <UART_sendByte>
			if(fail_time == 3)
     d1c:	80 91 83 00 	lds	r24, 0x0083
     d20:	83 30       	cpi	r24, 0x03	; 3
     d22:	29 f4       	brne	.+10     	; 0xd2e <checkPassword+0x82>
			{
				g_systemState = BUZZER_ON;
     d24:	84 e0       	ldi	r24, 0x04	; 4
     d26:	80 93 94 00 	sts	0x0094, r24
				fail_time = 0;
     d2a:	10 92 83 00 	sts	0x0083, r1
			}
			return FAILURE;
     d2e:	1a 86       	std	Y+10, r1	; 0x0a
     d30:	11 c0       	rjmp	.+34     	; 0xd54 <checkPassword+0xa8>
	uint8 passCounter;
	uint8 userpassword[8];
	UART_sendByte(MC2_READY);
	UART_receiveString(userpassword);
	EEPROM_readString(PASSWORD_ADDRESS,g_password);
	for(passCounter = 0;passCounter < 6;passCounter++){
     d32:	89 81       	ldd	r24, Y+1	; 0x01
     d34:	8f 5f       	subi	r24, 0xFF	; 255
     d36:	89 83       	std	Y+1, r24	; 0x01
     d38:	89 81       	ldd	r24, Y+1	; 0x01
     d3a:	86 30       	cpi	r24, 0x06	; 6
     d3c:	88 f2       	brcs	.-94     	; 0xce0 <checkPassword+0x34>
			}
			return FAILURE;

		}
	}
	while(UART_receiveByte()!= MC1_READY);
     d3e:	0e 94 6c 12 	call	0x24d8	; 0x24d8 <UART_receiveByte>
     d42:	80 31       	cpi	r24, 0x10	; 16
     d44:	e1 f7       	brne	.-8      	; 0xd3e <checkPassword+0x92>
	UART_sendByte(CORRECT_PASSWORD);
     d46:	8c e0       	ldi	r24, 0x0C	; 12
     d48:	0e 94 55 12 	call	0x24aa	; 0x24aa <UART_sendByte>
	fail_time = 0;
     d4c:	10 92 83 00 	sts	0x0083, r1
	return SUCCESS;
     d50:	81 e0       	ldi	r24, 0x01	; 1
     d52:	8a 87       	std	Y+10, r24	; 0x0a
     d54:	8a 85       	ldd	r24, Y+10	; 0x0a
}
     d56:	2a 96       	adiw	r28, 0x0a	; 10
     d58:	0f b6       	in	r0, 0x3f	; 63
     d5a:	f8 94       	cli
     d5c:	de bf       	out	0x3e, r29	; 62
     d5e:	0f be       	out	0x3f, r0	; 63
     d60:	cd bf       	out	0x3d, r28	; 61
     d62:	cf 91       	pop	r28
     d64:	df 91       	pop	r29
     d66:	08 95       	ret

00000d68 <openDoor>:

void openDoor(void){
     d68:	df 93       	push	r29
     d6a:	cf 93       	push	r28
     d6c:	cd b7       	in	r28, 0x3d	; 61
     d6e:	de b7       	in	r29, 0x3e	; 62
     d70:	2e 97       	sbiw	r28, 0x0e	; 14
     d72:	0f b6       	in	r0, 0x3f	; 63
     d74:	f8 94       	cli
     d76:	de bf       	out	0x3e, r29	; 62
     d78:	0f be       	out	0x3f, r0	; 63
     d7a:	cd bf       	out	0x3d, r28	; 61
	DcMotor_Init();
     d7c:	0e 94 38 0d 	call	0x1a70	; 0x1a70 <DcMotor_Init>
	TIMER_setCallBackT1(changeDoorState);
     d80:	89 ee       	ldi	r24, 0xE9	; 233
     d82:	97 e0       	ldi	r25, 0x07	; 7
     d84:	0e 94 3a 11 	call	0x2274	; 0x2274 <TIMER_setCallBackT1>
	TIMER_ConfigType timer1_config = {TIMER1,COMPARE,F_CPU_1024,OCN_DISCONNECTED,COMPARE_A,0,4000};
     d88:	ce 01       	movw	r24, r28
     d8a:	01 96       	adiw	r24, 0x01	; 1
     d8c:	9b 87       	std	Y+11, r25	; 0x0b
     d8e:	8a 87       	std	Y+10, r24	; 0x0a
     d90:	ef e6       	ldi	r30, 0x6F	; 111
     d92:	f0 e0       	ldi	r31, 0x00	; 0
     d94:	fd 87       	std	Y+13, r31	; 0x0d
     d96:	ec 87       	std	Y+12, r30	; 0x0c
     d98:	f9 e0       	ldi	r31, 0x09	; 9
     d9a:	fe 87       	std	Y+14, r31	; 0x0e
     d9c:	ec 85       	ldd	r30, Y+12	; 0x0c
     d9e:	fd 85       	ldd	r31, Y+13	; 0x0d
     da0:	00 80       	ld	r0, Z
     da2:	8c 85       	ldd	r24, Y+12	; 0x0c
     da4:	9d 85       	ldd	r25, Y+13	; 0x0d
     da6:	01 96       	adiw	r24, 0x01	; 1
     da8:	9d 87       	std	Y+13, r25	; 0x0d
     daa:	8c 87       	std	Y+12, r24	; 0x0c
     dac:	ea 85       	ldd	r30, Y+10	; 0x0a
     dae:	fb 85       	ldd	r31, Y+11	; 0x0b
     db0:	00 82       	st	Z, r0
     db2:	8a 85       	ldd	r24, Y+10	; 0x0a
     db4:	9b 85       	ldd	r25, Y+11	; 0x0b
     db6:	01 96       	adiw	r24, 0x01	; 1
     db8:	9b 87       	std	Y+11, r25	; 0x0b
     dba:	8a 87       	std	Y+10, r24	; 0x0a
     dbc:	9e 85       	ldd	r25, Y+14	; 0x0e
     dbe:	91 50       	subi	r25, 0x01	; 1
     dc0:	9e 87       	std	Y+14, r25	; 0x0e
     dc2:	ee 85       	ldd	r30, Y+14	; 0x0e
     dc4:	ee 23       	and	r30, r30
     dc6:	51 f7       	brne	.-44     	; 0xd9c <openDoor+0x34>
	TIMER_init(&timer1_config);
     dc8:	ce 01       	movw	r24, r28
     dca:	01 96       	adiw	r24, 0x01	; 1
     dcc:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <TIMER_init>
	g_doorState = UNLOCKING;
     dd0:	87 e0       	ldi	r24, 0x07	; 7
     dd2:	80 93 95 00 	sts	0x0095, r24
	while(UART_receiveByte() != MC1_READY);
     dd6:	0e 94 6c 12 	call	0x24d8	; 0x24d8 <UART_receiveByte>
     dda:	80 31       	cpi	r24, 0x10	; 16
     ddc:	e1 f7       	brne	.-8      	; 0xdd6 <openDoor+0x6e>
	UART_sendByte(OPEN_DOOR);
     dde:	86 e0       	ldi	r24, 0x06	; 6
     de0:	0e 94 55 12 	call	0x24aa	; 0x24aa <UART_sendByte>
	while(UART_receiveByte() != MC1_READY);
     de4:	0e 94 6c 12 	call	0x24d8	; 0x24d8 <UART_receiveByte>
     de8:	80 31       	cpi	r24, 0x10	; 16
     dea:	e1 f7       	brne	.-8      	; 0xde4 <openDoor+0x7c>
	UART_sendByte(g_doorState);
     dec:	80 91 95 00 	lds	r24, 0x0095
     df0:	0e 94 55 12 	call	0x24aa	; 0x24aa <UART_sendByte>
	DcMotor_Rotate(CW);
     df4:	81 e0       	ldi	r24, 0x01	; 1
     df6:	0e 94 5d 0d 	call	0x1aba	; 0x1aba <DcMotor_Rotate>
	while(g_doorState == UNLOCKING);
     dfa:	80 91 95 00 	lds	r24, 0x0095
     dfe:	87 30       	cpi	r24, 0x07	; 7
     e00:	e1 f3       	breq	.-8      	; 0xdfa <openDoor+0x92>
	DcMotor_Rotate(STOP);
     e02:	80 e0       	ldi	r24, 0x00	; 0
     e04:	0e 94 5d 0d 	call	0x1aba	; 0x1aba <DcMotor_Rotate>
	while(UART_receiveByte() != MC1_READY);
     e08:	0e 94 6c 12 	call	0x24d8	; 0x24d8 <UART_receiveByte>
     e0c:	80 31       	cpi	r24, 0x10	; 16
     e0e:	e1 f7       	brne	.-8      	; 0xe08 <openDoor+0xa0>
	UART_sendByte(g_doorState);
     e10:	80 91 95 00 	lds	r24, 0x0095
     e14:	0e 94 55 12 	call	0x24aa	; 0x24aa <UART_sendByte>
	while(g_doorState == OPENED);
     e18:	80 91 95 00 	lds	r24, 0x0095
     e1c:	89 30       	cpi	r24, 0x09	; 9
     e1e:	e1 f3       	breq	.-8      	; 0xe18 <openDoor+0xb0>
	while(UART_receiveByte() != MC1_READY);
     e20:	0e 94 6c 12 	call	0x24d8	; 0x24d8 <UART_receiveByte>
     e24:	80 31       	cpi	r24, 0x10	; 16
     e26:	e1 f7       	brne	.-8      	; 0xe20 <openDoor+0xb8>
	UART_sendByte(g_doorState);
     e28:	80 91 95 00 	lds	r24, 0x0095
     e2c:	0e 94 55 12 	call	0x24aa	; 0x24aa <UART_sendByte>
	DcMotor_Rotate(A_CW);
     e30:	82 e0       	ldi	r24, 0x02	; 2
     e32:	0e 94 5d 0d 	call	0x1aba	; 0x1aba <DcMotor_Rotate>
	while(g_doorState == LOCKING);
     e36:	80 91 95 00 	lds	r24, 0x0095
     e3a:	88 30       	cpi	r24, 0x08	; 8
     e3c:	e1 f3       	breq	.-8      	; 0xe36 <openDoor+0xce>
	DcMotor_Rotate(STOP);
     e3e:	80 e0       	ldi	r24, 0x00	; 0
     e40:	0e 94 5d 0d 	call	0x1aba	; 0x1aba <DcMotor_Rotate>
	TIMER_DeInit(TIMER1);
     e44:	81 e0       	ldi	r24, 0x01	; 1
     e46:	0e 94 5e 11 	call	0x22bc	; 0x22bc <TIMER_DeInit>
	g_systemState = VIEW_OPTIONS;
     e4a:	83 e0       	ldi	r24, 0x03	; 3
     e4c:	80 93 94 00 	sts	0x0094, r24
}
     e50:	2e 96       	adiw	r28, 0x0e	; 14
     e52:	0f b6       	in	r0, 0x3f	; 63
     e54:	f8 94       	cli
     e56:	de bf       	out	0x3e, r29	; 62
     e58:	0f be       	out	0x3f, r0	; 63
     e5a:	cd bf       	out	0x3d, r28	; 61
     e5c:	cf 91       	pop	r28
     e5e:	df 91       	pop	r29
     e60:	08 95       	ret

00000e62 <buzzerOn>:

void buzzerOn(void){
     e62:	df 93       	push	r29
     e64:	cf 93       	push	r28
     e66:	cd b7       	in	r28, 0x3d	; 61
     e68:	de b7       	in	r29, 0x3e	; 62
     e6a:	6c 97       	sbiw	r28, 0x1c	; 28
     e6c:	0f b6       	in	r0, 0x3f	; 63
     e6e:	f8 94       	cli
     e70:	de bf       	out	0x3e, r29	; 62
     e72:	0f be       	out	0x3f, r0	; 63
     e74:	cd bf       	out	0x3d, r28	; 61
	BUZZER_on();
     e76:	0e 94 2d 08 	call	0x105a	; 0x105a <BUZZER_on>
	TIMER_setCallBackT1(changeSystemState);
     e7a:	8e e0       	ldi	r24, 0x0E	; 14
     e7c:	98 e0       	ldi	r25, 0x08	; 8
     e7e:	0e 94 3a 11 	call	0x2274	; 0x2274 <TIMER_setCallBackT1>
	TIMER_ConfigType timer1_config = {TIMER1,COMPARE,F_CPU_1024,OCN_DISCONNECTED,COMPARE_A,0,4000};
     e82:	ce 01       	movw	r24, r28
     e84:	0f 96       	adiw	r24, 0x0f	; 15
     e86:	99 8f       	std	Y+25, r25	; 0x19
     e88:	88 8f       	std	Y+24, r24	; 0x18
     e8a:	e8 e7       	ldi	r30, 0x78	; 120
     e8c:	f0 e0       	ldi	r31, 0x00	; 0
     e8e:	fb 8f       	std	Y+27, r31	; 0x1b
     e90:	ea 8f       	std	Y+26, r30	; 0x1a
     e92:	f9 e0       	ldi	r31, 0x09	; 9
     e94:	fc 8f       	std	Y+28, r31	; 0x1c
     e96:	ea 8d       	ldd	r30, Y+26	; 0x1a
     e98:	fb 8d       	ldd	r31, Y+27	; 0x1b
     e9a:	00 80       	ld	r0, Z
     e9c:	8a 8d       	ldd	r24, Y+26	; 0x1a
     e9e:	9b 8d       	ldd	r25, Y+27	; 0x1b
     ea0:	01 96       	adiw	r24, 0x01	; 1
     ea2:	9b 8f       	std	Y+27, r25	; 0x1b
     ea4:	8a 8f       	std	Y+26, r24	; 0x1a
     ea6:	e8 8d       	ldd	r30, Y+24	; 0x18
     ea8:	f9 8d       	ldd	r31, Y+25	; 0x19
     eaa:	00 82       	st	Z, r0
     eac:	88 8d       	ldd	r24, Y+24	; 0x18
     eae:	99 8d       	ldd	r25, Y+25	; 0x19
     eb0:	01 96       	adiw	r24, 0x01	; 1
     eb2:	99 8f       	std	Y+25, r25	; 0x19
     eb4:	88 8f       	std	Y+24, r24	; 0x18
     eb6:	9c 8d       	ldd	r25, Y+28	; 0x1c
     eb8:	91 50       	subi	r25, 0x01	; 1
     eba:	9c 8f       	std	Y+28, r25	; 0x1c
     ebc:	ec 8d       	ldd	r30, Y+28	; 0x1c
     ebe:	ee 23       	and	r30, r30
     ec0:	51 f7       	brne	.-44     	; 0xe96 <buzzerOn+0x34>
	TIMER_init(&timer1_config);
     ec2:	ce 01       	movw	r24, r28
     ec4:	0f 96       	adiw	r24, 0x0f	; 15
     ec6:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <TIMER_init>
     eca:	80 e0       	ldi	r24, 0x00	; 0
     ecc:	90 e0       	ldi	r25, 0x00	; 0
     ece:	a8 ec       	ldi	r26, 0xC8	; 200
     ed0:	b2 e4       	ldi	r27, 0x42	; 66
     ed2:	8b 87       	std	Y+11, r24	; 0x0b
     ed4:	9c 87       	std	Y+12, r25	; 0x0c
     ed6:	ad 87       	std	Y+13, r26	; 0x0d
     ed8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     eda:	6b 85       	ldd	r22, Y+11	; 0x0b
     edc:	7c 85       	ldd	r23, Y+12	; 0x0c
     ede:	8d 85       	ldd	r24, Y+13	; 0x0d
     ee0:	9e 85       	ldd	r25, Y+14	; 0x0e
     ee2:	20 e0       	ldi	r18, 0x00	; 0
     ee4:	30 e0       	ldi	r19, 0x00	; 0
     ee6:	4a ef       	ldi	r20, 0xFA	; 250
     ee8:	54 e4       	ldi	r21, 0x44	; 68
     eea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     eee:	dc 01       	movw	r26, r24
     ef0:	cb 01       	movw	r24, r22
     ef2:	8f 83       	std	Y+7, r24	; 0x07
     ef4:	98 87       	std	Y+8, r25	; 0x08
     ef6:	a9 87       	std	Y+9, r26	; 0x09
     ef8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     efa:	6f 81       	ldd	r22, Y+7	; 0x07
     efc:	78 85       	ldd	r23, Y+8	; 0x08
     efe:	89 85       	ldd	r24, Y+9	; 0x09
     f00:	9a 85       	ldd	r25, Y+10	; 0x0a
     f02:	20 e0       	ldi	r18, 0x00	; 0
     f04:	30 e0       	ldi	r19, 0x00	; 0
     f06:	40 e8       	ldi	r20, 0x80	; 128
     f08:	5f e3       	ldi	r21, 0x3F	; 63
     f0a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f0e:	88 23       	and	r24, r24
     f10:	2c f4       	brge	.+10     	; 0xf1c <buzzerOn+0xba>
		__ticks = 1;
     f12:	81 e0       	ldi	r24, 0x01	; 1
     f14:	90 e0       	ldi	r25, 0x00	; 0
     f16:	9e 83       	std	Y+6, r25	; 0x06
     f18:	8d 83       	std	Y+5, r24	; 0x05
     f1a:	3f c0       	rjmp	.+126    	; 0xf9a <buzzerOn+0x138>
	else if (__tmp > 65535)
     f1c:	6f 81       	ldd	r22, Y+7	; 0x07
     f1e:	78 85       	ldd	r23, Y+8	; 0x08
     f20:	89 85       	ldd	r24, Y+9	; 0x09
     f22:	9a 85       	ldd	r25, Y+10	; 0x0a
     f24:	20 e0       	ldi	r18, 0x00	; 0
     f26:	3f ef       	ldi	r19, 0xFF	; 255
     f28:	4f e7       	ldi	r20, 0x7F	; 127
     f2a:	57 e4       	ldi	r21, 0x47	; 71
     f2c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f30:	18 16       	cp	r1, r24
     f32:	4c f5       	brge	.+82     	; 0xf86 <buzzerOn+0x124>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f34:	6b 85       	ldd	r22, Y+11	; 0x0b
     f36:	7c 85       	ldd	r23, Y+12	; 0x0c
     f38:	8d 85       	ldd	r24, Y+13	; 0x0d
     f3a:	9e 85       	ldd	r25, Y+14	; 0x0e
     f3c:	20 e0       	ldi	r18, 0x00	; 0
     f3e:	30 e0       	ldi	r19, 0x00	; 0
     f40:	40 e2       	ldi	r20, 0x20	; 32
     f42:	51 e4       	ldi	r21, 0x41	; 65
     f44:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f48:	dc 01       	movw	r26, r24
     f4a:	cb 01       	movw	r24, r22
     f4c:	bc 01       	movw	r22, r24
     f4e:	cd 01       	movw	r24, r26
     f50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f54:	dc 01       	movw	r26, r24
     f56:	cb 01       	movw	r24, r22
     f58:	9e 83       	std	Y+6, r25	; 0x06
     f5a:	8d 83       	std	Y+5, r24	; 0x05
     f5c:	0f c0       	rjmp	.+30     	; 0xf7c <buzzerOn+0x11a>
     f5e:	88 ec       	ldi	r24, 0xC8	; 200
     f60:	90 e0       	ldi	r25, 0x00	; 0
     f62:	9c 83       	std	Y+4, r25	; 0x04
     f64:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     f66:	8b 81       	ldd	r24, Y+3	; 0x03
     f68:	9c 81       	ldd	r25, Y+4	; 0x04
     f6a:	01 97       	sbiw	r24, 0x01	; 1
     f6c:	f1 f7       	brne	.-4      	; 0xf6a <buzzerOn+0x108>
     f6e:	9c 83       	std	Y+4, r25	; 0x04
     f70:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f72:	8d 81       	ldd	r24, Y+5	; 0x05
     f74:	9e 81       	ldd	r25, Y+6	; 0x06
     f76:	01 97       	sbiw	r24, 0x01	; 1
     f78:	9e 83       	std	Y+6, r25	; 0x06
     f7a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f7c:	8d 81       	ldd	r24, Y+5	; 0x05
     f7e:	9e 81       	ldd	r25, Y+6	; 0x06
     f80:	00 97       	sbiw	r24, 0x00	; 0
     f82:	69 f7       	brne	.-38     	; 0xf5e <buzzerOn+0xfc>
     f84:	14 c0       	rjmp	.+40     	; 0xfae <buzzerOn+0x14c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f86:	6f 81       	ldd	r22, Y+7	; 0x07
     f88:	78 85       	ldd	r23, Y+8	; 0x08
     f8a:	89 85       	ldd	r24, Y+9	; 0x09
     f8c:	9a 85       	ldd	r25, Y+10	; 0x0a
     f8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f92:	dc 01       	movw	r26, r24
     f94:	cb 01       	movw	r24, r22
     f96:	9e 83       	std	Y+6, r25	; 0x06
     f98:	8d 83       	std	Y+5, r24	; 0x05
     f9a:	8d 81       	ldd	r24, Y+5	; 0x05
     f9c:	9e 81       	ldd	r25, Y+6	; 0x06
     f9e:	9a 83       	std	Y+2, r25	; 0x02
     fa0:	89 83       	std	Y+1, r24	; 0x01
     fa2:	89 81       	ldd	r24, Y+1	; 0x01
     fa4:	9a 81       	ldd	r25, Y+2	; 0x02
     fa6:	01 97       	sbiw	r24, 0x01	; 1
     fa8:	f1 f7       	brne	.-4      	; 0xfa6 <buzzerOn+0x144>
     faa:	9a 83       	std	Y+2, r25	; 0x02
     fac:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(100);
	//g_systemState = VIEW_OPTIONS;
	while(g_systemState == BUZZER_ON);
     fae:	80 91 94 00 	lds	r24, 0x0094
     fb2:	84 30       	cpi	r24, 0x04	; 4
     fb4:	e1 f3       	breq	.-8      	; 0xfae <buzzerOn+0x14c>
	BUZZER_off();
     fb6:	0e 94 39 08 	call	0x1072	; 0x1072 <BUZZER_off>
	TIMER_DeInit(TIMER1);
     fba:	81 e0       	ldi	r24, 0x01	; 1
     fbc:	0e 94 5e 11 	call	0x22bc	; 0x22bc <TIMER_DeInit>
}
     fc0:	6c 96       	adiw	r28, 0x1c	; 28
     fc2:	0f b6       	in	r0, 0x3f	; 63
     fc4:	f8 94       	cli
     fc6:	de bf       	out	0x3e, r29	; 62
     fc8:	0f be       	out	0x3f, r0	; 63
     fca:	cd bf       	out	0x3d, r28	; 61
     fcc:	cf 91       	pop	r28
     fce:	df 91       	pop	r29
     fd0:	08 95       	ret

00000fd2 <changeDoorState>:

void changeDoorState(void){
     fd2:	df 93       	push	r29
     fd4:	cf 93       	push	r28
     fd6:	cd b7       	in	r28, 0x3d	; 61
     fd8:	de b7       	in	r29, 0x3e	; 62
	static uint8 ticks = 0;
	ticks++;
     fda:	80 91 84 00 	lds	r24, 0x0084
     fde:	8f 5f       	subi	r24, 0xFF	; 255
     fe0:	80 93 84 00 	sts	0x0084, r24
	if(ticks == 15)
     fe4:	80 91 84 00 	lds	r24, 0x0084
     fe8:	8f 30       	cpi	r24, 0x0F	; 15
     fea:	21 f4       	brne	.+8      	; 0xff4 <changeDoorState+0x22>
	{
		g_doorState = OPENED;
     fec:	89 e0       	ldi	r24, 0x09	; 9
     fee:	80 93 95 00 	sts	0x0095, r24
     ff2:	11 c0       	rjmp	.+34     	; 0x1016 <changeDoorState+0x44>
	}
	else if(ticks == 18)
     ff4:	80 91 84 00 	lds	r24, 0x0084
     ff8:	82 31       	cpi	r24, 0x12	; 18
     ffa:	21 f4       	brne	.+8      	; 0x1004 <changeDoorState+0x32>
	{
		g_doorState = LOCKING;
     ffc:	88 e0       	ldi	r24, 0x08	; 8
     ffe:	80 93 95 00 	sts	0x0095, r24
    1002:	09 c0       	rjmp	.+18     	; 0x1016 <changeDoorState+0x44>
	}
	else if(ticks == 33){
    1004:	80 91 84 00 	lds	r24, 0x0084
    1008:	81 32       	cpi	r24, 0x21	; 33
    100a:	29 f4       	brne	.+10     	; 0x1016 <changeDoorState+0x44>
		g_doorState = CLOSED;
    100c:	8a e0       	ldi	r24, 0x0A	; 10
    100e:	80 93 95 00 	sts	0x0095, r24
		ticks = 0;
    1012:	10 92 84 00 	sts	0x0084, r1
	}
}
    1016:	cf 91       	pop	r28
    1018:	df 91       	pop	r29
    101a:	08 95       	ret

0000101c <changeSystemState>:

void changeSystemState(void){
    101c:	df 93       	push	r29
    101e:	cf 93       	push	r28
    1020:	cd b7       	in	r28, 0x3d	; 61
    1022:	de b7       	in	r29, 0x3e	; 62
	static uint8 ticks1 =0;
	ticks1++;
    1024:	80 91 85 00 	lds	r24, 0x0085
    1028:	8f 5f       	subi	r24, 0xFF	; 255
    102a:	80 93 85 00 	sts	0x0085, r24
	if(ticks1 == 60)
    102e:	80 91 85 00 	lds	r24, 0x0085
    1032:	8c 33       	cpi	r24, 0x3C	; 60
    1034:	19 f4       	brne	.+6      	; 0x103c <changeSystemState+0x20>
	{g_systemState = VIEW_OPTIONS;}
    1036:	83 e0       	ldi	r24, 0x03	; 3
    1038:	80 93 94 00 	sts	0x0094, r24
}
    103c:	cf 91       	pop	r28
    103e:	df 91       	pop	r29
    1040:	08 95       	ret

00001042 <BUZZER_init>:
 *******************************************************************************/
/*
 * Description:
 * setup the buzzer pin direction
 */
void BUZZER_init(void){
    1042:	df 93       	push	r29
    1044:	cf 93       	push	r28
    1046:	cd b7       	in	r28, 0x3d	; 61
    1048:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(BUZZER_PORT_ID, BUZZER_PIN_ID, PIN_OUTPUT);
    104a:	80 e0       	ldi	r24, 0x00	; 0
    104c:	60 e0       	ldi	r22, 0x00	; 0
    104e:	41 e0       	ldi	r20, 0x01	; 1
    1050:	0e 94 3d 09 	call	0x127a	; 0x127a <GPIO_setupPinDirection>
}
    1054:	cf 91       	pop	r28
    1056:	df 91       	pop	r29
    1058:	08 95       	ret

0000105a <BUZZER_on>:

/*
 * Description:
 * turn on the buzzer
 */
void BUZZER_on(void){
    105a:	df 93       	push	r29
    105c:	cf 93       	push	r28
    105e:	cd b7       	in	r28, 0x3d	; 61
    1060:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID, LOGIC_HIGH);
    1062:	80 e0       	ldi	r24, 0x00	; 0
    1064:	60 e0       	ldi	r22, 0x00	; 0
    1066:	41 e0       	ldi	r20, 0x01	; 1
    1068:	0e 94 41 0a 	call	0x1482	; 0x1482 <GPIO_writePin>
}
    106c:	cf 91       	pop	r28
    106e:	df 91       	pop	r29
    1070:	08 95       	ret

00001072 <BUZZER_off>:

/*
 * Description:
 * turn off the buzzer
 */
void BUZZER_off(void){
    1072:	df 93       	push	r29
    1074:	cf 93       	push	r28
    1076:	cd b7       	in	r28, 0x3d	; 61
    1078:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID, LOGIC_LOW);
    107a:	80 e0       	ldi	r24, 0x00	; 0
    107c:	60 e0       	ldi	r22, 0x00	; 0
    107e:	40 e0       	ldi	r20, 0x00	; 0
    1080:	0e 94 41 0a 	call	0x1482	; 0x1482 <GPIO_writePin>
}
    1084:	cf 91       	pop	r28
    1086:	df 91       	pop	r29
    1088:	08 95       	ret

0000108a <EEPROM_writeByte>:
 *******************************************************************************/
#include "external_eeprom.h"
#include "i2c.h"

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    108a:	df 93       	push	r29
    108c:	cf 93       	push	r28
    108e:	00 d0       	rcall	.+0      	; 0x1090 <EEPROM_writeByte+0x6>
    1090:	00 d0       	rcall	.+0      	; 0x1092 <EEPROM_writeByte+0x8>
    1092:	cd b7       	in	r28, 0x3d	; 61
    1094:	de b7       	in	r29, 0x3e	; 62
    1096:	9a 83       	std	Y+2, r25	; 0x02
    1098:	89 83       	std	Y+1, r24	; 0x01
    109a:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    109c:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <TWI_start>
    if (TWI_getStatus() != TWI_START)
    10a0:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <TWI_getStatus>
    10a4:	88 30       	cpi	r24, 0x08	; 8
    10a6:	11 f0       	breq	.+4      	; 0x10ac <EEPROM_writeByte+0x22>
        return ERROR;
    10a8:	1c 82       	std	Y+4, r1	; 0x04
    10aa:	28 c0       	rjmp	.+80     	; 0x10fc <EEPROM_writeByte+0x72>

    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    10ac:	89 81       	ldd	r24, Y+1	; 0x01
    10ae:	9a 81       	ldd	r25, Y+2	; 0x02
    10b0:	80 70       	andi	r24, 0x00	; 0
    10b2:	97 70       	andi	r25, 0x07	; 7
    10b4:	88 0f       	add	r24, r24
    10b6:	89 2f       	mov	r24, r25
    10b8:	88 1f       	adc	r24, r24
    10ba:	99 0b       	sbc	r25, r25
    10bc:	91 95       	neg	r25
    10be:	80 6a       	ori	r24, 0xA0	; 160
    10c0:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    10c4:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <TWI_getStatus>
    10c8:	88 31       	cpi	r24, 0x18	; 24
    10ca:	11 f0       	breq	.+4      	; 0x10d0 <EEPROM_writeByte+0x46>
        return ERROR;
    10cc:	1c 82       	std	Y+4, r1	; 0x04
    10ce:	16 c0       	rjmp	.+44     	; 0x10fc <EEPROM_writeByte+0x72>

    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    10d0:	89 81       	ldd	r24, Y+1	; 0x01
    10d2:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    10d6:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <TWI_getStatus>
    10da:	88 32       	cpi	r24, 0x28	; 40
    10dc:	11 f0       	breq	.+4      	; 0x10e2 <EEPROM_writeByte+0x58>
        return ERROR;
    10de:	1c 82       	std	Y+4, r1	; 0x04
    10e0:	0d c0       	rjmp	.+26     	; 0x10fc <EEPROM_writeByte+0x72>

    /* write byte to eeprom */
    TWI_writeByte(u8data);
    10e2:	8b 81       	ldd	r24, Y+3	; 0x03
    10e4:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    10e8:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <TWI_getStatus>
    10ec:	88 32       	cpi	r24, 0x28	; 40
    10ee:	11 f0       	breq	.+4      	; 0x10f4 <EEPROM_writeByte+0x6a>
        return ERROR;
    10f0:	1c 82       	std	Y+4, r1	; 0x04
    10f2:	04 c0       	rjmp	.+8      	; 0x10fc <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
    10f4:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <TWI_stop>

    return SUCCESS;
    10f8:	81 e0       	ldi	r24, 0x01	; 1
    10fa:	8c 83       	std	Y+4, r24	; 0x04
    10fc:	8c 81       	ldd	r24, Y+4	; 0x04
}
    10fe:	0f 90       	pop	r0
    1100:	0f 90       	pop	r0
    1102:	0f 90       	pop	r0
    1104:	0f 90       	pop	r0
    1106:	cf 91       	pop	r28
    1108:	df 91       	pop	r29
    110a:	08 95       	ret

0000110c <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    110c:	df 93       	push	r29
    110e:	cf 93       	push	r28
    1110:	00 d0       	rcall	.+0      	; 0x1112 <EEPROM_readByte+0x6>
    1112:	00 d0       	rcall	.+0      	; 0x1114 <EEPROM_readByte+0x8>
    1114:	0f 92       	push	r0
    1116:	cd b7       	in	r28, 0x3d	; 61
    1118:	de b7       	in	r29, 0x3e	; 62
    111a:	9a 83       	std	Y+2, r25	; 0x02
    111c:	89 83       	std	Y+1, r24	; 0x01
    111e:	7c 83       	std	Y+4, r23	; 0x04
    1120:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    1122:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <TWI_start>
    if (TWI_getStatus() != TWI_START)
    1126:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <TWI_getStatus>
    112a:	88 30       	cpi	r24, 0x08	; 8
    112c:	11 f0       	breq	.+4      	; 0x1132 <EEPROM_readByte+0x26>
        return ERROR;
    112e:	1d 82       	std	Y+5, r1	; 0x05
    1130:	44 c0       	rjmp	.+136    	; 0x11ba <EEPROM_readByte+0xae>

    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    1132:	89 81       	ldd	r24, Y+1	; 0x01
    1134:	9a 81       	ldd	r25, Y+2	; 0x02
    1136:	80 70       	andi	r24, 0x00	; 0
    1138:	97 70       	andi	r25, 0x07	; 7
    113a:	88 0f       	add	r24, r24
    113c:	89 2f       	mov	r24, r25
    113e:	88 1f       	adc	r24, r24
    1140:	99 0b       	sbc	r25, r25
    1142:	91 95       	neg	r25
    1144:	80 6a       	ori	r24, 0xA0	; 160
    1146:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    114a:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <TWI_getStatus>
    114e:	88 31       	cpi	r24, 0x18	; 24
    1150:	11 f0       	breq	.+4      	; 0x1156 <EEPROM_readByte+0x4a>
        return ERROR;
    1152:	1d 82       	std	Y+5, r1	; 0x05
    1154:	32 c0       	rjmp	.+100    	; 0x11ba <EEPROM_readByte+0xae>

    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    1156:	89 81       	ldd	r24, Y+1	; 0x01
    1158:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    115c:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <TWI_getStatus>
    1160:	88 32       	cpi	r24, 0x28	; 40
    1162:	11 f0       	breq	.+4      	; 0x1168 <EEPROM_readByte+0x5c>
        return ERROR;
    1164:	1d 82       	std	Y+5, r1	; 0x05
    1166:	29 c0       	rjmp	.+82     	; 0x11ba <EEPROM_readByte+0xae>

    /* Send the Repeated Start Bit */
    TWI_start();
    1168:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
    116c:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <TWI_getStatus>
    1170:	80 31       	cpi	r24, 0x10	; 16
    1172:	11 f0       	breq	.+4      	; 0x1178 <EEPROM_readByte+0x6c>
        return ERROR;
    1174:	1d 82       	std	Y+5, r1	; 0x05
    1176:	21 c0       	rjmp	.+66     	; 0x11ba <EEPROM_readByte+0xae>

    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    1178:	89 81       	ldd	r24, Y+1	; 0x01
    117a:	9a 81       	ldd	r25, Y+2	; 0x02
    117c:	80 70       	andi	r24, 0x00	; 0
    117e:	97 70       	andi	r25, 0x07	; 7
    1180:	88 0f       	add	r24, r24
    1182:	89 2f       	mov	r24, r25
    1184:	88 1f       	adc	r24, r24
    1186:	99 0b       	sbc	r25, r25
    1188:	91 95       	neg	r25
    118a:	81 6a       	ori	r24, 0xA1	; 161
    118c:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    1190:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <TWI_getStatus>
    1194:	80 34       	cpi	r24, 0x40	; 64
    1196:	11 f0       	breq	.+4      	; 0x119c <EEPROM_readByte+0x90>
        return ERROR;
    1198:	1d 82       	std	Y+5, r1	; 0x05
    119a:	0f c0       	rjmp	.+30     	; 0x11ba <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
    119c:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <TWI_readByteWithNACK>
    11a0:	eb 81       	ldd	r30, Y+3	; 0x03
    11a2:	fc 81       	ldd	r31, Y+4	; 0x04
    11a4:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
    11a6:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <TWI_getStatus>
    11aa:	88 35       	cpi	r24, 0x58	; 88
    11ac:	11 f0       	breq	.+4      	; 0x11b2 <EEPROM_readByte+0xa6>
        return ERROR;
    11ae:	1d 82       	std	Y+5, r1	; 0x05
    11b0:	04 c0       	rjmp	.+8      	; 0x11ba <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    11b2:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <TWI_stop>

    return SUCCESS;
    11b6:	81 e0       	ldi	r24, 0x01	; 1
    11b8:	8d 83       	std	Y+5, r24	; 0x05
    11ba:	8d 81       	ldd	r24, Y+5	; 0x05
}
    11bc:	0f 90       	pop	r0
    11be:	0f 90       	pop	r0
    11c0:	0f 90       	pop	r0
    11c2:	0f 90       	pop	r0
    11c4:	0f 90       	pop	r0
    11c6:	cf 91       	pop	r28
    11c8:	df 91       	pop	r29
    11ca:	08 95       	ret

000011cc <EEPROM_writeString>:

void EEPROM_writeString(uint16 u16addr,uint8 *str){
    11cc:	df 93       	push	r29
    11ce:	cf 93       	push	r28
    11d0:	00 d0       	rcall	.+0      	; 0x11d2 <EEPROM_writeString+0x6>
    11d2:	00 d0       	rcall	.+0      	; 0x11d4 <EEPROM_writeString+0x8>
    11d4:	cd b7       	in	r28, 0x3d	; 61
    11d6:	de b7       	in	r29, 0x3e	; 62
    11d8:	9a 83       	std	Y+2, r25	; 0x02
    11da:	89 83       	std	Y+1, r24	; 0x01
    11dc:	7c 83       	std	Y+4, r23	; 0x04
    11de:	6b 83       	std	Y+3, r22	; 0x03
    11e0:	12 c0       	rjmp	.+36     	; 0x1206 <EEPROM_writeString+0x3a>

	/*keep writing until the null character */
	while(*str != '\0'){

		EEPROM_writeByte(u16addr, *str);
    11e2:	eb 81       	ldd	r30, Y+3	; 0x03
    11e4:	fc 81       	ldd	r31, Y+4	; 0x04
    11e6:	20 81       	ld	r18, Z
    11e8:	89 81       	ldd	r24, Y+1	; 0x01
    11ea:	9a 81       	ldd	r25, Y+2	; 0x02
    11ec:	62 2f       	mov	r22, r18
    11ee:	0e 94 45 08 	call	0x108a	; 0x108a <EEPROM_writeByte>
		u16addr++;
    11f2:	89 81       	ldd	r24, Y+1	; 0x01
    11f4:	9a 81       	ldd	r25, Y+2	; 0x02
    11f6:	01 96       	adiw	r24, 0x01	; 1
    11f8:	9a 83       	std	Y+2, r25	; 0x02
    11fa:	89 83       	std	Y+1, r24	; 0x01
		str++;
    11fc:	8b 81       	ldd	r24, Y+3	; 0x03
    11fe:	9c 81       	ldd	r25, Y+4	; 0x04
    1200:	01 96       	adiw	r24, 0x01	; 1
    1202:	9c 83       	std	Y+4, r25	; 0x04
    1204:	8b 83       	std	Y+3, r24	; 0x03
}

void EEPROM_writeString(uint16 u16addr,uint8 *str){

	/*keep writing until the null character */
	while(*str != '\0'){
    1206:	eb 81       	ldd	r30, Y+3	; 0x03
    1208:	fc 81       	ldd	r31, Y+4	; 0x04
    120a:	80 81       	ld	r24, Z
    120c:	88 23       	and	r24, r24
    120e:	49 f7       	brne	.-46     	; 0x11e2 <EEPROM_writeString+0x16>
		EEPROM_writeByte(u16addr, *str);
		u16addr++;
		str++;
	}
	/*write null character*/
	EEPROM_writeByte(u16addr, '\0');
    1210:	89 81       	ldd	r24, Y+1	; 0x01
    1212:	9a 81       	ldd	r25, Y+2	; 0x02
    1214:	60 e0       	ldi	r22, 0x00	; 0
    1216:	0e 94 45 08 	call	0x108a	; 0x108a <EEPROM_writeByte>

}
    121a:	0f 90       	pop	r0
    121c:	0f 90       	pop	r0
    121e:	0f 90       	pop	r0
    1220:	0f 90       	pop	r0
    1222:	cf 91       	pop	r28
    1224:	df 91       	pop	r29
    1226:	08 95       	ret

00001228 <EEPROM_readString>:

void EEPROM_readString(uint16 u16addr,uint8 *str){
    1228:	df 93       	push	r29
    122a:	cf 93       	push	r28
    122c:	00 d0       	rcall	.+0      	; 0x122e <EEPROM_readString+0x6>
    122e:	00 d0       	rcall	.+0      	; 0x1230 <EEPROM_readString+0x8>
    1230:	cd b7       	in	r28, 0x3d	; 61
    1232:	de b7       	in	r29, 0x3e	; 62
    1234:	9a 83       	std	Y+2, r25	; 0x02
    1236:	89 83       	std	Y+1, r24	; 0x01
    1238:	7c 83       	std	Y+4, r23	; 0x04
    123a:	6b 83       	std	Y+3, r22	; 0x03

	do {
		EEPROM_readByte(u16addr, str);
    123c:	89 81       	ldd	r24, Y+1	; 0x01
    123e:	9a 81       	ldd	r25, Y+2	; 0x02
    1240:	2b 81       	ldd	r18, Y+3	; 0x03
    1242:	3c 81       	ldd	r19, Y+4	; 0x04
    1244:	b9 01       	movw	r22, r18
    1246:	0e 94 86 08 	call	0x110c	; 0x110c <EEPROM_readByte>
		u16addr++;
    124a:	89 81       	ldd	r24, Y+1	; 0x01
    124c:	9a 81       	ldd	r25, Y+2	; 0x02
    124e:	01 96       	adiw	r24, 0x01	; 1
    1250:	9a 83       	std	Y+2, r25	; 0x02
    1252:	89 83       	std	Y+1, r24	; 0x01
		str++;
    1254:	8b 81       	ldd	r24, Y+3	; 0x03
    1256:	9c 81       	ldd	r25, Y+4	; 0x04
    1258:	01 96       	adiw	r24, 0x01	; 1
    125a:	9c 83       	std	Y+4, r25	; 0x04
    125c:	8b 83       	std	Y+3, r24	; 0x03
	} while (*(str-1) !='\0');
    125e:	8b 81       	ldd	r24, Y+3	; 0x03
    1260:	9c 81       	ldd	r25, Y+4	; 0x04
    1262:	fc 01       	movw	r30, r24
    1264:	31 97       	sbiw	r30, 0x01	; 1
    1266:	80 81       	ld	r24, Z
    1268:	88 23       	and	r24, r24
    126a:	41 f7       	brne	.-48     	; 0x123c <EEPROM_readString+0x14>

}
    126c:	0f 90       	pop	r0
    126e:	0f 90       	pop	r0
    1270:	0f 90       	pop	r0
    1272:	0f 90       	pop	r0
    1274:	cf 91       	pop	r28
    1276:	df 91       	pop	r29
    1278:	08 95       	ret

0000127a <GPIO_setupPinDirection>:

/*
 * Description:
 * configure the pin direction input/output
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction){
    127a:	df 93       	push	r29
    127c:	cf 93       	push	r28
    127e:	cd b7       	in	r28, 0x3d	; 61
    1280:	de b7       	in	r29, 0x3e	; 62
    1282:	27 97       	sbiw	r28, 0x07	; 7
    1284:	0f b6       	in	r0, 0x3f	; 63
    1286:	f8 94       	cli
    1288:	de bf       	out	0x3e, r29	; 62
    128a:	0f be       	out	0x3f, r0	; 63
    128c:	cd bf       	out	0x3d, r28	; 61
    128e:	89 83       	std	Y+1, r24	; 0x01
    1290:	6a 83       	std	Y+2, r22	; 0x02
    1292:	4b 83       	std	Y+3, r20	; 0x03
	if(port_num>=NUM_OF_PORTS || pin_num>=NUM_OF_PINS)
    1294:	89 81       	ldd	r24, Y+1	; 0x01
    1296:	84 30       	cpi	r24, 0x04	; 4
    1298:	08 f0       	brcs	.+2      	; 0x129c <GPIO_setupPinDirection+0x22>
    129a:	ea c0       	rjmp	.+468    	; 0x1470 <GPIO_setupPinDirection+0x1f6>
    129c:	8a 81       	ldd	r24, Y+2	; 0x02
    129e:	88 30       	cpi	r24, 0x08	; 8
    12a0:	08 f0       	brcs	.+2      	; 0x12a4 <GPIO_setupPinDirection+0x2a>
    12a2:	e6 c0       	rjmp	.+460    	; 0x1470 <GPIO_setupPinDirection+0x1f6>
	{
		/* Do nothing*/
	}
	else{
		if(direction)
    12a4:	8b 81       	ldd	r24, Y+3	; 0x03
    12a6:	88 23       	and	r24, r24
    12a8:	09 f4       	brne	.+2      	; 0x12ac <GPIO_setupPinDirection+0x32>
    12aa:	6f c0       	rjmp	.+222    	; 0x138a <GPIO_setupPinDirection+0x110>
		{
			switch(port_num)
    12ac:	89 81       	ldd	r24, Y+1	; 0x01
    12ae:	28 2f       	mov	r18, r24
    12b0:	30 e0       	ldi	r19, 0x00	; 0
    12b2:	3f 83       	std	Y+7, r19	; 0x07
    12b4:	2e 83       	std	Y+6, r18	; 0x06
    12b6:	8e 81       	ldd	r24, Y+6	; 0x06
    12b8:	9f 81       	ldd	r25, Y+7	; 0x07
    12ba:	81 30       	cpi	r24, 0x01	; 1
    12bc:	91 05       	cpc	r25, r1
    12be:	49 f1       	breq	.+82     	; 0x1312 <GPIO_setupPinDirection+0x98>
    12c0:	2e 81       	ldd	r18, Y+6	; 0x06
    12c2:	3f 81       	ldd	r19, Y+7	; 0x07
    12c4:	22 30       	cpi	r18, 0x02	; 2
    12c6:	31 05       	cpc	r19, r1
    12c8:	2c f4       	brge	.+10     	; 0x12d4 <GPIO_setupPinDirection+0x5a>
    12ca:	8e 81       	ldd	r24, Y+6	; 0x06
    12cc:	9f 81       	ldd	r25, Y+7	; 0x07
    12ce:	00 97       	sbiw	r24, 0x00	; 0
    12d0:	61 f0       	breq	.+24     	; 0x12ea <GPIO_setupPinDirection+0x70>
    12d2:	ce c0       	rjmp	.+412    	; 0x1470 <GPIO_setupPinDirection+0x1f6>
    12d4:	2e 81       	ldd	r18, Y+6	; 0x06
    12d6:	3f 81       	ldd	r19, Y+7	; 0x07
    12d8:	22 30       	cpi	r18, 0x02	; 2
    12da:	31 05       	cpc	r19, r1
    12dc:	71 f1       	breq	.+92     	; 0x133a <GPIO_setupPinDirection+0xc0>
    12de:	8e 81       	ldd	r24, Y+6	; 0x06
    12e0:	9f 81       	ldd	r25, Y+7	; 0x07
    12e2:	83 30       	cpi	r24, 0x03	; 3
    12e4:	91 05       	cpc	r25, r1
    12e6:	e9 f1       	breq	.+122    	; 0x1362 <GPIO_setupPinDirection+0xe8>
    12e8:	c3 c0       	rjmp	.+390    	; 0x1470 <GPIO_setupPinDirection+0x1f6>
			{
			case PORTA_ID: SET_BIT(DDRA,pin_num);
    12ea:	aa e3       	ldi	r26, 0x3A	; 58
    12ec:	b0 e0       	ldi	r27, 0x00	; 0
    12ee:	ea e3       	ldi	r30, 0x3A	; 58
    12f0:	f0 e0       	ldi	r31, 0x00	; 0
    12f2:	80 81       	ld	r24, Z
    12f4:	48 2f       	mov	r20, r24
    12f6:	8a 81       	ldd	r24, Y+2	; 0x02
    12f8:	28 2f       	mov	r18, r24
    12fa:	30 e0       	ldi	r19, 0x00	; 0
    12fc:	81 e0       	ldi	r24, 0x01	; 1
    12fe:	90 e0       	ldi	r25, 0x00	; 0
    1300:	02 2e       	mov	r0, r18
    1302:	02 c0       	rjmp	.+4      	; 0x1308 <GPIO_setupPinDirection+0x8e>
    1304:	88 0f       	add	r24, r24
    1306:	99 1f       	adc	r25, r25
    1308:	0a 94       	dec	r0
    130a:	e2 f7       	brpl	.-8      	; 0x1304 <GPIO_setupPinDirection+0x8a>
    130c:	84 2b       	or	r24, r20
    130e:	8c 93       	st	X, r24
    1310:	af c0       	rjmp	.+350    	; 0x1470 <GPIO_setupPinDirection+0x1f6>
			break;
			case PORTB_ID: SET_BIT(DDRB,pin_num);
    1312:	a7 e3       	ldi	r26, 0x37	; 55
    1314:	b0 e0       	ldi	r27, 0x00	; 0
    1316:	e7 e3       	ldi	r30, 0x37	; 55
    1318:	f0 e0       	ldi	r31, 0x00	; 0
    131a:	80 81       	ld	r24, Z
    131c:	48 2f       	mov	r20, r24
    131e:	8a 81       	ldd	r24, Y+2	; 0x02
    1320:	28 2f       	mov	r18, r24
    1322:	30 e0       	ldi	r19, 0x00	; 0
    1324:	81 e0       	ldi	r24, 0x01	; 1
    1326:	90 e0       	ldi	r25, 0x00	; 0
    1328:	02 2e       	mov	r0, r18
    132a:	02 c0       	rjmp	.+4      	; 0x1330 <GPIO_setupPinDirection+0xb6>
    132c:	88 0f       	add	r24, r24
    132e:	99 1f       	adc	r25, r25
    1330:	0a 94       	dec	r0
    1332:	e2 f7       	brpl	.-8      	; 0x132c <GPIO_setupPinDirection+0xb2>
    1334:	84 2b       	or	r24, r20
    1336:	8c 93       	st	X, r24
    1338:	9b c0       	rjmp	.+310    	; 0x1470 <GPIO_setupPinDirection+0x1f6>
			break;
			case PORTC_ID: SET_BIT(DDRC,pin_num);
    133a:	a4 e3       	ldi	r26, 0x34	; 52
    133c:	b0 e0       	ldi	r27, 0x00	; 0
    133e:	e4 e3       	ldi	r30, 0x34	; 52
    1340:	f0 e0       	ldi	r31, 0x00	; 0
    1342:	80 81       	ld	r24, Z
    1344:	48 2f       	mov	r20, r24
    1346:	8a 81       	ldd	r24, Y+2	; 0x02
    1348:	28 2f       	mov	r18, r24
    134a:	30 e0       	ldi	r19, 0x00	; 0
    134c:	81 e0       	ldi	r24, 0x01	; 1
    134e:	90 e0       	ldi	r25, 0x00	; 0
    1350:	02 2e       	mov	r0, r18
    1352:	02 c0       	rjmp	.+4      	; 0x1358 <GPIO_setupPinDirection+0xde>
    1354:	88 0f       	add	r24, r24
    1356:	99 1f       	adc	r25, r25
    1358:	0a 94       	dec	r0
    135a:	e2 f7       	brpl	.-8      	; 0x1354 <GPIO_setupPinDirection+0xda>
    135c:	84 2b       	or	r24, r20
    135e:	8c 93       	st	X, r24
    1360:	87 c0       	rjmp	.+270    	; 0x1470 <GPIO_setupPinDirection+0x1f6>
			break;
			case PORTD_ID: SET_BIT(DDRD,pin_num);
    1362:	a1 e3       	ldi	r26, 0x31	; 49
    1364:	b0 e0       	ldi	r27, 0x00	; 0
    1366:	e1 e3       	ldi	r30, 0x31	; 49
    1368:	f0 e0       	ldi	r31, 0x00	; 0
    136a:	80 81       	ld	r24, Z
    136c:	48 2f       	mov	r20, r24
    136e:	8a 81       	ldd	r24, Y+2	; 0x02
    1370:	28 2f       	mov	r18, r24
    1372:	30 e0       	ldi	r19, 0x00	; 0
    1374:	81 e0       	ldi	r24, 0x01	; 1
    1376:	90 e0       	ldi	r25, 0x00	; 0
    1378:	02 2e       	mov	r0, r18
    137a:	02 c0       	rjmp	.+4      	; 0x1380 <GPIO_setupPinDirection+0x106>
    137c:	88 0f       	add	r24, r24
    137e:	99 1f       	adc	r25, r25
    1380:	0a 94       	dec	r0
    1382:	e2 f7       	brpl	.-8      	; 0x137c <GPIO_setupPinDirection+0x102>
    1384:	84 2b       	or	r24, r20
    1386:	8c 93       	st	X, r24
    1388:	73 c0       	rjmp	.+230    	; 0x1470 <GPIO_setupPinDirection+0x1f6>
			break;
			}
		}
		else{
			switch(port_num)
    138a:	89 81       	ldd	r24, Y+1	; 0x01
    138c:	28 2f       	mov	r18, r24
    138e:	30 e0       	ldi	r19, 0x00	; 0
    1390:	3d 83       	std	Y+5, r19	; 0x05
    1392:	2c 83       	std	Y+4, r18	; 0x04
    1394:	8c 81       	ldd	r24, Y+4	; 0x04
    1396:	9d 81       	ldd	r25, Y+5	; 0x05
    1398:	81 30       	cpi	r24, 0x01	; 1
    139a:	91 05       	cpc	r25, r1
    139c:	59 f1       	breq	.+86     	; 0x13f4 <GPIO_setupPinDirection+0x17a>
    139e:	2c 81       	ldd	r18, Y+4	; 0x04
    13a0:	3d 81       	ldd	r19, Y+5	; 0x05
    13a2:	22 30       	cpi	r18, 0x02	; 2
    13a4:	31 05       	cpc	r19, r1
    13a6:	2c f4       	brge	.+10     	; 0x13b2 <GPIO_setupPinDirection+0x138>
    13a8:	8c 81       	ldd	r24, Y+4	; 0x04
    13aa:	9d 81       	ldd	r25, Y+5	; 0x05
    13ac:	00 97       	sbiw	r24, 0x00	; 0
    13ae:	69 f0       	breq	.+26     	; 0x13ca <GPIO_setupPinDirection+0x150>
    13b0:	5f c0       	rjmp	.+190    	; 0x1470 <GPIO_setupPinDirection+0x1f6>
    13b2:	2c 81       	ldd	r18, Y+4	; 0x04
    13b4:	3d 81       	ldd	r19, Y+5	; 0x05
    13b6:	22 30       	cpi	r18, 0x02	; 2
    13b8:	31 05       	cpc	r19, r1
    13ba:	89 f1       	breq	.+98     	; 0x141e <GPIO_setupPinDirection+0x1a4>
    13bc:	8c 81       	ldd	r24, Y+4	; 0x04
    13be:	9d 81       	ldd	r25, Y+5	; 0x05
    13c0:	83 30       	cpi	r24, 0x03	; 3
    13c2:	91 05       	cpc	r25, r1
    13c4:	09 f4       	brne	.+2      	; 0x13c8 <GPIO_setupPinDirection+0x14e>
    13c6:	40 c0       	rjmp	.+128    	; 0x1448 <GPIO_setupPinDirection+0x1ce>
    13c8:	53 c0       	rjmp	.+166    	; 0x1470 <GPIO_setupPinDirection+0x1f6>
			{
			case PORTA_ID: CLEAR_BIT(DDRA,pin_num);
    13ca:	aa e3       	ldi	r26, 0x3A	; 58
    13cc:	b0 e0       	ldi	r27, 0x00	; 0
    13ce:	ea e3       	ldi	r30, 0x3A	; 58
    13d0:	f0 e0       	ldi	r31, 0x00	; 0
    13d2:	80 81       	ld	r24, Z
    13d4:	48 2f       	mov	r20, r24
    13d6:	8a 81       	ldd	r24, Y+2	; 0x02
    13d8:	28 2f       	mov	r18, r24
    13da:	30 e0       	ldi	r19, 0x00	; 0
    13dc:	81 e0       	ldi	r24, 0x01	; 1
    13de:	90 e0       	ldi	r25, 0x00	; 0
    13e0:	02 2e       	mov	r0, r18
    13e2:	02 c0       	rjmp	.+4      	; 0x13e8 <GPIO_setupPinDirection+0x16e>
    13e4:	88 0f       	add	r24, r24
    13e6:	99 1f       	adc	r25, r25
    13e8:	0a 94       	dec	r0
    13ea:	e2 f7       	brpl	.-8      	; 0x13e4 <GPIO_setupPinDirection+0x16a>
    13ec:	80 95       	com	r24
    13ee:	84 23       	and	r24, r20
    13f0:	8c 93       	st	X, r24
    13f2:	3e c0       	rjmp	.+124    	; 0x1470 <GPIO_setupPinDirection+0x1f6>
			break;
			case PORTB_ID: CLEAR_BIT(DDRB,pin_num);
    13f4:	a7 e3       	ldi	r26, 0x37	; 55
    13f6:	b0 e0       	ldi	r27, 0x00	; 0
    13f8:	e7 e3       	ldi	r30, 0x37	; 55
    13fa:	f0 e0       	ldi	r31, 0x00	; 0
    13fc:	80 81       	ld	r24, Z
    13fe:	48 2f       	mov	r20, r24
    1400:	8a 81       	ldd	r24, Y+2	; 0x02
    1402:	28 2f       	mov	r18, r24
    1404:	30 e0       	ldi	r19, 0x00	; 0
    1406:	81 e0       	ldi	r24, 0x01	; 1
    1408:	90 e0       	ldi	r25, 0x00	; 0
    140a:	02 2e       	mov	r0, r18
    140c:	02 c0       	rjmp	.+4      	; 0x1412 <GPIO_setupPinDirection+0x198>
    140e:	88 0f       	add	r24, r24
    1410:	99 1f       	adc	r25, r25
    1412:	0a 94       	dec	r0
    1414:	e2 f7       	brpl	.-8      	; 0x140e <GPIO_setupPinDirection+0x194>
    1416:	80 95       	com	r24
    1418:	84 23       	and	r24, r20
    141a:	8c 93       	st	X, r24
    141c:	29 c0       	rjmp	.+82     	; 0x1470 <GPIO_setupPinDirection+0x1f6>
			break;
			case PORTC_ID: CLEAR_BIT(DDRC,pin_num);
    141e:	a4 e3       	ldi	r26, 0x34	; 52
    1420:	b0 e0       	ldi	r27, 0x00	; 0
    1422:	e4 e3       	ldi	r30, 0x34	; 52
    1424:	f0 e0       	ldi	r31, 0x00	; 0
    1426:	80 81       	ld	r24, Z
    1428:	48 2f       	mov	r20, r24
    142a:	8a 81       	ldd	r24, Y+2	; 0x02
    142c:	28 2f       	mov	r18, r24
    142e:	30 e0       	ldi	r19, 0x00	; 0
    1430:	81 e0       	ldi	r24, 0x01	; 1
    1432:	90 e0       	ldi	r25, 0x00	; 0
    1434:	02 2e       	mov	r0, r18
    1436:	02 c0       	rjmp	.+4      	; 0x143c <GPIO_setupPinDirection+0x1c2>
    1438:	88 0f       	add	r24, r24
    143a:	99 1f       	adc	r25, r25
    143c:	0a 94       	dec	r0
    143e:	e2 f7       	brpl	.-8      	; 0x1438 <GPIO_setupPinDirection+0x1be>
    1440:	80 95       	com	r24
    1442:	84 23       	and	r24, r20
    1444:	8c 93       	st	X, r24
    1446:	14 c0       	rjmp	.+40     	; 0x1470 <GPIO_setupPinDirection+0x1f6>
			break;
			case PORTD_ID: CLEAR_BIT(DDRD,pin_num);
    1448:	a1 e3       	ldi	r26, 0x31	; 49
    144a:	b0 e0       	ldi	r27, 0x00	; 0
    144c:	e1 e3       	ldi	r30, 0x31	; 49
    144e:	f0 e0       	ldi	r31, 0x00	; 0
    1450:	80 81       	ld	r24, Z
    1452:	48 2f       	mov	r20, r24
    1454:	8a 81       	ldd	r24, Y+2	; 0x02
    1456:	28 2f       	mov	r18, r24
    1458:	30 e0       	ldi	r19, 0x00	; 0
    145a:	81 e0       	ldi	r24, 0x01	; 1
    145c:	90 e0       	ldi	r25, 0x00	; 0
    145e:	02 2e       	mov	r0, r18
    1460:	02 c0       	rjmp	.+4      	; 0x1466 <GPIO_setupPinDirection+0x1ec>
    1462:	88 0f       	add	r24, r24
    1464:	99 1f       	adc	r25, r25
    1466:	0a 94       	dec	r0
    1468:	e2 f7       	brpl	.-8      	; 0x1462 <GPIO_setupPinDirection+0x1e8>
    146a:	80 95       	com	r24
    146c:	84 23       	and	r24, r20
    146e:	8c 93       	st	X, r24
			break;
			}
		}
	}
}
    1470:	27 96       	adiw	r28, 0x07	; 7
    1472:	0f b6       	in	r0, 0x3f	; 63
    1474:	f8 94       	cli
    1476:	de bf       	out	0x3e, r29	; 62
    1478:	0f be       	out	0x3f, r0	; 63
    147a:	cd bf       	out	0x3d, r28	; 61
    147c:	cf 91       	pop	r28
    147e:	df 91       	pop	r29
    1480:	08 95       	ret

00001482 <GPIO_writePin>:
 * Description:
 * if the pin is output it will write logic high or logic low
 * if the pin is input it will enable the pull up resistor if it write logic high
 */

void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value){
    1482:	df 93       	push	r29
    1484:	cf 93       	push	r28
    1486:	cd b7       	in	r28, 0x3d	; 61
    1488:	de b7       	in	r29, 0x3e	; 62
    148a:	27 97       	sbiw	r28, 0x07	; 7
    148c:	0f b6       	in	r0, 0x3f	; 63
    148e:	f8 94       	cli
    1490:	de bf       	out	0x3e, r29	; 62
    1492:	0f be       	out	0x3f, r0	; 63
    1494:	cd bf       	out	0x3d, r28	; 61
    1496:	89 83       	std	Y+1, r24	; 0x01
    1498:	6a 83       	std	Y+2, r22	; 0x02
    149a:	4b 83       	std	Y+3, r20	; 0x03
	if(port_num>=NUM_OF_PORTS || pin_num>=NUM_OF_PINS)
    149c:	89 81       	ldd	r24, Y+1	; 0x01
    149e:	84 30       	cpi	r24, 0x04	; 4
    14a0:	08 f0       	brcs	.+2      	; 0x14a4 <GPIO_writePin+0x22>
    14a2:	ea c0       	rjmp	.+468    	; 0x1678 <GPIO_writePin+0x1f6>
    14a4:	8a 81       	ldd	r24, Y+2	; 0x02
    14a6:	88 30       	cpi	r24, 0x08	; 8
    14a8:	08 f0       	brcs	.+2      	; 0x14ac <GPIO_writePin+0x2a>
    14aa:	e6 c0       	rjmp	.+460    	; 0x1678 <GPIO_writePin+0x1f6>
	{
		/* Do nothing*/
	}
	else
	{
		if(value == LOGIC_HIGH)
    14ac:	8b 81       	ldd	r24, Y+3	; 0x03
    14ae:	81 30       	cpi	r24, 0x01	; 1
    14b0:	09 f0       	breq	.+2      	; 0x14b4 <GPIO_writePin+0x32>
    14b2:	6f c0       	rjmp	.+222    	; 0x1592 <GPIO_writePin+0x110>
		{
			switch(port_num)
    14b4:	89 81       	ldd	r24, Y+1	; 0x01
    14b6:	28 2f       	mov	r18, r24
    14b8:	30 e0       	ldi	r19, 0x00	; 0
    14ba:	3f 83       	std	Y+7, r19	; 0x07
    14bc:	2e 83       	std	Y+6, r18	; 0x06
    14be:	8e 81       	ldd	r24, Y+6	; 0x06
    14c0:	9f 81       	ldd	r25, Y+7	; 0x07
    14c2:	81 30       	cpi	r24, 0x01	; 1
    14c4:	91 05       	cpc	r25, r1
    14c6:	49 f1       	breq	.+82     	; 0x151a <GPIO_writePin+0x98>
    14c8:	2e 81       	ldd	r18, Y+6	; 0x06
    14ca:	3f 81       	ldd	r19, Y+7	; 0x07
    14cc:	22 30       	cpi	r18, 0x02	; 2
    14ce:	31 05       	cpc	r19, r1
    14d0:	2c f4       	brge	.+10     	; 0x14dc <GPIO_writePin+0x5a>
    14d2:	8e 81       	ldd	r24, Y+6	; 0x06
    14d4:	9f 81       	ldd	r25, Y+7	; 0x07
    14d6:	00 97       	sbiw	r24, 0x00	; 0
    14d8:	61 f0       	breq	.+24     	; 0x14f2 <GPIO_writePin+0x70>
    14da:	ce c0       	rjmp	.+412    	; 0x1678 <GPIO_writePin+0x1f6>
    14dc:	2e 81       	ldd	r18, Y+6	; 0x06
    14de:	3f 81       	ldd	r19, Y+7	; 0x07
    14e0:	22 30       	cpi	r18, 0x02	; 2
    14e2:	31 05       	cpc	r19, r1
    14e4:	71 f1       	breq	.+92     	; 0x1542 <GPIO_writePin+0xc0>
    14e6:	8e 81       	ldd	r24, Y+6	; 0x06
    14e8:	9f 81       	ldd	r25, Y+7	; 0x07
    14ea:	83 30       	cpi	r24, 0x03	; 3
    14ec:	91 05       	cpc	r25, r1
    14ee:	e9 f1       	breq	.+122    	; 0x156a <GPIO_writePin+0xe8>
    14f0:	c3 c0       	rjmp	.+390    	; 0x1678 <GPIO_writePin+0x1f6>
			{
			case PORTA_ID: SET_BIT(PORTA,pin_num);
    14f2:	ab e3       	ldi	r26, 0x3B	; 59
    14f4:	b0 e0       	ldi	r27, 0x00	; 0
    14f6:	eb e3       	ldi	r30, 0x3B	; 59
    14f8:	f0 e0       	ldi	r31, 0x00	; 0
    14fa:	80 81       	ld	r24, Z
    14fc:	48 2f       	mov	r20, r24
    14fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1500:	28 2f       	mov	r18, r24
    1502:	30 e0       	ldi	r19, 0x00	; 0
    1504:	81 e0       	ldi	r24, 0x01	; 1
    1506:	90 e0       	ldi	r25, 0x00	; 0
    1508:	02 2e       	mov	r0, r18
    150a:	02 c0       	rjmp	.+4      	; 0x1510 <GPIO_writePin+0x8e>
    150c:	88 0f       	add	r24, r24
    150e:	99 1f       	adc	r25, r25
    1510:	0a 94       	dec	r0
    1512:	e2 f7       	brpl	.-8      	; 0x150c <GPIO_writePin+0x8a>
    1514:	84 2b       	or	r24, r20
    1516:	8c 93       	st	X, r24
    1518:	af c0       	rjmp	.+350    	; 0x1678 <GPIO_writePin+0x1f6>
			break;
			case PORTB_ID: SET_BIT(PORTB,pin_num);
    151a:	a8 e3       	ldi	r26, 0x38	; 56
    151c:	b0 e0       	ldi	r27, 0x00	; 0
    151e:	e8 e3       	ldi	r30, 0x38	; 56
    1520:	f0 e0       	ldi	r31, 0x00	; 0
    1522:	80 81       	ld	r24, Z
    1524:	48 2f       	mov	r20, r24
    1526:	8a 81       	ldd	r24, Y+2	; 0x02
    1528:	28 2f       	mov	r18, r24
    152a:	30 e0       	ldi	r19, 0x00	; 0
    152c:	81 e0       	ldi	r24, 0x01	; 1
    152e:	90 e0       	ldi	r25, 0x00	; 0
    1530:	02 2e       	mov	r0, r18
    1532:	02 c0       	rjmp	.+4      	; 0x1538 <GPIO_writePin+0xb6>
    1534:	88 0f       	add	r24, r24
    1536:	99 1f       	adc	r25, r25
    1538:	0a 94       	dec	r0
    153a:	e2 f7       	brpl	.-8      	; 0x1534 <GPIO_writePin+0xb2>
    153c:	84 2b       	or	r24, r20
    153e:	8c 93       	st	X, r24
    1540:	9b c0       	rjmp	.+310    	; 0x1678 <GPIO_writePin+0x1f6>
			break;
			case PORTC_ID: SET_BIT(PORTC,pin_num);
    1542:	a5 e3       	ldi	r26, 0x35	; 53
    1544:	b0 e0       	ldi	r27, 0x00	; 0
    1546:	e5 e3       	ldi	r30, 0x35	; 53
    1548:	f0 e0       	ldi	r31, 0x00	; 0
    154a:	80 81       	ld	r24, Z
    154c:	48 2f       	mov	r20, r24
    154e:	8a 81       	ldd	r24, Y+2	; 0x02
    1550:	28 2f       	mov	r18, r24
    1552:	30 e0       	ldi	r19, 0x00	; 0
    1554:	81 e0       	ldi	r24, 0x01	; 1
    1556:	90 e0       	ldi	r25, 0x00	; 0
    1558:	02 2e       	mov	r0, r18
    155a:	02 c0       	rjmp	.+4      	; 0x1560 <GPIO_writePin+0xde>
    155c:	88 0f       	add	r24, r24
    155e:	99 1f       	adc	r25, r25
    1560:	0a 94       	dec	r0
    1562:	e2 f7       	brpl	.-8      	; 0x155c <GPIO_writePin+0xda>
    1564:	84 2b       	or	r24, r20
    1566:	8c 93       	st	X, r24
    1568:	87 c0       	rjmp	.+270    	; 0x1678 <GPIO_writePin+0x1f6>
			break;
			case PORTD_ID: SET_BIT(PORTD,pin_num);
    156a:	a2 e3       	ldi	r26, 0x32	; 50
    156c:	b0 e0       	ldi	r27, 0x00	; 0
    156e:	e2 e3       	ldi	r30, 0x32	; 50
    1570:	f0 e0       	ldi	r31, 0x00	; 0
    1572:	80 81       	ld	r24, Z
    1574:	48 2f       	mov	r20, r24
    1576:	8a 81       	ldd	r24, Y+2	; 0x02
    1578:	28 2f       	mov	r18, r24
    157a:	30 e0       	ldi	r19, 0x00	; 0
    157c:	81 e0       	ldi	r24, 0x01	; 1
    157e:	90 e0       	ldi	r25, 0x00	; 0
    1580:	02 2e       	mov	r0, r18
    1582:	02 c0       	rjmp	.+4      	; 0x1588 <GPIO_writePin+0x106>
    1584:	88 0f       	add	r24, r24
    1586:	99 1f       	adc	r25, r25
    1588:	0a 94       	dec	r0
    158a:	e2 f7       	brpl	.-8      	; 0x1584 <GPIO_writePin+0x102>
    158c:	84 2b       	or	r24, r20
    158e:	8c 93       	st	X, r24
    1590:	73 c0       	rjmp	.+230    	; 0x1678 <GPIO_writePin+0x1f6>
			break;
			}
		}
		else{
			switch(port_num)
    1592:	89 81       	ldd	r24, Y+1	; 0x01
    1594:	28 2f       	mov	r18, r24
    1596:	30 e0       	ldi	r19, 0x00	; 0
    1598:	3d 83       	std	Y+5, r19	; 0x05
    159a:	2c 83       	std	Y+4, r18	; 0x04
    159c:	8c 81       	ldd	r24, Y+4	; 0x04
    159e:	9d 81       	ldd	r25, Y+5	; 0x05
    15a0:	81 30       	cpi	r24, 0x01	; 1
    15a2:	91 05       	cpc	r25, r1
    15a4:	59 f1       	breq	.+86     	; 0x15fc <GPIO_writePin+0x17a>
    15a6:	2c 81       	ldd	r18, Y+4	; 0x04
    15a8:	3d 81       	ldd	r19, Y+5	; 0x05
    15aa:	22 30       	cpi	r18, 0x02	; 2
    15ac:	31 05       	cpc	r19, r1
    15ae:	2c f4       	brge	.+10     	; 0x15ba <GPIO_writePin+0x138>
    15b0:	8c 81       	ldd	r24, Y+4	; 0x04
    15b2:	9d 81       	ldd	r25, Y+5	; 0x05
    15b4:	00 97       	sbiw	r24, 0x00	; 0
    15b6:	69 f0       	breq	.+26     	; 0x15d2 <GPIO_writePin+0x150>
    15b8:	5f c0       	rjmp	.+190    	; 0x1678 <GPIO_writePin+0x1f6>
    15ba:	2c 81       	ldd	r18, Y+4	; 0x04
    15bc:	3d 81       	ldd	r19, Y+5	; 0x05
    15be:	22 30       	cpi	r18, 0x02	; 2
    15c0:	31 05       	cpc	r19, r1
    15c2:	89 f1       	breq	.+98     	; 0x1626 <GPIO_writePin+0x1a4>
    15c4:	8c 81       	ldd	r24, Y+4	; 0x04
    15c6:	9d 81       	ldd	r25, Y+5	; 0x05
    15c8:	83 30       	cpi	r24, 0x03	; 3
    15ca:	91 05       	cpc	r25, r1
    15cc:	09 f4       	brne	.+2      	; 0x15d0 <GPIO_writePin+0x14e>
    15ce:	40 c0       	rjmp	.+128    	; 0x1650 <GPIO_writePin+0x1ce>
    15d0:	53 c0       	rjmp	.+166    	; 0x1678 <GPIO_writePin+0x1f6>
			{
			case PORTA_ID: CLEAR_BIT(PORTA,pin_num);
    15d2:	ab e3       	ldi	r26, 0x3B	; 59
    15d4:	b0 e0       	ldi	r27, 0x00	; 0
    15d6:	eb e3       	ldi	r30, 0x3B	; 59
    15d8:	f0 e0       	ldi	r31, 0x00	; 0
    15da:	80 81       	ld	r24, Z
    15dc:	48 2f       	mov	r20, r24
    15de:	8a 81       	ldd	r24, Y+2	; 0x02
    15e0:	28 2f       	mov	r18, r24
    15e2:	30 e0       	ldi	r19, 0x00	; 0
    15e4:	81 e0       	ldi	r24, 0x01	; 1
    15e6:	90 e0       	ldi	r25, 0x00	; 0
    15e8:	02 2e       	mov	r0, r18
    15ea:	02 c0       	rjmp	.+4      	; 0x15f0 <GPIO_writePin+0x16e>
    15ec:	88 0f       	add	r24, r24
    15ee:	99 1f       	adc	r25, r25
    15f0:	0a 94       	dec	r0
    15f2:	e2 f7       	brpl	.-8      	; 0x15ec <GPIO_writePin+0x16a>
    15f4:	80 95       	com	r24
    15f6:	84 23       	and	r24, r20
    15f8:	8c 93       	st	X, r24
    15fa:	3e c0       	rjmp	.+124    	; 0x1678 <GPIO_writePin+0x1f6>
			break;
			case PORTB_ID: CLEAR_BIT(PORTB,pin_num);
    15fc:	a8 e3       	ldi	r26, 0x38	; 56
    15fe:	b0 e0       	ldi	r27, 0x00	; 0
    1600:	e8 e3       	ldi	r30, 0x38	; 56
    1602:	f0 e0       	ldi	r31, 0x00	; 0
    1604:	80 81       	ld	r24, Z
    1606:	48 2f       	mov	r20, r24
    1608:	8a 81       	ldd	r24, Y+2	; 0x02
    160a:	28 2f       	mov	r18, r24
    160c:	30 e0       	ldi	r19, 0x00	; 0
    160e:	81 e0       	ldi	r24, 0x01	; 1
    1610:	90 e0       	ldi	r25, 0x00	; 0
    1612:	02 2e       	mov	r0, r18
    1614:	02 c0       	rjmp	.+4      	; 0x161a <GPIO_writePin+0x198>
    1616:	88 0f       	add	r24, r24
    1618:	99 1f       	adc	r25, r25
    161a:	0a 94       	dec	r0
    161c:	e2 f7       	brpl	.-8      	; 0x1616 <GPIO_writePin+0x194>
    161e:	80 95       	com	r24
    1620:	84 23       	and	r24, r20
    1622:	8c 93       	st	X, r24
    1624:	29 c0       	rjmp	.+82     	; 0x1678 <GPIO_writePin+0x1f6>
			break;
			case PORTC_ID: CLEAR_BIT(PORTC,pin_num);
    1626:	a5 e3       	ldi	r26, 0x35	; 53
    1628:	b0 e0       	ldi	r27, 0x00	; 0
    162a:	e5 e3       	ldi	r30, 0x35	; 53
    162c:	f0 e0       	ldi	r31, 0x00	; 0
    162e:	80 81       	ld	r24, Z
    1630:	48 2f       	mov	r20, r24
    1632:	8a 81       	ldd	r24, Y+2	; 0x02
    1634:	28 2f       	mov	r18, r24
    1636:	30 e0       	ldi	r19, 0x00	; 0
    1638:	81 e0       	ldi	r24, 0x01	; 1
    163a:	90 e0       	ldi	r25, 0x00	; 0
    163c:	02 2e       	mov	r0, r18
    163e:	02 c0       	rjmp	.+4      	; 0x1644 <GPIO_writePin+0x1c2>
    1640:	88 0f       	add	r24, r24
    1642:	99 1f       	adc	r25, r25
    1644:	0a 94       	dec	r0
    1646:	e2 f7       	brpl	.-8      	; 0x1640 <GPIO_writePin+0x1be>
    1648:	80 95       	com	r24
    164a:	84 23       	and	r24, r20
    164c:	8c 93       	st	X, r24
    164e:	14 c0       	rjmp	.+40     	; 0x1678 <GPIO_writePin+0x1f6>
			break;
			case PORTD_ID: CLEAR_BIT(PORTD,pin_num);
    1650:	a2 e3       	ldi	r26, 0x32	; 50
    1652:	b0 e0       	ldi	r27, 0x00	; 0
    1654:	e2 e3       	ldi	r30, 0x32	; 50
    1656:	f0 e0       	ldi	r31, 0x00	; 0
    1658:	80 81       	ld	r24, Z
    165a:	48 2f       	mov	r20, r24
    165c:	8a 81       	ldd	r24, Y+2	; 0x02
    165e:	28 2f       	mov	r18, r24
    1660:	30 e0       	ldi	r19, 0x00	; 0
    1662:	81 e0       	ldi	r24, 0x01	; 1
    1664:	90 e0       	ldi	r25, 0x00	; 0
    1666:	02 2e       	mov	r0, r18
    1668:	02 c0       	rjmp	.+4      	; 0x166e <GPIO_writePin+0x1ec>
    166a:	88 0f       	add	r24, r24
    166c:	99 1f       	adc	r25, r25
    166e:	0a 94       	dec	r0
    1670:	e2 f7       	brpl	.-8      	; 0x166a <GPIO_writePin+0x1e8>
    1672:	80 95       	com	r24
    1674:	84 23       	and	r24, r20
    1676:	8c 93       	st	X, r24
			break;
			}
		}
	}
}
    1678:	27 96       	adiw	r28, 0x07	; 7
    167a:	0f b6       	in	r0, 0x3f	; 63
    167c:	f8 94       	cli
    167e:	de bf       	out	0x3e, r29	; 62
    1680:	0f be       	out	0x3f, r0	; 63
    1682:	cd bf       	out	0x3d, r28	; 61
    1684:	cf 91       	pop	r28
    1686:	df 91       	pop	r29
    1688:	08 95       	ret

0000168a <GPIO_readPin>:
/*
 * Description:
 * read the value on the required pin
 * if the port number or pin number is incorrect the function returns zero
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num){
    168a:	df 93       	push	r29
    168c:	cf 93       	push	r28
    168e:	00 d0       	rcall	.+0      	; 0x1690 <GPIO_readPin+0x6>
    1690:	00 d0       	rcall	.+0      	; 0x1692 <GPIO_readPin+0x8>
    1692:	0f 92       	push	r0
    1694:	cd b7       	in	r28, 0x3d	; 61
    1696:	de b7       	in	r29, 0x3e	; 62
    1698:	8a 83       	std	Y+2, r24	; 0x02
    169a:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    169c:	19 82       	std	Y+1, r1	; 0x01
	if(port_num>=NUM_OF_PORTS || pin_num>=NUM_OF_PINS)
    169e:	8a 81       	ldd	r24, Y+2	; 0x02
    16a0:	84 30       	cpi	r24, 0x04	; 4
    16a2:	08 f0       	brcs	.+2      	; 0x16a6 <GPIO_readPin+0x1c>
    16a4:	84 c0       	rjmp	.+264    	; 0x17ae <GPIO_readPin+0x124>
    16a6:	8b 81       	ldd	r24, Y+3	; 0x03
    16a8:	88 30       	cpi	r24, 0x08	; 8
    16aa:	08 f0       	brcs	.+2      	; 0x16ae <GPIO_readPin+0x24>
    16ac:	80 c0       	rjmp	.+256    	; 0x17ae <GPIO_readPin+0x124>
	{
		/*Do nothing*/
	}
	else
	{
		switch(port_num)
    16ae:	8a 81       	ldd	r24, Y+2	; 0x02
    16b0:	28 2f       	mov	r18, r24
    16b2:	30 e0       	ldi	r19, 0x00	; 0
    16b4:	3d 83       	std	Y+5, r19	; 0x05
    16b6:	2c 83       	std	Y+4, r18	; 0x04
    16b8:	4c 81       	ldd	r20, Y+4	; 0x04
    16ba:	5d 81       	ldd	r21, Y+5	; 0x05
    16bc:	41 30       	cpi	r20, 0x01	; 1
    16be:	51 05       	cpc	r21, r1
    16c0:	79 f1       	breq	.+94     	; 0x1720 <GPIO_readPin+0x96>
    16c2:	8c 81       	ldd	r24, Y+4	; 0x04
    16c4:	9d 81       	ldd	r25, Y+5	; 0x05
    16c6:	82 30       	cpi	r24, 0x02	; 2
    16c8:	91 05       	cpc	r25, r1
    16ca:	34 f4       	brge	.+12     	; 0x16d8 <GPIO_readPin+0x4e>
    16cc:	2c 81       	ldd	r18, Y+4	; 0x04
    16ce:	3d 81       	ldd	r19, Y+5	; 0x05
    16d0:	21 15       	cp	r18, r1
    16d2:	31 05       	cpc	r19, r1
    16d4:	69 f0       	breq	.+26     	; 0x16f0 <GPIO_readPin+0x66>
    16d6:	6b c0       	rjmp	.+214    	; 0x17ae <GPIO_readPin+0x124>
    16d8:	4c 81       	ldd	r20, Y+4	; 0x04
    16da:	5d 81       	ldd	r21, Y+5	; 0x05
    16dc:	42 30       	cpi	r20, 0x02	; 2
    16de:	51 05       	cpc	r21, r1
    16e0:	b9 f1       	breq	.+110    	; 0x1750 <GPIO_readPin+0xc6>
    16e2:	8c 81       	ldd	r24, Y+4	; 0x04
    16e4:	9d 81       	ldd	r25, Y+5	; 0x05
    16e6:	83 30       	cpi	r24, 0x03	; 3
    16e8:	91 05       	cpc	r25, r1
    16ea:	09 f4       	brne	.+2      	; 0x16ee <GPIO_readPin+0x64>
    16ec:	49 c0       	rjmp	.+146    	; 0x1780 <GPIO_readPin+0xf6>
    16ee:	5f c0       	rjmp	.+190    	; 0x17ae <GPIO_readPin+0x124>
		{
		case PORTA_ID: if(BIT_IS_SET(PINA,pin_num))
    16f0:	e9 e3       	ldi	r30, 0x39	; 57
    16f2:	f0 e0       	ldi	r31, 0x00	; 0
    16f4:	80 81       	ld	r24, Z
    16f6:	28 2f       	mov	r18, r24
    16f8:	30 e0       	ldi	r19, 0x00	; 0
    16fa:	8b 81       	ldd	r24, Y+3	; 0x03
    16fc:	88 2f       	mov	r24, r24
    16fe:	90 e0       	ldi	r25, 0x00	; 0
    1700:	a9 01       	movw	r20, r18
    1702:	02 c0       	rjmp	.+4      	; 0x1708 <GPIO_readPin+0x7e>
    1704:	55 95       	asr	r21
    1706:	47 95       	ror	r20
    1708:	8a 95       	dec	r24
    170a:	e2 f7       	brpl	.-8      	; 0x1704 <GPIO_readPin+0x7a>
    170c:	ca 01       	movw	r24, r20
    170e:	81 70       	andi	r24, 0x01	; 1
    1710:	90 70       	andi	r25, 0x00	; 0
    1712:	88 23       	and	r24, r24
    1714:	19 f0       	breq	.+6      	; 0x171c <GPIO_readPin+0x92>
		{
			pin_value = LOGIC_HIGH;
    1716:	81 e0       	ldi	r24, 0x01	; 1
    1718:	89 83       	std	Y+1, r24	; 0x01
    171a:	49 c0       	rjmp	.+146    	; 0x17ae <GPIO_readPin+0x124>
		}
		else
		{
			pin_value = LOGIC_LOW;
    171c:	19 82       	std	Y+1, r1	; 0x01
    171e:	47 c0       	rjmp	.+142    	; 0x17ae <GPIO_readPin+0x124>
		}
		break;
		case PORTB_ID: if(BIT_IS_SET(PINB,pin_num))
    1720:	e6 e3       	ldi	r30, 0x36	; 54
    1722:	f0 e0       	ldi	r31, 0x00	; 0
    1724:	80 81       	ld	r24, Z
    1726:	28 2f       	mov	r18, r24
    1728:	30 e0       	ldi	r19, 0x00	; 0
    172a:	8b 81       	ldd	r24, Y+3	; 0x03
    172c:	88 2f       	mov	r24, r24
    172e:	90 e0       	ldi	r25, 0x00	; 0
    1730:	a9 01       	movw	r20, r18
    1732:	02 c0       	rjmp	.+4      	; 0x1738 <GPIO_readPin+0xae>
    1734:	55 95       	asr	r21
    1736:	47 95       	ror	r20
    1738:	8a 95       	dec	r24
    173a:	e2 f7       	brpl	.-8      	; 0x1734 <GPIO_readPin+0xaa>
    173c:	ca 01       	movw	r24, r20
    173e:	81 70       	andi	r24, 0x01	; 1
    1740:	90 70       	andi	r25, 0x00	; 0
    1742:	88 23       	and	r24, r24
    1744:	19 f0       	breq	.+6      	; 0x174c <GPIO_readPin+0xc2>
		{
			pin_value = LOGIC_HIGH;
    1746:	81 e0       	ldi	r24, 0x01	; 1
    1748:	89 83       	std	Y+1, r24	; 0x01
    174a:	31 c0       	rjmp	.+98     	; 0x17ae <GPIO_readPin+0x124>
		}
		else
		{
			pin_value = LOGIC_LOW;
    174c:	19 82       	std	Y+1, r1	; 0x01
    174e:	2f c0       	rjmp	.+94     	; 0x17ae <GPIO_readPin+0x124>
		}
		break;
		case PORTC_ID: if(BIT_IS_SET(PINC,pin_num))
    1750:	e3 e3       	ldi	r30, 0x33	; 51
    1752:	f0 e0       	ldi	r31, 0x00	; 0
    1754:	80 81       	ld	r24, Z
    1756:	28 2f       	mov	r18, r24
    1758:	30 e0       	ldi	r19, 0x00	; 0
    175a:	8b 81       	ldd	r24, Y+3	; 0x03
    175c:	88 2f       	mov	r24, r24
    175e:	90 e0       	ldi	r25, 0x00	; 0
    1760:	a9 01       	movw	r20, r18
    1762:	02 c0       	rjmp	.+4      	; 0x1768 <GPIO_readPin+0xde>
    1764:	55 95       	asr	r21
    1766:	47 95       	ror	r20
    1768:	8a 95       	dec	r24
    176a:	e2 f7       	brpl	.-8      	; 0x1764 <GPIO_readPin+0xda>
    176c:	ca 01       	movw	r24, r20
    176e:	81 70       	andi	r24, 0x01	; 1
    1770:	90 70       	andi	r25, 0x00	; 0
    1772:	88 23       	and	r24, r24
    1774:	19 f0       	breq	.+6      	; 0x177c <GPIO_readPin+0xf2>
		{
			pin_value = LOGIC_HIGH;
    1776:	81 e0       	ldi	r24, 0x01	; 1
    1778:	89 83       	std	Y+1, r24	; 0x01
    177a:	19 c0       	rjmp	.+50     	; 0x17ae <GPIO_readPin+0x124>
		}
		else
		{
			pin_value = LOGIC_LOW;
    177c:	19 82       	std	Y+1, r1	; 0x01
    177e:	17 c0       	rjmp	.+46     	; 0x17ae <GPIO_readPin+0x124>
		}
		break;
		case PORTD_ID: if(BIT_IS_SET(PIND,pin_num))
    1780:	e0 e3       	ldi	r30, 0x30	; 48
    1782:	f0 e0       	ldi	r31, 0x00	; 0
    1784:	80 81       	ld	r24, Z
    1786:	28 2f       	mov	r18, r24
    1788:	30 e0       	ldi	r19, 0x00	; 0
    178a:	8b 81       	ldd	r24, Y+3	; 0x03
    178c:	88 2f       	mov	r24, r24
    178e:	90 e0       	ldi	r25, 0x00	; 0
    1790:	a9 01       	movw	r20, r18
    1792:	02 c0       	rjmp	.+4      	; 0x1798 <GPIO_readPin+0x10e>
    1794:	55 95       	asr	r21
    1796:	47 95       	ror	r20
    1798:	8a 95       	dec	r24
    179a:	e2 f7       	brpl	.-8      	; 0x1794 <GPIO_readPin+0x10a>
    179c:	ca 01       	movw	r24, r20
    179e:	81 70       	andi	r24, 0x01	; 1
    17a0:	90 70       	andi	r25, 0x00	; 0
    17a2:	88 23       	and	r24, r24
    17a4:	19 f0       	breq	.+6      	; 0x17ac <GPIO_readPin+0x122>
		{
			pin_value = LOGIC_HIGH;
    17a6:	81 e0       	ldi	r24, 0x01	; 1
    17a8:	89 83       	std	Y+1, r24	; 0x01
    17aa:	01 c0       	rjmp	.+2      	; 0x17ae <GPIO_readPin+0x124>
		}
		else
		{
			pin_value = LOGIC_LOW;
    17ac:	19 82       	std	Y+1, r1	; 0x01
		}
		break;
		}
	}
	return pin_value;
    17ae:	89 81       	ldd	r24, Y+1	; 0x01
}
    17b0:	0f 90       	pop	r0
    17b2:	0f 90       	pop	r0
    17b4:	0f 90       	pop	r0
    17b6:	0f 90       	pop	r0
    17b8:	0f 90       	pop	r0
    17ba:	cf 91       	pop	r28
    17bc:	df 91       	pop	r29
    17be:	08 95       	ret

000017c0 <GPIO_setupPortDirection>:

/*
 * Description:
 * configure the port direction input/output
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction){
    17c0:	df 93       	push	r29
    17c2:	cf 93       	push	r28
    17c4:	00 d0       	rcall	.+0      	; 0x17c6 <GPIO_setupPortDirection+0x6>
    17c6:	00 d0       	rcall	.+0      	; 0x17c8 <GPIO_setupPortDirection+0x8>
    17c8:	cd b7       	in	r28, 0x3d	; 61
    17ca:	de b7       	in	r29, 0x3e	; 62
    17cc:	89 83       	std	Y+1, r24	; 0x01
    17ce:	6a 83       	std	Y+2, r22	; 0x02
	if(port_num>= NUM_OF_PORTS)
    17d0:	89 81       	ldd	r24, Y+1	; 0x01
    17d2:	84 30       	cpi	r24, 0x04	; 4
    17d4:	90 f5       	brcc	.+100    	; 0x183a <GPIO_setupPortDirection+0x7a>
	{
		/* Do nothing */
	}
	else
	{
		switch(port_num)
    17d6:	89 81       	ldd	r24, Y+1	; 0x01
    17d8:	28 2f       	mov	r18, r24
    17da:	30 e0       	ldi	r19, 0x00	; 0
    17dc:	3c 83       	std	Y+4, r19	; 0x04
    17de:	2b 83       	std	Y+3, r18	; 0x03
    17e0:	8b 81       	ldd	r24, Y+3	; 0x03
    17e2:	9c 81       	ldd	r25, Y+4	; 0x04
    17e4:	81 30       	cpi	r24, 0x01	; 1
    17e6:	91 05       	cpc	r25, r1
    17e8:	d1 f0       	breq	.+52     	; 0x181e <GPIO_setupPortDirection+0x5e>
    17ea:	2b 81       	ldd	r18, Y+3	; 0x03
    17ec:	3c 81       	ldd	r19, Y+4	; 0x04
    17ee:	22 30       	cpi	r18, 0x02	; 2
    17f0:	31 05       	cpc	r19, r1
    17f2:	2c f4       	brge	.+10     	; 0x17fe <GPIO_setupPortDirection+0x3e>
    17f4:	8b 81       	ldd	r24, Y+3	; 0x03
    17f6:	9c 81       	ldd	r25, Y+4	; 0x04
    17f8:	00 97       	sbiw	r24, 0x00	; 0
    17fa:	61 f0       	breq	.+24     	; 0x1814 <GPIO_setupPortDirection+0x54>
    17fc:	1e c0       	rjmp	.+60     	; 0x183a <GPIO_setupPortDirection+0x7a>
    17fe:	2b 81       	ldd	r18, Y+3	; 0x03
    1800:	3c 81       	ldd	r19, Y+4	; 0x04
    1802:	22 30       	cpi	r18, 0x02	; 2
    1804:	31 05       	cpc	r19, r1
    1806:	81 f0       	breq	.+32     	; 0x1828 <GPIO_setupPortDirection+0x68>
    1808:	8b 81       	ldd	r24, Y+3	; 0x03
    180a:	9c 81       	ldd	r25, Y+4	; 0x04
    180c:	83 30       	cpi	r24, 0x03	; 3
    180e:	91 05       	cpc	r25, r1
    1810:	81 f0       	breq	.+32     	; 0x1832 <GPIO_setupPortDirection+0x72>
    1812:	13 c0       	rjmp	.+38     	; 0x183a <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID: DDRA = direction;
    1814:	ea e3       	ldi	r30, 0x3A	; 58
    1816:	f0 e0       	ldi	r31, 0x00	; 0
    1818:	8a 81       	ldd	r24, Y+2	; 0x02
    181a:	80 83       	st	Z, r24
    181c:	0e c0       	rjmp	.+28     	; 0x183a <GPIO_setupPortDirection+0x7a>
		break;
		case PORTB_ID: DDRB = direction;
    181e:	e7 e3       	ldi	r30, 0x37	; 55
    1820:	f0 e0       	ldi	r31, 0x00	; 0
    1822:	8a 81       	ldd	r24, Y+2	; 0x02
    1824:	80 83       	st	Z, r24
    1826:	09 c0       	rjmp	.+18     	; 0x183a <GPIO_setupPortDirection+0x7a>
		break;
		case PORTC_ID: DDRC = direction;
    1828:	e4 e3       	ldi	r30, 0x34	; 52
    182a:	f0 e0       	ldi	r31, 0x00	; 0
    182c:	8a 81       	ldd	r24, Y+2	; 0x02
    182e:	80 83       	st	Z, r24
    1830:	04 c0       	rjmp	.+8      	; 0x183a <GPIO_setupPortDirection+0x7a>
		break;
		case PORTD_ID: DDRD = direction;
    1832:	e1 e3       	ldi	r30, 0x31	; 49
    1834:	f0 e0       	ldi	r31, 0x00	; 0
    1836:	8a 81       	ldd	r24, Y+2	; 0x02
    1838:	80 83       	st	Z, r24
		break;
		}
	}
}
    183a:	0f 90       	pop	r0
    183c:	0f 90       	pop	r0
    183e:	0f 90       	pop	r0
    1840:	0f 90       	pop	r0
    1842:	cf 91       	pop	r28
    1844:	df 91       	pop	r29
    1846:	08 95       	ret

00001848 <GPIO_writePort>:
 * Description:
 * if the port is output it will write logic high or logic low
 * if the port is input it will enable the pull up resistor if it write logic high
 */

void GPIO_writePort(uint8 port_num, uint8 value){
    1848:	df 93       	push	r29
    184a:	cf 93       	push	r28
    184c:	00 d0       	rcall	.+0      	; 0x184e <GPIO_writePort+0x6>
    184e:	00 d0       	rcall	.+0      	; 0x1850 <GPIO_writePort+0x8>
    1850:	cd b7       	in	r28, 0x3d	; 61
    1852:	de b7       	in	r29, 0x3e	; 62
    1854:	89 83       	std	Y+1, r24	; 0x01
    1856:	6a 83       	std	Y+2, r22	; 0x02
	if(port_num>= NUM_OF_PORTS)
    1858:	89 81       	ldd	r24, Y+1	; 0x01
    185a:	84 30       	cpi	r24, 0x04	; 4
    185c:	90 f5       	brcc	.+100    	; 0x18c2 <GPIO_writePort+0x7a>
	{
		/* Do nothing */
	}
	else
	{
		switch(port_num)
    185e:	89 81       	ldd	r24, Y+1	; 0x01
    1860:	28 2f       	mov	r18, r24
    1862:	30 e0       	ldi	r19, 0x00	; 0
    1864:	3c 83       	std	Y+4, r19	; 0x04
    1866:	2b 83       	std	Y+3, r18	; 0x03
    1868:	8b 81       	ldd	r24, Y+3	; 0x03
    186a:	9c 81       	ldd	r25, Y+4	; 0x04
    186c:	81 30       	cpi	r24, 0x01	; 1
    186e:	91 05       	cpc	r25, r1
    1870:	d1 f0       	breq	.+52     	; 0x18a6 <GPIO_writePort+0x5e>
    1872:	2b 81       	ldd	r18, Y+3	; 0x03
    1874:	3c 81       	ldd	r19, Y+4	; 0x04
    1876:	22 30       	cpi	r18, 0x02	; 2
    1878:	31 05       	cpc	r19, r1
    187a:	2c f4       	brge	.+10     	; 0x1886 <GPIO_writePort+0x3e>
    187c:	8b 81       	ldd	r24, Y+3	; 0x03
    187e:	9c 81       	ldd	r25, Y+4	; 0x04
    1880:	00 97       	sbiw	r24, 0x00	; 0
    1882:	61 f0       	breq	.+24     	; 0x189c <GPIO_writePort+0x54>
    1884:	1e c0       	rjmp	.+60     	; 0x18c2 <GPIO_writePort+0x7a>
    1886:	2b 81       	ldd	r18, Y+3	; 0x03
    1888:	3c 81       	ldd	r19, Y+4	; 0x04
    188a:	22 30       	cpi	r18, 0x02	; 2
    188c:	31 05       	cpc	r19, r1
    188e:	81 f0       	breq	.+32     	; 0x18b0 <GPIO_writePort+0x68>
    1890:	8b 81       	ldd	r24, Y+3	; 0x03
    1892:	9c 81       	ldd	r25, Y+4	; 0x04
    1894:	83 30       	cpi	r24, 0x03	; 3
    1896:	91 05       	cpc	r25, r1
    1898:	81 f0       	breq	.+32     	; 0x18ba <GPIO_writePort+0x72>
    189a:	13 c0       	rjmp	.+38     	; 0x18c2 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    189c:	eb e3       	ldi	r30, 0x3B	; 59
    189e:	f0 e0       	ldi	r31, 0x00	; 0
    18a0:	8a 81       	ldd	r24, Y+2	; 0x02
    18a2:	80 83       	st	Z, r24
    18a4:	0e c0       	rjmp	.+28     	; 0x18c2 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    18a6:	e8 e3       	ldi	r30, 0x38	; 56
    18a8:	f0 e0       	ldi	r31, 0x00	; 0
    18aa:	8a 81       	ldd	r24, Y+2	; 0x02
    18ac:	80 83       	st	Z, r24
    18ae:	09 c0       	rjmp	.+18     	; 0x18c2 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    18b0:	e5 e3       	ldi	r30, 0x35	; 53
    18b2:	f0 e0       	ldi	r31, 0x00	; 0
    18b4:	8a 81       	ldd	r24, Y+2	; 0x02
    18b6:	80 83       	st	Z, r24
    18b8:	04 c0       	rjmp	.+8      	; 0x18c2 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    18ba:	e2 e3       	ldi	r30, 0x32	; 50
    18bc:	f0 e0       	ldi	r31, 0x00	; 0
    18be:	8a 81       	ldd	r24, Y+2	; 0x02
    18c0:	80 83       	st	Z, r24
			break;
		}
	}
}
    18c2:	0f 90       	pop	r0
    18c4:	0f 90       	pop	r0
    18c6:	0f 90       	pop	r0
    18c8:	0f 90       	pop	r0
    18ca:	cf 91       	pop	r28
    18cc:	df 91       	pop	r29
    18ce:	08 95       	ret

000018d0 <GPIO_readPort>:
/*
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num){
    18d0:	df 93       	push	r29
    18d2:	cf 93       	push	r28
    18d4:	00 d0       	rcall	.+0      	; 0x18d6 <GPIO_readPort+0x6>
    18d6:	00 d0       	rcall	.+0      	; 0x18d8 <GPIO_readPort+0x8>
    18d8:	cd b7       	in	r28, 0x3d	; 61
    18da:	de b7       	in	r29, 0x3e	; 62
    18dc:	8a 83       	std	Y+2, r24	; 0x02

	uint8 value = LOGIC_LOW;
    18de:	19 82       	std	Y+1, r1	; 0x01
	if(port_num>= NUM_OF_PORTS)
    18e0:	8a 81       	ldd	r24, Y+2	; 0x02
    18e2:	84 30       	cpi	r24, 0x04	; 4
    18e4:	90 f5       	brcc	.+100    	; 0x194a <GPIO_readPort+0x7a>
	{
		/* Do nothing */
	}
	else
	{
		switch(port_num)
    18e6:	8a 81       	ldd	r24, Y+2	; 0x02
    18e8:	28 2f       	mov	r18, r24
    18ea:	30 e0       	ldi	r19, 0x00	; 0
    18ec:	3c 83       	std	Y+4, r19	; 0x04
    18ee:	2b 83       	std	Y+3, r18	; 0x03
    18f0:	8b 81       	ldd	r24, Y+3	; 0x03
    18f2:	9c 81       	ldd	r25, Y+4	; 0x04
    18f4:	81 30       	cpi	r24, 0x01	; 1
    18f6:	91 05       	cpc	r25, r1
    18f8:	d1 f0       	breq	.+52     	; 0x192e <GPIO_readPort+0x5e>
    18fa:	2b 81       	ldd	r18, Y+3	; 0x03
    18fc:	3c 81       	ldd	r19, Y+4	; 0x04
    18fe:	22 30       	cpi	r18, 0x02	; 2
    1900:	31 05       	cpc	r19, r1
    1902:	2c f4       	brge	.+10     	; 0x190e <GPIO_readPort+0x3e>
    1904:	8b 81       	ldd	r24, Y+3	; 0x03
    1906:	9c 81       	ldd	r25, Y+4	; 0x04
    1908:	00 97       	sbiw	r24, 0x00	; 0
    190a:	61 f0       	breq	.+24     	; 0x1924 <GPIO_readPort+0x54>
    190c:	1e c0       	rjmp	.+60     	; 0x194a <GPIO_readPort+0x7a>
    190e:	2b 81       	ldd	r18, Y+3	; 0x03
    1910:	3c 81       	ldd	r19, Y+4	; 0x04
    1912:	22 30       	cpi	r18, 0x02	; 2
    1914:	31 05       	cpc	r19, r1
    1916:	81 f0       	breq	.+32     	; 0x1938 <GPIO_readPort+0x68>
    1918:	8b 81       	ldd	r24, Y+3	; 0x03
    191a:	9c 81       	ldd	r25, Y+4	; 0x04
    191c:	83 30       	cpi	r24, 0x03	; 3
    191e:	91 05       	cpc	r25, r1
    1920:	81 f0       	breq	.+32     	; 0x1942 <GPIO_readPort+0x72>
    1922:	13 c0       	rjmp	.+38     	; 0x194a <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1924:	e9 e3       	ldi	r30, 0x39	; 57
    1926:	f0 e0       	ldi	r31, 0x00	; 0
    1928:	80 81       	ld	r24, Z
    192a:	89 83       	std	Y+1, r24	; 0x01
    192c:	0e c0       	rjmp	.+28     	; 0x194a <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    192e:	e6 e3       	ldi	r30, 0x36	; 54
    1930:	f0 e0       	ldi	r31, 0x00	; 0
    1932:	80 81       	ld	r24, Z
    1934:	89 83       	std	Y+1, r24	; 0x01
    1936:	09 c0       	rjmp	.+18     	; 0x194a <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1938:	e3 e3       	ldi	r30, 0x33	; 51
    193a:	f0 e0       	ldi	r31, 0x00	; 0
    193c:	80 81       	ld	r24, Z
    193e:	89 83       	std	Y+1, r24	; 0x01
    1940:	04 c0       	rjmp	.+8      	; 0x194a <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1942:	e0 e3       	ldi	r30, 0x30	; 48
    1944:	f0 e0       	ldi	r31, 0x00	; 0
    1946:	80 81       	ld	r24, Z
    1948:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}
	return value;
    194a:	89 81       	ldd	r24, Y+1	; 0x01
}
    194c:	0f 90       	pop	r0
    194e:	0f 90       	pop	r0
    1950:	0f 90       	pop	r0
    1952:	0f 90       	pop	r0
    1954:	cf 91       	pop	r28
    1956:	df 91       	pop	r29
    1958:	08 95       	ret

0000195a <TWI_init>:
 * Description:
 * 1- Enable I2C
 * 2- Setup the bit rate
 * 3- Setup the address
 */
void TWI_init(const TWI_ConfigType * Config_Ptr){
    195a:	df 93       	push	r29
    195c:	cf 93       	push	r28
    195e:	00 d0       	rcall	.+0      	; 0x1960 <TWI_init+0x6>
    1960:	cd b7       	in	r28, 0x3d	; 61
    1962:	de b7       	in	r29, 0x3e	; 62
    1964:	9a 83       	std	Y+2, r25	; 0x02
    1966:	89 83       	std	Y+1, r24	; 0x01
	/*configure the bit rate and the pre-scaler */
	TWBR = Config_Ptr->bit_rate;
    1968:	a0 e2       	ldi	r26, 0x20	; 32
    196a:	b0 e0       	ldi	r27, 0x00	; 0
    196c:	e9 81       	ldd	r30, Y+1	; 0x01
    196e:	fa 81       	ldd	r31, Y+2	; 0x02
    1970:	80 81       	ld	r24, Z
    1972:	8c 93       	st	X, r24
	TWSR = Config_Ptr->pre_scaler&0x03;
    1974:	a1 e2       	ldi	r26, 0x21	; 33
    1976:	b0 e0       	ldi	r27, 0x00	; 0
    1978:	e9 81       	ldd	r30, Y+1	; 0x01
    197a:	fa 81       	ldd	r31, Y+2	; 0x02
    197c:	81 81       	ldd	r24, Z+1	; 0x01
    197e:	83 70       	andi	r24, 0x03	; 3
    1980:	8c 93       	st	X, r24

	/* Passing the address of the slave
	   General Call Recognition: Off */
	TWAR = (Config_Ptr->address<<1);
    1982:	a2 e2       	ldi	r26, 0x22	; 34
    1984:	b0 e0       	ldi	r27, 0x00	; 0
    1986:	e9 81       	ldd	r30, Y+1	; 0x01
    1988:	fa 81       	ldd	r31, Y+2	; 0x02
    198a:	82 81       	ldd	r24, Z+2	; 0x02
    198c:	88 0f       	add	r24, r24
    198e:	8c 93       	st	X, r24

	TWCR = (1<<TWEN); /* enable TWI */
    1990:	e6 e5       	ldi	r30, 0x56	; 86
    1992:	f0 e0       	ldi	r31, 0x00	; 0
    1994:	84 e0       	ldi	r24, 0x04	; 4
    1996:	80 83       	st	Z, r24
}
    1998:	0f 90       	pop	r0
    199a:	0f 90       	pop	r0
    199c:	cf 91       	pop	r28
    199e:	df 91       	pop	r29
    19a0:	08 95       	ret

000019a2 <TWI_start>:
/*
 * Description:
 * send the start bit
 * Enable TWI Module
 */
void TWI_start(void){
    19a2:	df 93       	push	r29
    19a4:	cf 93       	push	r28
    19a6:	cd b7       	in	r28, 0x3d	; 61
    19a8:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1
	 */
	TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    19aa:	e6 e5       	ldi	r30, 0x56	; 86
    19ac:	f0 e0       	ldi	r31, 0x00	; 0
    19ae:	84 ea       	ldi	r24, 0xA4	; 164
    19b0:	80 83       	st	Z, r24

	/* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
	while(BIT_IS_CLEAR(TWCR,TWINT));
    19b2:	e6 e5       	ldi	r30, 0x56	; 86
    19b4:	f0 e0       	ldi	r31, 0x00	; 0
    19b6:	80 81       	ld	r24, Z
    19b8:	88 23       	and	r24, r24
    19ba:	dc f7       	brge	.-10     	; 0x19b2 <TWI_start+0x10>
}
    19bc:	cf 91       	pop	r28
    19be:	df 91       	pop	r29
    19c0:	08 95       	ret

000019c2 <TWI_stop>:
/*
 * Description:
 * send the stop bit
 * Enable TWI Module
 */
void TWI_stop(void){
    19c2:	df 93       	push	r29
    19c4:	cf 93       	push	r28
    19c6:	cd b7       	in	r28, 0x3d	; 61
    19c8:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1
	 */
	TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    19ca:	e6 e5       	ldi	r30, 0x56	; 86
    19cc:	f0 e0       	ldi	r31, 0x00	; 0
    19ce:	84 e9       	ldi	r24, 0x94	; 148
    19d0:	80 83       	st	Z, r24
}
    19d2:	cf 91       	pop	r28
    19d4:	df 91       	pop	r29
    19d6:	08 95       	ret

000019d8 <TWI_writeByte>:

/*
 * Description:
 * send the data to the data register
 */
void TWI_writeByte(uint8 data){
    19d8:	df 93       	push	r29
    19da:	cf 93       	push	r28
    19dc:	0f 92       	push	r0
    19de:	cd b7       	in	r28, 0x3d	; 61
    19e0:	de b7       	in	r29, 0x3e	; 62
    19e2:	89 83       	std	Y+1, r24	; 0x01
	/* Put data On TWI data Register */
	TWDR = data;
    19e4:	e3 e2       	ldi	r30, 0x23	; 35
    19e6:	f0 e0       	ldi	r31, 0x00	; 0
    19e8:	89 81       	ldd	r24, Y+1	; 0x01
    19ea:	80 83       	st	Z, r24
	/*
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1
	 */
	TWCR = (1 << TWINT) | (1 << TWEN);
    19ec:	e6 e5       	ldi	r30, 0x56	; 86
    19ee:	f0 e0       	ldi	r31, 0x00	; 0
    19f0:	84 e8       	ldi	r24, 0x84	; 132
    19f2:	80 83       	st	Z, r24
	/* Wait for TWINT flag set in TWCR Register(data is send successfully) */
	while(BIT_IS_CLEAR(TWCR,TWINT));
    19f4:	e6 e5       	ldi	r30, 0x56	; 86
    19f6:	f0 e0       	ldi	r31, 0x00	; 0
    19f8:	80 81       	ld	r24, Z
    19fa:	88 23       	and	r24, r24
    19fc:	dc f7       	brge	.-10     	; 0x19f4 <TWI_writeByte+0x1c>
}
    19fe:	0f 90       	pop	r0
    1a00:	cf 91       	pop	r28
    1a02:	df 91       	pop	r29
    1a04:	08 95       	ret

00001a06 <TWI_readByteWithACK>:

/*
 * Description:
 * reading the data with ACK
 */
uint8 TWI_readByteWithACK(void){
    1a06:	df 93       	push	r29
    1a08:	cf 93       	push	r28
    1a0a:	cd b7       	in	r28, 0x3d	; 61
    1a0c:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1
	 */
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    1a0e:	e6 e5       	ldi	r30, 0x56	; 86
    1a10:	f0 e0       	ldi	r31, 0x00	; 0
    1a12:	84 ec       	ldi	r24, 0xC4	; 196
    1a14:	80 83       	st	Z, r24
	/* Wait for TWINT flag set in TWCR Register (data received successfully) */
	while(BIT_IS_CLEAR(TWCR,TWINT));
    1a16:	e6 e5       	ldi	r30, 0x56	; 86
    1a18:	f0 e0       	ldi	r31, 0x00	; 0
    1a1a:	80 81       	ld	r24, Z
    1a1c:	88 23       	and	r24, r24
    1a1e:	dc f7       	brge	.-10     	; 0x1a16 <TWI_readByteWithACK+0x10>
	/* Read Data */
	return TWDR;
    1a20:	e3 e2       	ldi	r30, 0x23	; 35
    1a22:	f0 e0       	ldi	r31, 0x00	; 0
    1a24:	80 81       	ld	r24, Z
}
    1a26:	cf 91       	pop	r28
    1a28:	df 91       	pop	r29
    1a2a:	08 95       	ret

00001a2c <TWI_readByteWithNACK>:

/*
 * Description:
 * reading the data with NACK
 */
uint8 TWI_readByteWithNACK(void){
    1a2c:	df 93       	push	r29
    1a2e:	cf 93       	push	r28
    1a30:	cd b7       	in	r28, 0x3d	; 61
    1a32:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1
	 */
	TWCR = (1 << TWINT) | (1 << TWEN);
    1a34:	e6 e5       	ldi	r30, 0x56	; 86
    1a36:	f0 e0       	ldi	r31, 0x00	; 0
    1a38:	84 e8       	ldi	r24, 0x84	; 132
    1a3a:	80 83       	st	Z, r24
	/* Wait for TWINT flag set in TWCR Register (data received successfully) */
	while(BIT_IS_CLEAR(TWCR,TWINT));
    1a3c:	e6 e5       	ldi	r30, 0x56	; 86
    1a3e:	f0 e0       	ldi	r31, 0x00	; 0
    1a40:	80 81       	ld	r24, Z
    1a42:	88 23       	and	r24, r24
    1a44:	dc f7       	brge	.-10     	; 0x1a3c <TWI_readByteWithNACK+0x10>
	/* Read Data */
	return TWDR;
    1a46:	e3 e2       	ldi	r30, 0x23	; 35
    1a48:	f0 e0       	ldi	r31, 0x00	; 0
    1a4a:	80 81       	ld	r24, Z
}
    1a4c:	cf 91       	pop	r28
    1a4e:	df 91       	pop	r29
    1a50:	08 95       	ret

00001a52 <TWI_getStatus>:

uint8 TWI_getStatus(void){
    1a52:	df 93       	push	r29
    1a54:	cf 93       	push	r28
    1a56:	0f 92       	push	r0
    1a58:	cd b7       	in	r28, 0x3d	; 61
    1a5a:	de b7       	in	r29, 0x3e	; 62
	uint8 status;
	    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
	    status = TWSR & 0xF8;
    1a5c:	e1 e2       	ldi	r30, 0x21	; 33
    1a5e:	f0 e0       	ldi	r31, 0x00	; 0
    1a60:	80 81       	ld	r24, Z
    1a62:	88 7f       	andi	r24, 0xF8	; 248
    1a64:	89 83       	std	Y+1, r24	; 0x01
	    return status;
    1a66:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a68:	0f 90       	pop	r0
    1a6a:	cf 91       	pop	r28
    1a6c:	df 91       	pop	r29
    1a6e:	08 95       	ret

00001a70 <DcMotor_Init>:
 *The Function responsible for setup the direction for the two
 *motor pins through the GPIO driver.
 *Stop at the DC-Motor at the beginning through the GPIO driver.
 */
void DcMotor_Init(void)
{/* configure pin PB0 and PB1 as output pins */
    1a70:	df 93       	push	r29
    1a72:	cf 93       	push	r28
    1a74:	cd b7       	in	r28, 0x3d	; 61
    1a76:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(PORTB_ID,PIN0_ID,PIN_OUTPUT);
    1a78:	81 e0       	ldi	r24, 0x01	; 1
    1a7a:	60 e0       	ldi	r22, 0x00	; 0
    1a7c:	41 e0       	ldi	r20, 0x01	; 1
    1a7e:	0e 94 3d 09 	call	0x127a	; 0x127a <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTB_ID,PIN1_ID,PIN_OUTPUT);
    1a82:	81 e0       	ldi	r24, 0x01	; 1
    1a84:	61 e0       	ldi	r22, 0x01	; 1
    1a86:	41 e0       	ldi	r20, 0x01	; 1
    1a88:	0e 94 3d 09 	call	0x127a	; 0x127a <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTB_ID,PIN2_ID,PIN_OUTPUT);
    1a8c:	81 e0       	ldi	r24, 0x01	; 1
    1a8e:	62 e0       	ldi	r22, 0x02	; 2
    1a90:	41 e0       	ldi	r20, 0x01	; 1
    1a92:	0e 94 3d 09 	call	0x127a	; 0x127a <GPIO_setupPinDirection>
	/* Motor is stop at the beginning */
	GPIO_writePin(PORTB_ID,PIN0_ID, LOGIC_LOW);
    1a96:	81 e0       	ldi	r24, 0x01	; 1
    1a98:	60 e0       	ldi	r22, 0x00	; 0
    1a9a:	40 e0       	ldi	r20, 0x00	; 0
    1a9c:	0e 94 41 0a 	call	0x1482	; 0x1482 <GPIO_writePin>
	GPIO_writePin(PORTB_ID,PIN1_ID, LOGIC_LOW);
    1aa0:	81 e0       	ldi	r24, 0x01	; 1
    1aa2:	61 e0       	ldi	r22, 0x01	; 1
    1aa4:	40 e0       	ldi	r20, 0x00	; 0
    1aa6:	0e 94 41 0a 	call	0x1482	; 0x1482 <GPIO_writePin>
	GPIO_writePin(PORTB_ID,PIN2_ID, LOGIC_LOW);
    1aaa:	81 e0       	ldi	r24, 0x01	; 1
    1aac:	62 e0       	ldi	r22, 0x02	; 2
    1aae:	40 e0       	ldi	r20, 0x00	; 0
    1ab0:	0e 94 41 0a 	call	0x1482	; 0x1482 <GPIO_writePin>
}
    1ab4:	cf 91       	pop	r28
    1ab6:	df 91       	pop	r29
    1ab8:	08 95       	ret

00001aba <DcMotor_Rotate>:
 *stop the motor based on the state input state value.
 *Send the required duty cycle to the PWM driver based on the
 *required speed value.
 */
void DcMotor_Rotate(DcMotor_State state)
{
    1aba:	df 93       	push	r29
    1abc:	cf 93       	push	r28
    1abe:	00 d0       	rcall	.+0      	; 0x1ac0 <DcMotor_Rotate+0x6>
    1ac0:	0f 92       	push	r0
    1ac2:	cd b7       	in	r28, 0x3d	; 61
    1ac4:	de b7       	in	r29, 0x3e	; 62
    1ac6:	89 83       	std	Y+1, r24	; 0x01
	switch(state)
    1ac8:	89 81       	ldd	r24, Y+1	; 0x01
    1aca:	28 2f       	mov	r18, r24
    1acc:	30 e0       	ldi	r19, 0x00	; 0
    1ace:	3b 83       	std	Y+3, r19	; 0x03
    1ad0:	2a 83       	std	Y+2, r18	; 0x02
    1ad2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ad4:	9b 81       	ldd	r25, Y+3	; 0x03
    1ad6:	81 30       	cpi	r24, 0x01	; 1
    1ad8:	91 05       	cpc	r25, r1
    1ada:	a1 f0       	breq	.+40     	; 0x1b04 <DcMotor_Rotate+0x4a>
    1adc:	2a 81       	ldd	r18, Y+2	; 0x02
    1ade:	3b 81       	ldd	r19, Y+3	; 0x03
    1ae0:	22 30       	cpi	r18, 0x02	; 2
    1ae2:	31 05       	cpc	r19, r1
    1ae4:	d1 f0       	breq	.+52     	; 0x1b1a <DcMotor_Rotate+0x60>
    1ae6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ae8:	9b 81       	ldd	r25, Y+3	; 0x03
    1aea:	00 97       	sbiw	r24, 0x00	; 0
    1aec:	01 f5       	brne	.+64     	; 0x1b2e <DcMotor_Rotate+0x74>
	{
	case STOP:
		GPIO_writePin(PORTB_ID,PIN0_ID, LOGIC_LOW);
    1aee:	81 e0       	ldi	r24, 0x01	; 1
    1af0:	60 e0       	ldi	r22, 0x00	; 0
    1af2:	40 e0       	ldi	r20, 0x00	; 0
    1af4:	0e 94 41 0a 	call	0x1482	; 0x1482 <GPIO_writePin>
		GPIO_writePin(PORTB_ID,PIN1_ID, LOGIC_LOW);
    1af8:	81 e0       	ldi	r24, 0x01	; 1
    1afa:	61 e0       	ldi	r22, 0x01	; 1
    1afc:	40 e0       	ldi	r20, 0x00	; 0
    1afe:	0e 94 41 0a 	call	0x1482	; 0x1482 <GPIO_writePin>
    1b02:	15 c0       	rjmp	.+42     	; 0x1b2e <DcMotor_Rotate+0x74>
		break;
	case CW:
		GPIO_writePin(PORTB_ID,PIN0_ID, LOGIC_HIGH);
    1b04:	81 e0       	ldi	r24, 0x01	; 1
    1b06:	60 e0       	ldi	r22, 0x00	; 0
    1b08:	41 e0       	ldi	r20, 0x01	; 1
    1b0a:	0e 94 41 0a 	call	0x1482	; 0x1482 <GPIO_writePin>
		GPIO_writePin(PORTB_ID,PIN1_ID, LOGIC_LOW);
    1b0e:	81 e0       	ldi	r24, 0x01	; 1
    1b10:	61 e0       	ldi	r22, 0x01	; 1
    1b12:	40 e0       	ldi	r20, 0x00	; 0
    1b14:	0e 94 41 0a 	call	0x1482	; 0x1482 <GPIO_writePin>
    1b18:	0a c0       	rjmp	.+20     	; 0x1b2e <DcMotor_Rotate+0x74>
		break;
	case A_CW:
		GPIO_writePin(PORTB_ID,PIN0_ID, LOGIC_LOW);
    1b1a:	81 e0       	ldi	r24, 0x01	; 1
    1b1c:	60 e0       	ldi	r22, 0x00	; 0
    1b1e:	40 e0       	ldi	r20, 0x00	; 0
    1b20:	0e 94 41 0a 	call	0x1482	; 0x1482 <GPIO_writePin>
		GPIO_writePin(PORTB_ID,PIN1_ID, LOGIC_HIGH);
    1b24:	81 e0       	ldi	r24, 0x01	; 1
    1b26:	61 e0       	ldi	r22, 0x01	; 1
    1b28:	41 e0       	ldi	r20, 0x01	; 1
    1b2a:	0e 94 41 0a 	call	0x1482	; 0x1482 <GPIO_writePin>
		break;
	}
	GPIO_writePin(PORTB_ID,PIN2_ID, LOGIC_HIGH);
    1b2e:	81 e0       	ldi	r24, 0x01	; 1
    1b30:	62 e0       	ldi	r22, 0x02	; 2
    1b32:	41 e0       	ldi	r20, 0x01	; 1
    1b34:	0e 94 41 0a 	call	0x1482	; 0x1482 <GPIO_writePin>

}
    1b38:	0f 90       	pop	r0
    1b3a:	0f 90       	pop	r0
    1b3c:	0f 90       	pop	r0
    1b3e:	cf 91       	pop	r28
    1b40:	df 91       	pop	r29
    1b42:	08 95       	ret

00001b44 <__vector_9>:
 *                       Interrupt Service Routines                            *
 *******************************************************************************/
/*
 * ISR for the over flow mode
 */
ISR(TIMER0_OVF_vect){
    1b44:	1f 92       	push	r1
    1b46:	0f 92       	push	r0
    1b48:	0f b6       	in	r0, 0x3f	; 63
    1b4a:	0f 92       	push	r0
    1b4c:	11 24       	eor	r1, r1
    1b4e:	2f 93       	push	r18
    1b50:	3f 93       	push	r19
    1b52:	4f 93       	push	r20
    1b54:	5f 93       	push	r21
    1b56:	6f 93       	push	r22
    1b58:	7f 93       	push	r23
    1b5a:	8f 93       	push	r24
    1b5c:	9f 93       	push	r25
    1b5e:	af 93       	push	r26
    1b60:	bf 93       	push	r27
    1b62:	ef 93       	push	r30
    1b64:	ff 93       	push	r31
    1b66:	df 93       	push	r29
    1b68:	cf 93       	push	r28
    1b6a:	cd b7       	in	r28, 0x3d	; 61
    1b6c:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtrT0 != NULL_PTR)
    1b6e:	80 91 86 00 	lds	r24, 0x0086
    1b72:	90 91 87 00 	lds	r25, 0x0087
    1b76:	00 97       	sbiw	r24, 0x00	; 0
    1b78:	29 f0       	breq	.+10     	; 0x1b84 <__vector_9+0x40>
	{

		(*g_callBackPtrT0)();
    1b7a:	e0 91 86 00 	lds	r30, 0x0086
    1b7e:	f0 91 87 00 	lds	r31, 0x0087
    1b82:	09 95       	icall
	}
}
    1b84:	cf 91       	pop	r28
    1b86:	df 91       	pop	r29
    1b88:	ff 91       	pop	r31
    1b8a:	ef 91       	pop	r30
    1b8c:	bf 91       	pop	r27
    1b8e:	af 91       	pop	r26
    1b90:	9f 91       	pop	r25
    1b92:	8f 91       	pop	r24
    1b94:	7f 91       	pop	r23
    1b96:	6f 91       	pop	r22
    1b98:	5f 91       	pop	r21
    1b9a:	4f 91       	pop	r20
    1b9c:	3f 91       	pop	r19
    1b9e:	2f 91       	pop	r18
    1ba0:	0f 90       	pop	r0
    1ba2:	0f be       	out	0x3f, r0	; 63
    1ba4:	0f 90       	pop	r0
    1ba6:	1f 90       	pop	r1
    1ba8:	18 95       	reti

00001baa <__vector_8>:

ISR(TIMER1_OVF_vect){
    1baa:	1f 92       	push	r1
    1bac:	0f 92       	push	r0
    1bae:	0f b6       	in	r0, 0x3f	; 63
    1bb0:	0f 92       	push	r0
    1bb2:	11 24       	eor	r1, r1
    1bb4:	2f 93       	push	r18
    1bb6:	3f 93       	push	r19
    1bb8:	4f 93       	push	r20
    1bba:	5f 93       	push	r21
    1bbc:	6f 93       	push	r22
    1bbe:	7f 93       	push	r23
    1bc0:	8f 93       	push	r24
    1bc2:	9f 93       	push	r25
    1bc4:	af 93       	push	r26
    1bc6:	bf 93       	push	r27
    1bc8:	ef 93       	push	r30
    1bca:	ff 93       	push	r31
    1bcc:	df 93       	push	r29
    1bce:	cf 93       	push	r28
    1bd0:	cd b7       	in	r28, 0x3d	; 61
    1bd2:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtrT1 != NULL_PTR)
    1bd4:	80 91 88 00 	lds	r24, 0x0088
    1bd8:	90 91 89 00 	lds	r25, 0x0089
    1bdc:	00 97       	sbiw	r24, 0x00	; 0
    1bde:	29 f0       	breq	.+10     	; 0x1bea <__vector_8+0x40>
	{

		(*g_callBackPtrT1)();
    1be0:	e0 91 88 00 	lds	r30, 0x0088
    1be4:	f0 91 89 00 	lds	r31, 0x0089
    1be8:	09 95       	icall
	}
}
    1bea:	cf 91       	pop	r28
    1bec:	df 91       	pop	r29
    1bee:	ff 91       	pop	r31
    1bf0:	ef 91       	pop	r30
    1bf2:	bf 91       	pop	r27
    1bf4:	af 91       	pop	r26
    1bf6:	9f 91       	pop	r25
    1bf8:	8f 91       	pop	r24
    1bfa:	7f 91       	pop	r23
    1bfc:	6f 91       	pop	r22
    1bfe:	5f 91       	pop	r21
    1c00:	4f 91       	pop	r20
    1c02:	3f 91       	pop	r19
    1c04:	2f 91       	pop	r18
    1c06:	0f 90       	pop	r0
    1c08:	0f be       	out	0x3f, r0	; 63
    1c0a:	0f 90       	pop	r0
    1c0c:	1f 90       	pop	r1
    1c0e:	18 95       	reti

00001c10 <__vector_4>:

ISR(TIMER2_OVF_vect){
    1c10:	1f 92       	push	r1
    1c12:	0f 92       	push	r0
    1c14:	0f b6       	in	r0, 0x3f	; 63
    1c16:	0f 92       	push	r0
    1c18:	11 24       	eor	r1, r1
    1c1a:	2f 93       	push	r18
    1c1c:	3f 93       	push	r19
    1c1e:	4f 93       	push	r20
    1c20:	5f 93       	push	r21
    1c22:	6f 93       	push	r22
    1c24:	7f 93       	push	r23
    1c26:	8f 93       	push	r24
    1c28:	9f 93       	push	r25
    1c2a:	af 93       	push	r26
    1c2c:	bf 93       	push	r27
    1c2e:	ef 93       	push	r30
    1c30:	ff 93       	push	r31
    1c32:	df 93       	push	r29
    1c34:	cf 93       	push	r28
    1c36:	cd b7       	in	r28, 0x3d	; 61
    1c38:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtrT2 != NULL_PTR)
    1c3a:	80 91 8a 00 	lds	r24, 0x008A
    1c3e:	90 91 8b 00 	lds	r25, 0x008B
    1c42:	00 97       	sbiw	r24, 0x00	; 0
    1c44:	29 f0       	breq	.+10     	; 0x1c50 <__vector_4+0x40>
	{

		(*g_callBackPtrT2)();
    1c46:	e0 91 8a 00 	lds	r30, 0x008A
    1c4a:	f0 91 8b 00 	lds	r31, 0x008B
    1c4e:	09 95       	icall
	}
}
    1c50:	cf 91       	pop	r28
    1c52:	df 91       	pop	r29
    1c54:	ff 91       	pop	r31
    1c56:	ef 91       	pop	r30
    1c58:	bf 91       	pop	r27
    1c5a:	af 91       	pop	r26
    1c5c:	9f 91       	pop	r25
    1c5e:	8f 91       	pop	r24
    1c60:	7f 91       	pop	r23
    1c62:	6f 91       	pop	r22
    1c64:	5f 91       	pop	r21
    1c66:	4f 91       	pop	r20
    1c68:	3f 91       	pop	r19
    1c6a:	2f 91       	pop	r18
    1c6c:	0f 90       	pop	r0
    1c6e:	0f be       	out	0x3f, r0	; 63
    1c70:	0f 90       	pop	r0
    1c72:	1f 90       	pop	r1
    1c74:	18 95       	reti

00001c76 <__vector_19>:
/*
 * ISR for the compare mode
 */
ISR(TIMER0_COMP_vect){
    1c76:	1f 92       	push	r1
    1c78:	0f 92       	push	r0
    1c7a:	0f b6       	in	r0, 0x3f	; 63
    1c7c:	0f 92       	push	r0
    1c7e:	11 24       	eor	r1, r1
    1c80:	2f 93       	push	r18
    1c82:	3f 93       	push	r19
    1c84:	4f 93       	push	r20
    1c86:	5f 93       	push	r21
    1c88:	6f 93       	push	r22
    1c8a:	7f 93       	push	r23
    1c8c:	8f 93       	push	r24
    1c8e:	9f 93       	push	r25
    1c90:	af 93       	push	r26
    1c92:	bf 93       	push	r27
    1c94:	ef 93       	push	r30
    1c96:	ff 93       	push	r31
    1c98:	df 93       	push	r29
    1c9a:	cf 93       	push	r28
    1c9c:	cd b7       	in	r28, 0x3d	; 61
    1c9e:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtrT0 != NULL_PTR)
    1ca0:	80 91 86 00 	lds	r24, 0x0086
    1ca4:	90 91 87 00 	lds	r25, 0x0087
    1ca8:	00 97       	sbiw	r24, 0x00	; 0
    1caa:	29 f0       	breq	.+10     	; 0x1cb6 <__vector_19+0x40>
	{

		(*g_callBackPtrT0)();
    1cac:	e0 91 86 00 	lds	r30, 0x0086
    1cb0:	f0 91 87 00 	lds	r31, 0x0087
    1cb4:	09 95       	icall
	}
}
    1cb6:	cf 91       	pop	r28
    1cb8:	df 91       	pop	r29
    1cba:	ff 91       	pop	r31
    1cbc:	ef 91       	pop	r30
    1cbe:	bf 91       	pop	r27
    1cc0:	af 91       	pop	r26
    1cc2:	9f 91       	pop	r25
    1cc4:	8f 91       	pop	r24
    1cc6:	7f 91       	pop	r23
    1cc8:	6f 91       	pop	r22
    1cca:	5f 91       	pop	r21
    1ccc:	4f 91       	pop	r20
    1cce:	3f 91       	pop	r19
    1cd0:	2f 91       	pop	r18
    1cd2:	0f 90       	pop	r0
    1cd4:	0f be       	out	0x3f, r0	; 63
    1cd6:	0f 90       	pop	r0
    1cd8:	1f 90       	pop	r1
    1cda:	18 95       	reti

00001cdc <__vector_6>:

ISR(TIMER1_COMPA_vect){
    1cdc:	1f 92       	push	r1
    1cde:	0f 92       	push	r0
    1ce0:	0f b6       	in	r0, 0x3f	; 63
    1ce2:	0f 92       	push	r0
    1ce4:	11 24       	eor	r1, r1
    1ce6:	2f 93       	push	r18
    1ce8:	3f 93       	push	r19
    1cea:	4f 93       	push	r20
    1cec:	5f 93       	push	r21
    1cee:	6f 93       	push	r22
    1cf0:	7f 93       	push	r23
    1cf2:	8f 93       	push	r24
    1cf4:	9f 93       	push	r25
    1cf6:	af 93       	push	r26
    1cf8:	bf 93       	push	r27
    1cfa:	ef 93       	push	r30
    1cfc:	ff 93       	push	r31
    1cfe:	df 93       	push	r29
    1d00:	cf 93       	push	r28
    1d02:	cd b7       	in	r28, 0x3d	; 61
    1d04:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtrT1 != NULL_PTR)
    1d06:	80 91 88 00 	lds	r24, 0x0088
    1d0a:	90 91 89 00 	lds	r25, 0x0089
    1d0e:	00 97       	sbiw	r24, 0x00	; 0
    1d10:	29 f0       	breq	.+10     	; 0x1d1c <__vector_6+0x40>
	{

		(*g_callBackPtrT1)();
    1d12:	e0 91 88 00 	lds	r30, 0x0088
    1d16:	f0 91 89 00 	lds	r31, 0x0089
    1d1a:	09 95       	icall
	}
}
    1d1c:	cf 91       	pop	r28
    1d1e:	df 91       	pop	r29
    1d20:	ff 91       	pop	r31
    1d22:	ef 91       	pop	r30
    1d24:	bf 91       	pop	r27
    1d26:	af 91       	pop	r26
    1d28:	9f 91       	pop	r25
    1d2a:	8f 91       	pop	r24
    1d2c:	7f 91       	pop	r23
    1d2e:	6f 91       	pop	r22
    1d30:	5f 91       	pop	r21
    1d32:	4f 91       	pop	r20
    1d34:	3f 91       	pop	r19
    1d36:	2f 91       	pop	r18
    1d38:	0f 90       	pop	r0
    1d3a:	0f be       	out	0x3f, r0	; 63
    1d3c:	0f 90       	pop	r0
    1d3e:	1f 90       	pop	r1
    1d40:	18 95       	reti

00001d42 <__vector_7>:
ISR(TIMER1_COMPB_vect){
    1d42:	1f 92       	push	r1
    1d44:	0f 92       	push	r0
    1d46:	0f b6       	in	r0, 0x3f	; 63
    1d48:	0f 92       	push	r0
    1d4a:	11 24       	eor	r1, r1
    1d4c:	2f 93       	push	r18
    1d4e:	3f 93       	push	r19
    1d50:	4f 93       	push	r20
    1d52:	5f 93       	push	r21
    1d54:	6f 93       	push	r22
    1d56:	7f 93       	push	r23
    1d58:	8f 93       	push	r24
    1d5a:	9f 93       	push	r25
    1d5c:	af 93       	push	r26
    1d5e:	bf 93       	push	r27
    1d60:	ef 93       	push	r30
    1d62:	ff 93       	push	r31
    1d64:	df 93       	push	r29
    1d66:	cf 93       	push	r28
    1d68:	cd b7       	in	r28, 0x3d	; 61
    1d6a:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtrT1 != NULL_PTR)
    1d6c:	80 91 88 00 	lds	r24, 0x0088
    1d70:	90 91 89 00 	lds	r25, 0x0089
    1d74:	00 97       	sbiw	r24, 0x00	; 0
    1d76:	29 f0       	breq	.+10     	; 0x1d82 <__vector_7+0x40>
	{

		(*g_callBackPtrT1)();
    1d78:	e0 91 88 00 	lds	r30, 0x0088
    1d7c:	f0 91 89 00 	lds	r31, 0x0089
    1d80:	09 95       	icall
	}
}
    1d82:	cf 91       	pop	r28
    1d84:	df 91       	pop	r29
    1d86:	ff 91       	pop	r31
    1d88:	ef 91       	pop	r30
    1d8a:	bf 91       	pop	r27
    1d8c:	af 91       	pop	r26
    1d8e:	9f 91       	pop	r25
    1d90:	8f 91       	pop	r24
    1d92:	7f 91       	pop	r23
    1d94:	6f 91       	pop	r22
    1d96:	5f 91       	pop	r21
    1d98:	4f 91       	pop	r20
    1d9a:	3f 91       	pop	r19
    1d9c:	2f 91       	pop	r18
    1d9e:	0f 90       	pop	r0
    1da0:	0f be       	out	0x3f, r0	; 63
    1da2:	0f 90       	pop	r0
    1da4:	1f 90       	pop	r1
    1da6:	18 95       	reti

00001da8 <__vector_3>:
ISR(TIMER2_COMP_vect){
    1da8:	1f 92       	push	r1
    1daa:	0f 92       	push	r0
    1dac:	0f b6       	in	r0, 0x3f	; 63
    1dae:	0f 92       	push	r0
    1db0:	11 24       	eor	r1, r1
    1db2:	2f 93       	push	r18
    1db4:	3f 93       	push	r19
    1db6:	4f 93       	push	r20
    1db8:	5f 93       	push	r21
    1dba:	6f 93       	push	r22
    1dbc:	7f 93       	push	r23
    1dbe:	8f 93       	push	r24
    1dc0:	9f 93       	push	r25
    1dc2:	af 93       	push	r26
    1dc4:	bf 93       	push	r27
    1dc6:	ef 93       	push	r30
    1dc8:	ff 93       	push	r31
    1dca:	df 93       	push	r29
    1dcc:	cf 93       	push	r28
    1dce:	cd b7       	in	r28, 0x3d	; 61
    1dd0:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtrT2 != NULL_PTR)
    1dd2:	80 91 8a 00 	lds	r24, 0x008A
    1dd6:	90 91 8b 00 	lds	r25, 0x008B
    1dda:	00 97       	sbiw	r24, 0x00	; 0
    1ddc:	29 f0       	breq	.+10     	; 0x1de8 <__vector_3+0x40>
	{

		(*g_callBackPtrT2)();
    1dde:	e0 91 8a 00 	lds	r30, 0x008A
    1de2:	f0 91 8b 00 	lds	r31, 0x008B
    1de6:	09 95       	icall
	}
}
    1de8:	cf 91       	pop	r28
    1dea:	df 91       	pop	r29
    1dec:	ff 91       	pop	r31
    1dee:	ef 91       	pop	r30
    1df0:	bf 91       	pop	r27
    1df2:	af 91       	pop	r26
    1df4:	9f 91       	pop	r25
    1df6:	8f 91       	pop	r24
    1df8:	7f 91       	pop	r23
    1dfa:	6f 91       	pop	r22
    1dfc:	5f 91       	pop	r21
    1dfe:	4f 91       	pop	r20
    1e00:	3f 91       	pop	r19
    1e02:	2f 91       	pop	r18
    1e04:	0f 90       	pop	r0
    1e06:	0f be       	out	0x3f, r0	; 63
    1e08:	0f 90       	pop	r0
    1e0a:	1f 90       	pop	r1
    1e0c:	18 95       	reti

00001e0e <TIMER_init>:
 * set the timer mode
 * set the pre-scaler
 * set the initial value
 * set the compare value if the timer is in compare mode
 */
void TIMER_init(const TIMER_ConfigType * Config_Ptr){
    1e0e:	df 93       	push	r29
    1e10:	cf 93       	push	r28
    1e12:	cd b7       	in	r28, 0x3d	; 61
    1e14:	de b7       	in	r29, 0x3e	; 62
    1e16:	60 97       	sbiw	r28, 0x10	; 16
    1e18:	0f b6       	in	r0, 0x3f	; 63
    1e1a:	f8 94       	cli
    1e1c:	de bf       	out	0x3e, r29	; 62
    1e1e:	0f be       	out	0x3f, r0	; 63
    1e20:	cd bf       	out	0x3d, r28	; 61
    1e22:	9a 83       	std	Y+2, r25	; 0x02
    1e24:	89 83       	std	Y+1, r24	; 0x01
	switch(Config_Ptr->timer)
    1e26:	e9 81       	ldd	r30, Y+1	; 0x01
    1e28:	fa 81       	ldd	r31, Y+2	; 0x02
    1e2a:	80 81       	ld	r24, Z
    1e2c:	28 2f       	mov	r18, r24
    1e2e:	30 e0       	ldi	r19, 0x00	; 0
    1e30:	38 8b       	std	Y+16, r19	; 0x10
    1e32:	2f 87       	std	Y+15, r18	; 0x0f
    1e34:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e36:	98 89       	ldd	r25, Y+16	; 0x10
    1e38:	81 30       	cpi	r24, 0x01	; 1
    1e3a:	91 05       	cpc	r25, r1
    1e3c:	09 f4       	brne	.+2      	; 0x1e40 <TIMER_init+0x32>
    1e3e:	58 c0       	rjmp	.+176    	; 0x1ef0 <TIMER_init+0xe2>
    1e40:	2f 85       	ldd	r18, Y+15	; 0x0f
    1e42:	38 89       	ldd	r19, Y+16	; 0x10
    1e44:	22 30       	cpi	r18, 0x02	; 2
    1e46:	31 05       	cpc	r19, r1
    1e48:	09 f4       	brne	.+2      	; 0x1e4c <TIMER_init+0x3e>
    1e4a:	db c0       	rjmp	.+438    	; 0x2002 <TIMER_init+0x1f4>
    1e4c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e4e:	98 89       	ldd	r25, Y+16	; 0x10
    1e50:	00 97       	sbiw	r24, 0x00	; 0
    1e52:	09 f0       	breq	.+2      	; 0x1e56 <TIMER_init+0x48>
    1e54:	f4 c1       	rjmp	.+1000   	; 0x223e <TIMER_init+0x430>
	{
	case TIMER0:{
		switch(Config_Ptr->mode)
    1e56:	e9 81       	ldd	r30, Y+1	; 0x01
    1e58:	fa 81       	ldd	r31, Y+2	; 0x02
    1e5a:	81 81       	ldd	r24, Z+1	; 0x01
    1e5c:	28 2f       	mov	r18, r24
    1e5e:	30 e0       	ldi	r19, 0x00	; 0
    1e60:	3e 87       	std	Y+14, r19	; 0x0e
    1e62:	2d 87       	std	Y+13, r18	; 0x0d
    1e64:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e66:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e68:	00 97       	sbiw	r24, 0x00	; 0
    1e6a:	31 f0       	breq	.+12     	; 0x1e78 <TIMER_init+0x6a>
    1e6c:	2d 85       	ldd	r18, Y+13	; 0x0d
    1e6e:	3e 85       	ldd	r19, Y+14	; 0x0e
    1e70:	21 30       	cpi	r18, 0x01	; 1
    1e72:	31 05       	cpc	r19, r1
    1e74:	a9 f0       	breq	.+42     	; 0x1ea0 <TIMER_init+0x92>
    1e76:	e3 c1       	rjmp	.+966    	; 0x223e <TIMER_init+0x430>
		{
		case NORMAL:{
			TCCR0 = (1<<FOC0) | ((Config_Ptr->pre_scaler)&0x07);
    1e78:	a3 e5       	ldi	r26, 0x53	; 83
    1e7a:	b0 e0       	ldi	r27, 0x00	; 0
    1e7c:	e9 81       	ldd	r30, Y+1	; 0x01
    1e7e:	fa 81       	ldd	r31, Y+2	; 0x02
    1e80:	82 81       	ldd	r24, Z+2	; 0x02
    1e82:	87 70       	andi	r24, 0x07	; 7
    1e84:	80 68       	ori	r24, 0x80	; 128
    1e86:	8c 93       	st	X, r24
			TCNT0= (uint8)(Config_Ptr->initial_value);
    1e88:	a2 e5       	ldi	r26, 0x52	; 82
    1e8a:	b0 e0       	ldi	r27, 0x00	; 0
    1e8c:	e9 81       	ldd	r30, Y+1	; 0x01
    1e8e:	fa 81       	ldd	r31, Y+2	; 0x02
    1e90:	85 81       	ldd	r24, Z+5	; 0x05
    1e92:	96 81       	ldd	r25, Z+6	; 0x06
    1e94:	8c 93       	st	X, r24
			TIMSK = (1<<TOIE0);
    1e96:	e9 e5       	ldi	r30, 0x59	; 89
    1e98:	f0 e0       	ldi	r31, 0x00	; 0
    1e9a:	81 e0       	ldi	r24, 0x01	; 1
    1e9c:	80 83       	st	Z, r24
    1e9e:	cf c1       	rjmp	.+926    	; 0x223e <TIMER_init+0x430>
		}break;
		case COMPARE:{
			TCCR0 = (1<<FOC0) | (1<<WGM01) | ((Config_Ptr->pre_scaler)&0x07) | ((Config_Ptr->cmp_pin)<<COM00);
    1ea0:	a3 e5       	ldi	r26, 0x53	; 83
    1ea2:	b0 e0       	ldi	r27, 0x00	; 0
    1ea4:	e9 81       	ldd	r30, Y+1	; 0x01
    1ea6:	fa 81       	ldd	r31, Y+2	; 0x02
    1ea8:	82 81       	ldd	r24, Z+2	; 0x02
    1eaa:	87 70       	andi	r24, 0x07	; 7
    1eac:	28 2f       	mov	r18, r24
    1eae:	28 68       	ori	r18, 0x88	; 136
    1eb0:	e9 81       	ldd	r30, Y+1	; 0x01
    1eb2:	fa 81       	ldd	r31, Y+2	; 0x02
    1eb4:	83 81       	ldd	r24, Z+3	; 0x03
    1eb6:	88 2f       	mov	r24, r24
    1eb8:	90 e0       	ldi	r25, 0x00	; 0
    1eba:	82 95       	swap	r24
    1ebc:	92 95       	swap	r25
    1ebe:	90 7f       	andi	r25, 0xF0	; 240
    1ec0:	98 27       	eor	r25, r24
    1ec2:	80 7f       	andi	r24, 0xF0	; 240
    1ec4:	98 27       	eor	r25, r24
    1ec6:	82 2b       	or	r24, r18
    1ec8:	8c 93       	st	X, r24
			TCNT0= (uint8)(Config_Ptr->initial_value);
    1eca:	a2 e5       	ldi	r26, 0x52	; 82
    1ecc:	b0 e0       	ldi	r27, 0x00	; 0
    1ece:	e9 81       	ldd	r30, Y+1	; 0x01
    1ed0:	fa 81       	ldd	r31, Y+2	; 0x02
    1ed2:	85 81       	ldd	r24, Z+5	; 0x05
    1ed4:	96 81       	ldd	r25, Z+6	; 0x06
    1ed6:	8c 93       	st	X, r24
			OCR0= (uint8)(Config_Ptr->compare_value);
    1ed8:	ac e5       	ldi	r26, 0x5C	; 92
    1eda:	b0 e0       	ldi	r27, 0x00	; 0
    1edc:	e9 81       	ldd	r30, Y+1	; 0x01
    1ede:	fa 81       	ldd	r31, Y+2	; 0x02
    1ee0:	87 81       	ldd	r24, Z+7	; 0x07
    1ee2:	90 85       	ldd	r25, Z+8	; 0x08
    1ee4:	8c 93       	st	X, r24
			TIMSK = (1<<OCIE0);
    1ee6:	e9 e5       	ldi	r30, 0x59	; 89
    1ee8:	f0 e0       	ldi	r31, 0x00	; 0
    1eea:	82 e0       	ldi	r24, 0x02	; 2
    1eec:	80 83       	st	Z, r24
    1eee:	a7 c1       	rjmp	.+846    	; 0x223e <TIMER_init+0x430>

		}break;
		}
	}break;
	case TIMER1:{
		switch(Config_Ptr->mode)
    1ef0:	e9 81       	ldd	r30, Y+1	; 0x01
    1ef2:	fa 81       	ldd	r31, Y+2	; 0x02
    1ef4:	81 81       	ldd	r24, Z+1	; 0x01
    1ef6:	28 2f       	mov	r18, r24
    1ef8:	30 e0       	ldi	r19, 0x00	; 0
    1efa:	3c 87       	std	Y+12, r19	; 0x0c
    1efc:	2b 87       	std	Y+11, r18	; 0x0b
    1efe:	8b 85       	ldd	r24, Y+11	; 0x0b
    1f00:	9c 85       	ldd	r25, Y+12	; 0x0c
    1f02:	00 97       	sbiw	r24, 0x00	; 0
    1f04:	31 f0       	breq	.+12     	; 0x1f12 <TIMER_init+0x104>
    1f06:	2b 85       	ldd	r18, Y+11	; 0x0b
    1f08:	3c 85       	ldd	r19, Y+12	; 0x0c
    1f0a:	21 30       	cpi	r18, 0x01	; 1
    1f0c:	31 05       	cpc	r19, r1
    1f0e:	d1 f0       	breq	.+52     	; 0x1f44 <TIMER_init+0x136>
    1f10:	96 c1       	rjmp	.+812    	; 0x223e <TIMER_init+0x430>
		{
		case NORMAL:{
			TCCR1A = (1<<FOC1A) | (1<<FOC1B);
    1f12:	ef e4       	ldi	r30, 0x4F	; 79
    1f14:	f0 e0       	ldi	r31, 0x00	; 0
    1f16:	8c e0       	ldi	r24, 0x0C	; 12
    1f18:	80 83       	st	Z, r24
			TCCR1B = (Config_Ptr->pre_scaler)&0x07;
    1f1a:	ae e4       	ldi	r26, 0x4E	; 78
    1f1c:	b0 e0       	ldi	r27, 0x00	; 0
    1f1e:	e9 81       	ldd	r30, Y+1	; 0x01
    1f20:	fa 81       	ldd	r31, Y+2	; 0x02
    1f22:	82 81       	ldd	r24, Z+2	; 0x02
    1f24:	87 70       	andi	r24, 0x07	; 7
    1f26:	8c 93       	st	X, r24
			TIMSK = (1<<TOIE1);
    1f28:	e9 e5       	ldi	r30, 0x59	; 89
    1f2a:	f0 e0       	ldi	r31, 0x00	; 0
    1f2c:	84 e0       	ldi	r24, 0x04	; 4
    1f2e:	80 83       	st	Z, r24
			TCNT1 = Config_Ptr->initial_value;
    1f30:	ac e4       	ldi	r26, 0x4C	; 76
    1f32:	b0 e0       	ldi	r27, 0x00	; 0
    1f34:	e9 81       	ldd	r30, Y+1	; 0x01
    1f36:	fa 81       	ldd	r31, Y+2	; 0x02
    1f38:	85 81       	ldd	r24, Z+5	; 0x05
    1f3a:	96 81       	ldd	r25, Z+6	; 0x06
    1f3c:	11 96       	adiw	r26, 0x01	; 1
    1f3e:	9c 93       	st	X, r25
    1f40:	8e 93       	st	-X, r24
    1f42:	7d c1       	rjmp	.+762    	; 0x223e <TIMER_init+0x430>
		}break;
		case COMPARE:{
			TCCR1B = ((Config_Ptr->pre_scaler)&0x07 ) | (1<<WGM12);
    1f44:	ae e4       	ldi	r26, 0x4E	; 78
    1f46:	b0 e0       	ldi	r27, 0x00	; 0
    1f48:	e9 81       	ldd	r30, Y+1	; 0x01
    1f4a:	fa 81       	ldd	r31, Y+2	; 0x02
    1f4c:	82 81       	ldd	r24, Z+2	; 0x02
    1f4e:	87 70       	andi	r24, 0x07	; 7
    1f50:	88 60       	ori	r24, 0x08	; 8
    1f52:	8c 93       	st	X, r24
			TCNT1 = Config_Ptr->initial_value;
    1f54:	ac e4       	ldi	r26, 0x4C	; 76
    1f56:	b0 e0       	ldi	r27, 0x00	; 0
    1f58:	e9 81       	ldd	r30, Y+1	; 0x01
    1f5a:	fa 81       	ldd	r31, Y+2	; 0x02
    1f5c:	85 81       	ldd	r24, Z+5	; 0x05
    1f5e:	96 81       	ldd	r25, Z+6	; 0x06
    1f60:	11 96       	adiw	r26, 0x01	; 1
    1f62:	9c 93       	st	X, r25
    1f64:	8e 93       	st	-X, r24
			switch(Config_Ptr->com_output){
    1f66:	e9 81       	ldd	r30, Y+1	; 0x01
    1f68:	fa 81       	ldd	r31, Y+2	; 0x02
    1f6a:	84 81       	ldd	r24, Z+4	; 0x04
    1f6c:	28 2f       	mov	r18, r24
    1f6e:	30 e0       	ldi	r19, 0x00	; 0
    1f70:	3a 87       	std	Y+10, r19	; 0x0a
    1f72:	29 87       	std	Y+9, r18	; 0x09
    1f74:	89 85       	ldd	r24, Y+9	; 0x09
    1f76:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f78:	00 97       	sbiw	r24, 0x00	; 0
    1f7a:	31 f0       	breq	.+12     	; 0x1f88 <TIMER_init+0x17a>
    1f7c:	29 85       	ldd	r18, Y+9	; 0x09
    1f7e:	3a 85       	ldd	r19, Y+10	; 0x0a
    1f80:	21 30       	cpi	r18, 0x01	; 1
    1f82:	31 05       	cpc	r19, r1
    1f84:	09 f1       	breq	.+66     	; 0x1fc8 <TIMER_init+0x1ba>
    1f86:	5b c1       	rjmp	.+694    	; 0x223e <TIMER_init+0x430>
			case COMPARE_A:
				TCCR1A = (1<<FOC1A) | (1<<FOC1B) | ((Config_Ptr->cmp_pin)<<COM1A0);
    1f88:	af e4       	ldi	r26, 0x4F	; 79
    1f8a:	b0 e0       	ldi	r27, 0x00	; 0
    1f8c:	e9 81       	ldd	r30, Y+1	; 0x01
    1f8e:	fa 81       	ldd	r31, Y+2	; 0x02
    1f90:	83 81       	ldd	r24, Z+3	; 0x03
    1f92:	88 2f       	mov	r24, r24
    1f94:	90 e0       	ldi	r25, 0x00	; 0
    1f96:	00 24       	eor	r0, r0
    1f98:	96 95       	lsr	r25
    1f9a:	87 95       	ror	r24
    1f9c:	07 94       	ror	r0
    1f9e:	96 95       	lsr	r25
    1fa0:	87 95       	ror	r24
    1fa2:	07 94       	ror	r0
    1fa4:	98 2f       	mov	r25, r24
    1fa6:	80 2d       	mov	r24, r0
    1fa8:	8c 60       	ori	r24, 0x0C	; 12
    1faa:	8c 93       	st	X, r24
				OCR1A = Config_Ptr->compare_value;
    1fac:	aa e4       	ldi	r26, 0x4A	; 74
    1fae:	b0 e0       	ldi	r27, 0x00	; 0
    1fb0:	e9 81       	ldd	r30, Y+1	; 0x01
    1fb2:	fa 81       	ldd	r31, Y+2	; 0x02
    1fb4:	87 81       	ldd	r24, Z+7	; 0x07
    1fb6:	90 85       	ldd	r25, Z+8	; 0x08
    1fb8:	11 96       	adiw	r26, 0x01	; 1
    1fba:	9c 93       	st	X, r25
    1fbc:	8e 93       	st	-X, r24
				TIMSK = (1<< OCIE1A);
    1fbe:	e9 e5       	ldi	r30, 0x59	; 89
    1fc0:	f0 e0       	ldi	r31, 0x00	; 0
    1fc2:	80 e1       	ldi	r24, 0x10	; 16
    1fc4:	80 83       	st	Z, r24
    1fc6:	3b c1       	rjmp	.+630    	; 0x223e <TIMER_init+0x430>
				break;
			case COMPARE_B:
				TCCR1A = (1<<FOC1A) | (1<<FOC1B) | ((Config_Ptr->cmp_pin)<<COM1B0);
    1fc8:	af e4       	ldi	r26, 0x4F	; 79
    1fca:	b0 e0       	ldi	r27, 0x00	; 0
    1fcc:	e9 81       	ldd	r30, Y+1	; 0x01
    1fce:	fa 81       	ldd	r31, Y+2	; 0x02
    1fd0:	83 81       	ldd	r24, Z+3	; 0x03
    1fd2:	88 2f       	mov	r24, r24
    1fd4:	90 e0       	ldi	r25, 0x00	; 0
    1fd6:	82 95       	swap	r24
    1fd8:	92 95       	swap	r25
    1fda:	90 7f       	andi	r25, 0xF0	; 240
    1fdc:	98 27       	eor	r25, r24
    1fde:	80 7f       	andi	r24, 0xF0	; 240
    1fe0:	98 27       	eor	r25, r24
    1fe2:	8c 60       	ori	r24, 0x0C	; 12
    1fe4:	8c 93       	st	X, r24
				OCR1B = Config_Ptr->compare_value;
    1fe6:	a8 e4       	ldi	r26, 0x48	; 72
    1fe8:	b0 e0       	ldi	r27, 0x00	; 0
    1fea:	e9 81       	ldd	r30, Y+1	; 0x01
    1fec:	fa 81       	ldd	r31, Y+2	; 0x02
    1fee:	87 81       	ldd	r24, Z+7	; 0x07
    1ff0:	90 85       	ldd	r25, Z+8	; 0x08
    1ff2:	11 96       	adiw	r26, 0x01	; 1
    1ff4:	9c 93       	st	X, r25
    1ff6:	8e 93       	st	-X, r24
				TIMSK = (1<< OCIE1B);
    1ff8:	e9 e5       	ldi	r30, 0x59	; 89
    1ffa:	f0 e0       	ldi	r31, 0x00	; 0
    1ffc:	88 e0       	ldi	r24, 0x08	; 8
    1ffe:	80 83       	st	Z, r24
    2000:	1e c1       	rjmp	.+572    	; 0x223e <TIMER_init+0x430>
			}
		}break;
		}
	}break;
	case TIMER2:{
		switch(Config_Ptr->mode)
    2002:	e9 81       	ldd	r30, Y+1	; 0x01
    2004:	fa 81       	ldd	r31, Y+2	; 0x02
    2006:	81 81       	ldd	r24, Z+1	; 0x01
    2008:	28 2f       	mov	r18, r24
    200a:	30 e0       	ldi	r19, 0x00	; 0
    200c:	38 87       	std	Y+8, r19	; 0x08
    200e:	2f 83       	std	Y+7, r18	; 0x07
    2010:	8f 81       	ldd	r24, Y+7	; 0x07
    2012:	98 85       	ldd	r25, Y+8	; 0x08
    2014:	00 97       	sbiw	r24, 0x00	; 0
    2016:	39 f0       	breq	.+14     	; 0x2026 <TIMER_init+0x218>
    2018:	2f 81       	ldd	r18, Y+7	; 0x07
    201a:	38 85       	ldd	r19, Y+8	; 0x08
    201c:	21 30       	cpi	r18, 0x01	; 1
    201e:	31 05       	cpc	r19, r1
    2020:	09 f4       	brne	.+2      	; 0x2024 <TIMER_init+0x216>
    2022:	82 c0       	rjmp	.+260    	; 0x2128 <TIMER_init+0x31a>
    2024:	0c c1       	rjmp	.+536    	; 0x223e <TIMER_init+0x430>
		{
		case NORMAL:{
			TCCR2 = (1<<FOC2);
    2026:	e5 e4       	ldi	r30, 0x45	; 69
    2028:	f0 e0       	ldi	r31, 0x00	; 0
    202a:	80 e8       	ldi	r24, 0x80	; 128
    202c:	80 83       	st	Z, r24
			TCNT2 = (uint8)(Config_Ptr->initial_value);
    202e:	a4 e4       	ldi	r26, 0x44	; 68
    2030:	b0 e0       	ldi	r27, 0x00	; 0
    2032:	e9 81       	ldd	r30, Y+1	; 0x01
    2034:	fa 81       	ldd	r31, Y+2	; 0x02
    2036:	85 81       	ldd	r24, Z+5	; 0x05
    2038:	96 81       	ldd	r25, Z+6	; 0x06
    203a:	8c 93       	st	X, r24
			OCR2 = (uint8)(Config_Ptr->compare_value);
    203c:	a3 e4       	ldi	r26, 0x43	; 67
    203e:	b0 e0       	ldi	r27, 0x00	; 0
    2040:	e9 81       	ldd	r30, Y+1	; 0x01
    2042:	fa 81       	ldd	r31, Y+2	; 0x02
    2044:	87 81       	ldd	r24, Z+7	; 0x07
    2046:	90 85       	ldd	r25, Z+8	; 0x08
    2048:	8c 93       	st	X, r24
			TIMSK = (1<<TOIE2);
    204a:	e9 e5       	ldi	r30, 0x59	; 89
    204c:	f0 e0       	ldi	r31, 0x00	; 0
    204e:	80 e4       	ldi	r24, 0x40	; 64
    2050:	80 83       	st	Z, r24
			switch(Config_Ptr->pre_scaler)
    2052:	e9 81       	ldd	r30, Y+1	; 0x01
    2054:	fa 81       	ldd	r31, Y+2	; 0x02
    2056:	82 81       	ldd	r24, Z+2	; 0x02
    2058:	28 2f       	mov	r18, r24
    205a:	30 e0       	ldi	r19, 0x00	; 0
    205c:	3e 83       	std	Y+6, r19	; 0x06
    205e:	2d 83       	std	Y+5, r18	; 0x05
    2060:	8d 81       	ldd	r24, Y+5	; 0x05
    2062:	9e 81       	ldd	r25, Y+6	; 0x06
    2064:	83 30       	cpi	r24, 0x03	; 3
    2066:	91 05       	cpc	r25, r1
    2068:	09 f4       	brne	.+2      	; 0x206c <TIMER_init+0x25e>
    206a:	3e c0       	rjmp	.+124    	; 0x20e8 <TIMER_init+0x2da>
    206c:	2d 81       	ldd	r18, Y+5	; 0x05
    206e:	3e 81       	ldd	r19, Y+6	; 0x06
    2070:	24 30       	cpi	r18, 0x04	; 4
    2072:	31 05       	cpc	r19, r1
    2074:	5c f4       	brge	.+22     	; 0x208c <TIMER_init+0x27e>
    2076:	8d 81       	ldd	r24, Y+5	; 0x05
    2078:	9e 81       	ldd	r25, Y+6	; 0x06
    207a:	81 30       	cpi	r24, 0x01	; 1
    207c:	91 05       	cpc	r25, r1
    207e:	e1 f0       	breq	.+56     	; 0x20b8 <TIMER_init+0x2aa>
    2080:	2d 81       	ldd	r18, Y+5	; 0x05
    2082:	3e 81       	ldd	r19, Y+6	; 0x06
    2084:	22 30       	cpi	r18, 0x02	; 2
    2086:	31 05       	cpc	r19, r1
    2088:	fc f4       	brge	.+62     	; 0x20c8 <TIMER_init+0x2ba>
    208a:	d9 c0       	rjmp	.+434    	; 0x223e <TIMER_init+0x430>
    208c:	8d 81       	ldd	r24, Y+5	; 0x05
    208e:	9e 81       	ldd	r25, Y+6	; 0x06
    2090:	85 30       	cpi	r24, 0x05	; 5
    2092:	91 05       	cpc	r25, r1
    2094:	09 f4       	brne	.+2      	; 0x2098 <TIMER_init+0x28a>
    2096:	40 c0       	rjmp	.+128    	; 0x2118 <TIMER_init+0x30a>
    2098:	2d 81       	ldd	r18, Y+5	; 0x05
    209a:	3e 81       	ldd	r19, Y+6	; 0x06
    209c:	25 30       	cpi	r18, 0x05	; 5
    209e:	31 05       	cpc	r19, r1
    20a0:	9c f1       	brlt	.+102    	; 0x2108 <TIMER_init+0x2fa>
    20a2:	8d 81       	ldd	r24, Y+5	; 0x05
    20a4:	9e 81       	ldd	r25, Y+6	; 0x06
    20a6:	86 30       	cpi	r24, 0x06	; 6
    20a8:	91 05       	cpc	r25, r1
    20aa:	b1 f0       	breq	.+44     	; 0x20d8 <TIMER_init+0x2ca>
    20ac:	2d 81       	ldd	r18, Y+5	; 0x05
    20ae:	3e 81       	ldd	r19, Y+6	; 0x06
    20b0:	27 30       	cpi	r18, 0x07	; 7
    20b2:	31 05       	cpc	r19, r1
    20b4:	09 f1       	breq	.+66     	; 0x20f8 <TIMER_init+0x2ea>
    20b6:	c3 c0       	rjmp	.+390    	; 0x223e <TIMER_init+0x430>
			{
			case NO_CLOCK:
				break;
			case F_CPU_CLOCK: TCCR2 |= (1<<CS20);
    20b8:	a5 e4       	ldi	r26, 0x45	; 69
    20ba:	b0 e0       	ldi	r27, 0x00	; 0
    20bc:	e5 e4       	ldi	r30, 0x45	; 69
    20be:	f0 e0       	ldi	r31, 0x00	; 0
    20c0:	80 81       	ld	r24, Z
    20c2:	81 60       	ori	r24, 0x01	; 1
    20c4:	8c 93       	st	X, r24
    20c6:	bb c0       	rjmp	.+374    	; 0x223e <TIMER_init+0x430>
			break;
			case F_CPU_8: TCCR2 |= (1<<CS21);
    20c8:	a5 e4       	ldi	r26, 0x45	; 69
    20ca:	b0 e0       	ldi	r27, 0x00	; 0
    20cc:	e5 e4       	ldi	r30, 0x45	; 69
    20ce:	f0 e0       	ldi	r31, 0x00	; 0
    20d0:	80 81       	ld	r24, Z
    20d2:	82 60       	ori	r24, 0x02	; 2
    20d4:	8c 93       	st	X, r24
    20d6:	b3 c0       	rjmp	.+358    	; 0x223e <TIMER_init+0x430>
			break;
			case F_CPU_T2_32: TCCR2 |= (1<<CS21) | (1<<CS20);
    20d8:	a5 e4       	ldi	r26, 0x45	; 69
    20da:	b0 e0       	ldi	r27, 0x00	; 0
    20dc:	e5 e4       	ldi	r30, 0x45	; 69
    20de:	f0 e0       	ldi	r31, 0x00	; 0
    20e0:	80 81       	ld	r24, Z
    20e2:	83 60       	ori	r24, 0x03	; 3
    20e4:	8c 93       	st	X, r24
    20e6:	ab c0       	rjmp	.+342    	; 0x223e <TIMER_init+0x430>
			break;
			case F_CPU_64: TCCR2 |= (1<<CS22);
    20e8:	a5 e4       	ldi	r26, 0x45	; 69
    20ea:	b0 e0       	ldi	r27, 0x00	; 0
    20ec:	e5 e4       	ldi	r30, 0x45	; 69
    20ee:	f0 e0       	ldi	r31, 0x00	; 0
    20f0:	80 81       	ld	r24, Z
    20f2:	84 60       	ori	r24, 0x04	; 4
    20f4:	8c 93       	st	X, r24
    20f6:	a3 c0       	rjmp	.+326    	; 0x223e <TIMER_init+0x430>
			break;
			case F_CPU_T2_128: TCCR2 |= (1<<CS22) | (1<<CS20);
    20f8:	a5 e4       	ldi	r26, 0x45	; 69
    20fa:	b0 e0       	ldi	r27, 0x00	; 0
    20fc:	e5 e4       	ldi	r30, 0x45	; 69
    20fe:	f0 e0       	ldi	r31, 0x00	; 0
    2100:	80 81       	ld	r24, Z
    2102:	85 60       	ori	r24, 0x05	; 5
    2104:	8c 93       	st	X, r24
    2106:	9b c0       	rjmp	.+310    	; 0x223e <TIMER_init+0x430>
			break;
			case F_CPU_256: TCCR2 |= (1<<CS22) | (1<<CS21);
    2108:	a5 e4       	ldi	r26, 0x45	; 69
    210a:	b0 e0       	ldi	r27, 0x00	; 0
    210c:	e5 e4       	ldi	r30, 0x45	; 69
    210e:	f0 e0       	ldi	r31, 0x00	; 0
    2110:	80 81       	ld	r24, Z
    2112:	86 60       	ori	r24, 0x06	; 6
    2114:	8c 93       	st	X, r24
    2116:	93 c0       	rjmp	.+294    	; 0x223e <TIMER_init+0x430>
			break;
			case F_CPU_1024:TCCR2 |= (1<<CS22) | (1<<CS21) | (1<<CS20);
    2118:	a5 e4       	ldi	r26, 0x45	; 69
    211a:	b0 e0       	ldi	r27, 0x00	; 0
    211c:	e5 e4       	ldi	r30, 0x45	; 69
    211e:	f0 e0       	ldi	r31, 0x00	; 0
    2120:	80 81       	ld	r24, Z
    2122:	87 60       	ori	r24, 0x07	; 7
    2124:	8c 93       	st	X, r24
    2126:	8b c0       	rjmp	.+278    	; 0x223e <TIMER_init+0x430>
			break;
			}
		}break;
		case COMPARE:{
			TCCR2 = (1<<FOC2) | (1<<WGM21) | ((Config_Ptr->cmp_pin)<<COM20);
    2128:	a5 e4       	ldi	r26, 0x45	; 69
    212a:	b0 e0       	ldi	r27, 0x00	; 0
    212c:	e9 81       	ldd	r30, Y+1	; 0x01
    212e:	fa 81       	ldd	r31, Y+2	; 0x02
    2130:	83 81       	ldd	r24, Z+3	; 0x03
    2132:	88 2f       	mov	r24, r24
    2134:	90 e0       	ldi	r25, 0x00	; 0
    2136:	82 95       	swap	r24
    2138:	92 95       	swap	r25
    213a:	90 7f       	andi	r25, 0xF0	; 240
    213c:	98 27       	eor	r25, r24
    213e:	80 7f       	andi	r24, 0xF0	; 240
    2140:	98 27       	eor	r25, r24
    2142:	88 68       	ori	r24, 0x88	; 136
    2144:	8c 93       	st	X, r24
			TCNT2 = (uint8)(Config_Ptr->initial_value);
    2146:	a4 e4       	ldi	r26, 0x44	; 68
    2148:	b0 e0       	ldi	r27, 0x00	; 0
    214a:	e9 81       	ldd	r30, Y+1	; 0x01
    214c:	fa 81       	ldd	r31, Y+2	; 0x02
    214e:	85 81       	ldd	r24, Z+5	; 0x05
    2150:	96 81       	ldd	r25, Z+6	; 0x06
    2152:	8c 93       	st	X, r24
			OCR2 = (uint8)(Config_Ptr->compare_value);
    2154:	a3 e4       	ldi	r26, 0x43	; 67
    2156:	b0 e0       	ldi	r27, 0x00	; 0
    2158:	e9 81       	ldd	r30, Y+1	; 0x01
    215a:	fa 81       	ldd	r31, Y+2	; 0x02
    215c:	87 81       	ldd	r24, Z+7	; 0x07
    215e:	90 85       	ldd	r25, Z+8	; 0x08
    2160:	8c 93       	st	X, r24
			TIMSK = (1<<OCIE2);
    2162:	e9 e5       	ldi	r30, 0x59	; 89
    2164:	f0 e0       	ldi	r31, 0x00	; 0
    2166:	80 e8       	ldi	r24, 0x80	; 128
    2168:	80 83       	st	Z, r24
			switch(Config_Ptr->pre_scaler)
    216a:	e9 81       	ldd	r30, Y+1	; 0x01
    216c:	fa 81       	ldd	r31, Y+2	; 0x02
    216e:	82 81       	ldd	r24, Z+2	; 0x02
    2170:	28 2f       	mov	r18, r24
    2172:	30 e0       	ldi	r19, 0x00	; 0
    2174:	3c 83       	std	Y+4, r19	; 0x04
    2176:	2b 83       	std	Y+3, r18	; 0x03
    2178:	8b 81       	ldd	r24, Y+3	; 0x03
    217a:	9c 81       	ldd	r25, Y+4	; 0x04
    217c:	83 30       	cpi	r24, 0x03	; 3
    217e:	91 05       	cpc	r25, r1
    2180:	09 f4       	brne	.+2      	; 0x2184 <TIMER_init+0x376>
    2182:	3e c0       	rjmp	.+124    	; 0x2200 <TIMER_init+0x3f2>
    2184:	2b 81       	ldd	r18, Y+3	; 0x03
    2186:	3c 81       	ldd	r19, Y+4	; 0x04
    2188:	24 30       	cpi	r18, 0x04	; 4
    218a:	31 05       	cpc	r19, r1
    218c:	5c f4       	brge	.+22     	; 0x21a4 <TIMER_init+0x396>
    218e:	8b 81       	ldd	r24, Y+3	; 0x03
    2190:	9c 81       	ldd	r25, Y+4	; 0x04
    2192:	81 30       	cpi	r24, 0x01	; 1
    2194:	91 05       	cpc	r25, r1
    2196:	e1 f0       	breq	.+56     	; 0x21d0 <TIMER_init+0x3c2>
    2198:	2b 81       	ldd	r18, Y+3	; 0x03
    219a:	3c 81       	ldd	r19, Y+4	; 0x04
    219c:	22 30       	cpi	r18, 0x02	; 2
    219e:	31 05       	cpc	r19, r1
    21a0:	fc f4       	brge	.+62     	; 0x21e0 <TIMER_init+0x3d2>
    21a2:	4d c0       	rjmp	.+154    	; 0x223e <TIMER_init+0x430>
    21a4:	8b 81       	ldd	r24, Y+3	; 0x03
    21a6:	9c 81       	ldd	r25, Y+4	; 0x04
    21a8:	85 30       	cpi	r24, 0x05	; 5
    21aa:	91 05       	cpc	r25, r1
    21ac:	09 f4       	brne	.+2      	; 0x21b0 <TIMER_init+0x3a2>
    21ae:	40 c0       	rjmp	.+128    	; 0x2230 <TIMER_init+0x422>
    21b0:	2b 81       	ldd	r18, Y+3	; 0x03
    21b2:	3c 81       	ldd	r19, Y+4	; 0x04
    21b4:	25 30       	cpi	r18, 0x05	; 5
    21b6:	31 05       	cpc	r19, r1
    21b8:	9c f1       	brlt	.+102    	; 0x2220 <TIMER_init+0x412>
    21ba:	8b 81       	ldd	r24, Y+3	; 0x03
    21bc:	9c 81       	ldd	r25, Y+4	; 0x04
    21be:	86 30       	cpi	r24, 0x06	; 6
    21c0:	91 05       	cpc	r25, r1
    21c2:	b1 f0       	breq	.+44     	; 0x21f0 <TIMER_init+0x3e2>
    21c4:	2b 81       	ldd	r18, Y+3	; 0x03
    21c6:	3c 81       	ldd	r19, Y+4	; 0x04
    21c8:	27 30       	cpi	r18, 0x07	; 7
    21ca:	31 05       	cpc	r19, r1
    21cc:	09 f1       	breq	.+66     	; 0x2210 <TIMER_init+0x402>
    21ce:	37 c0       	rjmp	.+110    	; 0x223e <TIMER_init+0x430>
			{
			case NO_CLOCK:
				break;
			case F_CPU_CLOCK: TCCR2 |= (1<<CS20);
    21d0:	a5 e4       	ldi	r26, 0x45	; 69
    21d2:	b0 e0       	ldi	r27, 0x00	; 0
    21d4:	e5 e4       	ldi	r30, 0x45	; 69
    21d6:	f0 e0       	ldi	r31, 0x00	; 0
    21d8:	80 81       	ld	r24, Z
    21da:	81 60       	ori	r24, 0x01	; 1
    21dc:	8c 93       	st	X, r24
    21de:	2f c0       	rjmp	.+94     	; 0x223e <TIMER_init+0x430>
			break;
			case F_CPU_8: TCCR2 |= (1<<CS21);
    21e0:	a5 e4       	ldi	r26, 0x45	; 69
    21e2:	b0 e0       	ldi	r27, 0x00	; 0
    21e4:	e5 e4       	ldi	r30, 0x45	; 69
    21e6:	f0 e0       	ldi	r31, 0x00	; 0
    21e8:	80 81       	ld	r24, Z
    21ea:	82 60       	ori	r24, 0x02	; 2
    21ec:	8c 93       	st	X, r24
    21ee:	27 c0       	rjmp	.+78     	; 0x223e <TIMER_init+0x430>
			break;
			case F_CPU_T2_32: TCCR2 |= (1<<CS21) | (1<<CS20);
    21f0:	a5 e4       	ldi	r26, 0x45	; 69
    21f2:	b0 e0       	ldi	r27, 0x00	; 0
    21f4:	e5 e4       	ldi	r30, 0x45	; 69
    21f6:	f0 e0       	ldi	r31, 0x00	; 0
    21f8:	80 81       	ld	r24, Z
    21fa:	83 60       	ori	r24, 0x03	; 3
    21fc:	8c 93       	st	X, r24
    21fe:	1f c0       	rjmp	.+62     	; 0x223e <TIMER_init+0x430>
			break;
			case F_CPU_64: TCCR2 |= (1<<CS22);
    2200:	a5 e4       	ldi	r26, 0x45	; 69
    2202:	b0 e0       	ldi	r27, 0x00	; 0
    2204:	e5 e4       	ldi	r30, 0x45	; 69
    2206:	f0 e0       	ldi	r31, 0x00	; 0
    2208:	80 81       	ld	r24, Z
    220a:	84 60       	ori	r24, 0x04	; 4
    220c:	8c 93       	st	X, r24
    220e:	17 c0       	rjmp	.+46     	; 0x223e <TIMER_init+0x430>
			break;
			case F_CPU_T2_128: TCCR2 |= (1<<CS22) | (1<<CS20);
    2210:	a5 e4       	ldi	r26, 0x45	; 69
    2212:	b0 e0       	ldi	r27, 0x00	; 0
    2214:	e5 e4       	ldi	r30, 0x45	; 69
    2216:	f0 e0       	ldi	r31, 0x00	; 0
    2218:	80 81       	ld	r24, Z
    221a:	85 60       	ori	r24, 0x05	; 5
    221c:	8c 93       	st	X, r24
    221e:	0f c0       	rjmp	.+30     	; 0x223e <TIMER_init+0x430>
			break;
			case F_CPU_256: TCCR2 |= (1<<CS22) | (1<<CS21);
    2220:	a5 e4       	ldi	r26, 0x45	; 69
    2222:	b0 e0       	ldi	r27, 0x00	; 0
    2224:	e5 e4       	ldi	r30, 0x45	; 69
    2226:	f0 e0       	ldi	r31, 0x00	; 0
    2228:	80 81       	ld	r24, Z
    222a:	86 60       	ori	r24, 0x06	; 6
    222c:	8c 93       	st	X, r24
    222e:	07 c0       	rjmp	.+14     	; 0x223e <TIMER_init+0x430>
			break;
			case F_CPU_1024:TCCR2 |= (1<<CS22) | (1<<CS21) | (1<<CS20);
    2230:	a5 e4       	ldi	r26, 0x45	; 69
    2232:	b0 e0       	ldi	r27, 0x00	; 0
    2234:	e5 e4       	ldi	r30, 0x45	; 69
    2236:	f0 e0       	ldi	r31, 0x00	; 0
    2238:	80 81       	ld	r24, Z
    223a:	87 60       	ori	r24, 0x07	; 7
    223c:	8c 93       	st	X, r24
		}break;
		}
	}
	}

}
    223e:	60 96       	adiw	r28, 0x10	; 16
    2240:	0f b6       	in	r0, 0x3f	; 63
    2242:	f8 94       	cli
    2244:	de bf       	out	0x3e, r29	; 62
    2246:	0f be       	out	0x3f, r0	; 63
    2248:	cd bf       	out	0x3d, r28	; 61
    224a:	cf 91       	pop	r28
    224c:	df 91       	pop	r29
    224e:	08 95       	ret

00002250 <TIMER_setCallBackT0>:
/*
 * Description: Function to set the Call Back function address to timer 0.
 */
void TIMER_setCallBackT0(void(*a_ptr)(void)){
    2250:	df 93       	push	r29
    2252:	cf 93       	push	r28
    2254:	00 d0       	rcall	.+0      	; 0x2256 <TIMER_setCallBackT0+0x6>
    2256:	cd b7       	in	r28, 0x3d	; 61
    2258:	de b7       	in	r29, 0x3e	; 62
    225a:	9a 83       	std	Y+2, r25	; 0x02
    225c:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPtrT0 = a_ptr;
    225e:	89 81       	ldd	r24, Y+1	; 0x01
    2260:	9a 81       	ldd	r25, Y+2	; 0x02
    2262:	90 93 87 00 	sts	0x0087, r25
    2266:	80 93 86 00 	sts	0x0086, r24
}
    226a:	0f 90       	pop	r0
    226c:	0f 90       	pop	r0
    226e:	cf 91       	pop	r28
    2270:	df 91       	pop	r29
    2272:	08 95       	ret

00002274 <TIMER_setCallBackT1>:
/*
 * Description: Function to set the Call Back function address to timer 1.
 */
void TIMER_setCallBackT1(void(*a_ptr)(void)){
    2274:	df 93       	push	r29
    2276:	cf 93       	push	r28
    2278:	00 d0       	rcall	.+0      	; 0x227a <TIMER_setCallBackT1+0x6>
    227a:	cd b7       	in	r28, 0x3d	; 61
    227c:	de b7       	in	r29, 0x3e	; 62
    227e:	9a 83       	std	Y+2, r25	; 0x02
    2280:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPtrT1 = a_ptr;
    2282:	89 81       	ldd	r24, Y+1	; 0x01
    2284:	9a 81       	ldd	r25, Y+2	; 0x02
    2286:	90 93 89 00 	sts	0x0089, r25
    228a:	80 93 88 00 	sts	0x0088, r24
}
    228e:	0f 90       	pop	r0
    2290:	0f 90       	pop	r0
    2292:	cf 91       	pop	r28
    2294:	df 91       	pop	r29
    2296:	08 95       	ret

00002298 <TIMER_setCallBackT2>:
/*
 * Description: Function to set the Call Back function address to timer 2.
 */
void TIMER_setCallBackT2(void(*a_ptr)(void)){
    2298:	df 93       	push	r29
    229a:	cf 93       	push	r28
    229c:	00 d0       	rcall	.+0      	; 0x229e <TIMER_setCallBackT2+0x6>
    229e:	cd b7       	in	r28, 0x3d	; 61
    22a0:	de b7       	in	r29, 0x3e	; 62
    22a2:	9a 83       	std	Y+2, r25	; 0x02
    22a4:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPtrT2 = a_ptr;
    22a6:	89 81       	ldd	r24, Y+1	; 0x01
    22a8:	9a 81       	ldd	r25, Y+2	; 0x02
    22aa:	90 93 8b 00 	sts	0x008B, r25
    22ae:	80 93 8a 00 	sts	0x008A, r24
}
    22b2:	0f 90       	pop	r0
    22b4:	0f 90       	pop	r0
    22b6:	cf 91       	pop	r28
    22b8:	df 91       	pop	r29
    22ba:	08 95       	ret

000022bc <TIMER_DeInit>:
/*
 * Description: Function to disable the Timer
 */
void TIMER_DeInit(TIMER_number timer){
    22bc:	df 93       	push	r29
    22be:	cf 93       	push	r28
    22c0:	00 d0       	rcall	.+0      	; 0x22c2 <TIMER_DeInit+0x6>
    22c2:	0f 92       	push	r0
    22c4:	cd b7       	in	r28, 0x3d	; 61
    22c6:	de b7       	in	r29, 0x3e	; 62
    22c8:	89 83       	std	Y+1, r24	; 0x01
	switch(timer){
    22ca:	89 81       	ldd	r24, Y+1	; 0x01
    22cc:	28 2f       	mov	r18, r24
    22ce:	30 e0       	ldi	r19, 0x00	; 0
    22d0:	3b 83       	std	Y+3, r19	; 0x03
    22d2:	2a 83       	std	Y+2, r18	; 0x02
    22d4:	8a 81       	ldd	r24, Y+2	; 0x02
    22d6:	9b 81       	ldd	r25, Y+3	; 0x03
    22d8:	81 30       	cpi	r24, 0x01	; 1
    22da:	91 05       	cpc	r25, r1
    22dc:	d1 f0       	breq	.+52     	; 0x2312 <TIMER_DeInit+0x56>
    22de:	2a 81       	ldd	r18, Y+2	; 0x02
    22e0:	3b 81       	ldd	r19, Y+3	; 0x03
    22e2:	22 30       	cpi	r18, 0x02	; 2
    22e4:	31 05       	cpc	r19, r1
    22e6:	79 f1       	breq	.+94     	; 0x2346 <TIMER_DeInit+0x8a>
    22e8:	8a 81       	ldd	r24, Y+2	; 0x02
    22ea:	9b 81       	ldd	r25, Y+3	; 0x03
    22ec:	00 97       	sbiw	r24, 0x00	; 0
    22ee:	d9 f5       	brne	.+118    	; 0x2366 <TIMER_DeInit+0xaa>
	case TIMER0: /*disable all timer 0 registers*/
		TCNT0 = 0;
    22f0:	e2 e5       	ldi	r30, 0x52	; 82
    22f2:	f0 e0       	ldi	r31, 0x00	; 0
    22f4:	10 82       	st	Z, r1
		TCCR0 = 0;
    22f6:	e3 e5       	ldi	r30, 0x53	; 83
    22f8:	f0 e0       	ldi	r31, 0x00	; 0
    22fa:	10 82       	st	Z, r1
		OCR0 = 0;
    22fc:	ec e5       	ldi	r30, 0x5C	; 92
    22fe:	f0 e0       	ldi	r31, 0x00	; 0
    2300:	10 82       	st	Z, r1
		TIMSK &= 0xFC;
    2302:	a9 e5       	ldi	r26, 0x59	; 89
    2304:	b0 e0       	ldi	r27, 0x00	; 0
    2306:	e9 e5       	ldi	r30, 0x59	; 89
    2308:	f0 e0       	ldi	r31, 0x00	; 0
    230a:	80 81       	ld	r24, Z
    230c:	8c 7f       	andi	r24, 0xFC	; 252
    230e:	8c 93       	st	X, r24
    2310:	2a c0       	rjmp	.+84     	; 0x2366 <TIMER_DeInit+0xaa>
		break;
	case TIMER1:/*disable all timer 1 registers*/
		TCNT1 = 0;
    2312:	ec e4       	ldi	r30, 0x4C	; 76
    2314:	f0 e0       	ldi	r31, 0x00	; 0
    2316:	11 82       	std	Z+1, r1	; 0x01
    2318:	10 82       	st	Z, r1
		OCR1A = 0;
    231a:	ea e4       	ldi	r30, 0x4A	; 74
    231c:	f0 e0       	ldi	r31, 0x00	; 0
    231e:	11 82       	std	Z+1, r1	; 0x01
    2320:	10 82       	st	Z, r1
		OCR1B = 0;
    2322:	e8 e4       	ldi	r30, 0x48	; 72
    2324:	f0 e0       	ldi	r31, 0x00	; 0
    2326:	11 82       	std	Z+1, r1	; 0x01
    2328:	10 82       	st	Z, r1
		TCCR1A = 0;
    232a:	ef e4       	ldi	r30, 0x4F	; 79
    232c:	f0 e0       	ldi	r31, 0x00	; 0
    232e:	10 82       	st	Z, r1
		TCCR1B = 0;
    2330:	ee e4       	ldi	r30, 0x4E	; 78
    2332:	f0 e0       	ldi	r31, 0x00	; 0
    2334:	10 82       	st	Z, r1
		TIMSK &= 0xC3;
    2336:	a9 e5       	ldi	r26, 0x59	; 89
    2338:	b0 e0       	ldi	r27, 0x00	; 0
    233a:	e9 e5       	ldi	r30, 0x59	; 89
    233c:	f0 e0       	ldi	r31, 0x00	; 0
    233e:	80 81       	ld	r24, Z
    2340:	83 7c       	andi	r24, 0xC3	; 195
    2342:	8c 93       	st	X, r24
    2344:	10 c0       	rjmp	.+32     	; 0x2366 <TIMER_DeInit+0xaa>
		break;
	case TIMER2:/*disable all timer 2 registers*/
		TCNT2 = 0;
    2346:	e4 e4       	ldi	r30, 0x44	; 68
    2348:	f0 e0       	ldi	r31, 0x00	; 0
    234a:	10 82       	st	Z, r1
		TCCR2 = 0;
    234c:	e5 e4       	ldi	r30, 0x45	; 69
    234e:	f0 e0       	ldi	r31, 0x00	; 0
    2350:	10 82       	st	Z, r1
		OCR2 = 0;
    2352:	e3 e4       	ldi	r30, 0x43	; 67
    2354:	f0 e0       	ldi	r31, 0x00	; 0
    2356:	10 82       	st	Z, r1
		TIMSK &=0x3F;
    2358:	a9 e5       	ldi	r26, 0x59	; 89
    235a:	b0 e0       	ldi	r27, 0x00	; 0
    235c:	e9 e5       	ldi	r30, 0x59	; 89
    235e:	f0 e0       	ldi	r31, 0x00	; 0
    2360:	80 81       	ld	r24, Z
    2362:	8f 73       	andi	r24, 0x3F	; 63
    2364:	8c 93       	st	X, r24
		break;

	}
}
    2366:	0f 90       	pop	r0
    2368:	0f 90       	pop	r0
    236a:	0f 90       	pop	r0
    236c:	cf 91       	pop	r28
    236e:	df 91       	pop	r29
    2370:	08 95       	ret

00002372 <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType*Config_Ptr)
{
    2372:	df 93       	push	r29
    2374:	cf 93       	push	r28
    2376:	00 d0       	rcall	.+0      	; 0x2378 <UART_init+0x6>
    2378:	00 d0       	rcall	.+0      	; 0x237a <UART_init+0x8>
    237a:	cd b7       	in	r28, 0x3d	; 61
    237c:	de b7       	in	r29, 0x3e	; 62
    237e:	9c 83       	std	Y+4, r25	; 0x04
    2380:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    2382:	1a 82       	std	Y+2, r1	; 0x02
    2384:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    2386:	eb e2       	ldi	r30, 0x2B	; 43
    2388:	f0 e0       	ldi	r31, 0x00	; 0
    238a:	82 e0       	ldi	r24, 0x02	; 2
    238c:	80 83       	st	Z, r24
	 * UDRIE = 0 Disable USART Data Register Empty Interrupt Enable
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2  obtained from frame_size variable in the configurations structure
	 ***********************************************************************/ 
	if (Config_Ptr->bits!= BITS_9){
    238e:	eb 81       	ldd	r30, Y+3	; 0x03
    2390:	fc 81       	ldd	r31, Y+4	; 0x04
    2392:	80 81       	ld	r24, Z
    2394:	87 30       	cpi	r24, 0x07	; 7
    2396:	29 f0       	breq	.+10     	; 0x23a2 <UART_init+0x30>
	UCSRB = (1<<RXEN) | (1<<TXEN);}
    2398:	ea e2       	ldi	r30, 0x2A	; 42
    239a:	f0 e0       	ldi	r31, 0x00	; 0
    239c:	88 e1       	ldi	r24, 0x18	; 24
    239e:	80 83       	st	Z, r24
    23a0:	04 c0       	rjmp	.+8      	; 0x23aa <UART_init+0x38>
	else{
		UCSRB = (1<<RXEN) | (1<<TXEN)|(1<<UCSZ2);
    23a2:	ea e2       	ldi	r30, 0x2A	; 42
    23a4:	f0 e0       	ldi	r31, 0x00	; 0
    23a6:	8c e1       	ldi	r24, 0x1C	; 28
    23a8:	80 83       	st	Z, r24
	 * UPM1:0    obtained from parity_mode variable in the configurations structure
	 * USBS      obtained from stop_bits variable in the configurations structure
	 * UCSZ1:0   obtained from frame_size variable in the configurations structure
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL);
    23aa:	e0 e4       	ldi	r30, 0x40	; 64
    23ac:	f0 e0       	ldi	r31, 0x00	; 0
    23ae:	80 e8       	ldi	r24, 0x80	; 128
    23b0:	80 83       	st	Z, r24
	UCSRC |= (UCSRC&0xf9)|((Config_Ptr->bits&0x03)<<1);
    23b2:	a0 e4       	ldi	r26, 0x40	; 64
    23b4:	b0 e0       	ldi	r27, 0x00	; 0
    23b6:	e0 e4       	ldi	r30, 0x40	; 64
    23b8:	f0 e0       	ldi	r31, 0x00	; 0
    23ba:	80 81       	ld	r24, Z
    23bc:	38 2f       	mov	r19, r24
    23be:	e0 e4       	ldi	r30, 0x40	; 64
    23c0:	f0 e0       	ldi	r31, 0x00	; 0
    23c2:	80 81       	ld	r24, Z
    23c4:	28 2f       	mov	r18, r24
    23c6:	29 7f       	andi	r18, 0xF9	; 249
    23c8:	eb 81       	ldd	r30, Y+3	; 0x03
    23ca:	fc 81       	ldd	r31, Y+4	; 0x04
    23cc:	80 81       	ld	r24, Z
    23ce:	88 2f       	mov	r24, r24
    23d0:	90 e0       	ldi	r25, 0x00	; 0
    23d2:	83 70       	andi	r24, 0x03	; 3
    23d4:	90 70       	andi	r25, 0x00	; 0
    23d6:	88 0f       	add	r24, r24
    23d8:	99 1f       	adc	r25, r25
    23da:	82 2b       	or	r24, r18
    23dc:	83 2b       	or	r24, r19
    23de:	8c 93       	st	X, r24
	UCSRC |=(UCSRC&0xcf)|((Config_Ptr->parity)<<4);
    23e0:	a0 e4       	ldi	r26, 0x40	; 64
    23e2:	b0 e0       	ldi	r27, 0x00	; 0
    23e4:	e0 e4       	ldi	r30, 0x40	; 64
    23e6:	f0 e0       	ldi	r31, 0x00	; 0
    23e8:	80 81       	ld	r24, Z
    23ea:	38 2f       	mov	r19, r24
    23ec:	e0 e4       	ldi	r30, 0x40	; 64
    23ee:	f0 e0       	ldi	r31, 0x00	; 0
    23f0:	80 81       	ld	r24, Z
    23f2:	28 2f       	mov	r18, r24
    23f4:	2f 7c       	andi	r18, 0xCF	; 207
    23f6:	eb 81       	ldd	r30, Y+3	; 0x03
    23f8:	fc 81       	ldd	r31, Y+4	; 0x04
    23fa:	81 81       	ldd	r24, Z+1	; 0x01
    23fc:	88 2f       	mov	r24, r24
    23fe:	90 e0       	ldi	r25, 0x00	; 0
    2400:	82 95       	swap	r24
    2402:	92 95       	swap	r25
    2404:	90 7f       	andi	r25, 0xF0	; 240
    2406:	98 27       	eor	r25, r24
    2408:	80 7f       	andi	r24, 0xF0	; 240
    240a:	98 27       	eor	r25, r24
    240c:	82 2b       	or	r24, r18
    240e:	83 2b       	or	r24, r19
    2410:	8c 93       	st	X, r24
	UCSRC |=(UCSRC&0xf7)|((Config_Ptr->stop_bits)<<3);
    2412:	a0 e4       	ldi	r26, 0x40	; 64
    2414:	b0 e0       	ldi	r27, 0x00	; 0
    2416:	e0 e4       	ldi	r30, 0x40	; 64
    2418:	f0 e0       	ldi	r31, 0x00	; 0
    241a:	80 81       	ld	r24, Z
    241c:	38 2f       	mov	r19, r24
    241e:	e0 e4       	ldi	r30, 0x40	; 64
    2420:	f0 e0       	ldi	r31, 0x00	; 0
    2422:	80 81       	ld	r24, Z
    2424:	28 2f       	mov	r18, r24
    2426:	27 7f       	andi	r18, 0xF7	; 247
    2428:	eb 81       	ldd	r30, Y+3	; 0x03
    242a:	fc 81       	ldd	r31, Y+4	; 0x04
    242c:	82 81       	ldd	r24, Z+2	; 0x02
    242e:	88 2f       	mov	r24, r24
    2430:	90 e0       	ldi	r25, 0x00	; 0
    2432:	88 0f       	add	r24, r24
    2434:	99 1f       	adc	r25, r25
    2436:	88 0f       	add	r24, r24
    2438:	99 1f       	adc	r25, r25
    243a:	88 0f       	add	r24, r24
    243c:	99 1f       	adc	r25, r25
    243e:	82 2b       	or	r24, r18
    2440:	83 2b       	or	r24, r19
    2442:	8c 93       	st	X, r24
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (Config_Ptr->baud_rate * 8UL))) - 1);
    2444:	eb 81       	ldd	r30, Y+3	; 0x03
    2446:	fc 81       	ldd	r31, Y+4	; 0x04
    2448:	83 81       	ldd	r24, Z+3	; 0x03
    244a:	94 81       	ldd	r25, Z+4	; 0x04
    244c:	a5 81       	ldd	r26, Z+5	; 0x05
    244e:	b6 81       	ldd	r27, Z+6	; 0x06
    2450:	88 0f       	add	r24, r24
    2452:	99 1f       	adc	r25, r25
    2454:	aa 1f       	adc	r26, r26
    2456:	bb 1f       	adc	r27, r27
    2458:	88 0f       	add	r24, r24
    245a:	99 1f       	adc	r25, r25
    245c:	aa 1f       	adc	r26, r26
    245e:	bb 1f       	adc	r27, r27
    2460:	88 0f       	add	r24, r24
    2462:	99 1f       	adc	r25, r25
    2464:	aa 1f       	adc	r26, r26
    2466:	bb 1f       	adc	r27, r27
    2468:	9c 01       	movw	r18, r24
    246a:	ad 01       	movw	r20, r26
    246c:	80 e0       	ldi	r24, 0x00	; 0
    246e:	92 e1       	ldi	r25, 0x12	; 18
    2470:	aa e7       	ldi	r26, 0x7A	; 122
    2472:	b0 e0       	ldi	r27, 0x00	; 0
    2474:	bc 01       	movw	r22, r24
    2476:	cd 01       	movw	r24, r26
    2478:	0e 94 e7 12 	call	0x25ce	; 0x25ce <__udivmodsi4>
    247c:	da 01       	movw	r26, r20
    247e:	c9 01       	movw	r24, r18
    2480:	01 97       	sbiw	r24, 0x01	; 1
    2482:	9a 83       	std	Y+2, r25	; 0x02
    2484:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    2486:	e0 e4       	ldi	r30, 0x40	; 64
    2488:	f0 e0       	ldi	r31, 0x00	; 0
    248a:	89 81       	ldd	r24, Y+1	; 0x01
    248c:	9a 81       	ldd	r25, Y+2	; 0x02
    248e:	89 2f       	mov	r24, r25
    2490:	99 27       	eor	r25, r25
    2492:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    2494:	e9 e2       	ldi	r30, 0x29	; 41
    2496:	f0 e0       	ldi	r31, 0x00	; 0
    2498:	89 81       	ldd	r24, Y+1	; 0x01
    249a:	80 83       	st	Z, r24
}
    249c:	0f 90       	pop	r0
    249e:	0f 90       	pop	r0
    24a0:	0f 90       	pop	r0
    24a2:	0f 90       	pop	r0
    24a4:	cf 91       	pop	r28
    24a6:	df 91       	pop	r29
    24a8:	08 95       	ret

000024aa <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    24aa:	df 93       	push	r29
    24ac:	cf 93       	push	r28
    24ae:	0f 92       	push	r0
    24b0:	cd b7       	in	r28, 0x3d	; 61
    24b2:	de b7       	in	r29, 0x3e	; 62
    24b4:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    24b6:	eb e2       	ldi	r30, 0x2B	; 43
    24b8:	f0 e0       	ldi	r31, 0x00	; 0
    24ba:	80 81       	ld	r24, Z
    24bc:	88 2f       	mov	r24, r24
    24be:	90 e0       	ldi	r25, 0x00	; 0
    24c0:	80 72       	andi	r24, 0x20	; 32
    24c2:	90 70       	andi	r25, 0x00	; 0
    24c4:	00 97       	sbiw	r24, 0x00	; 0
    24c6:	b9 f3       	breq	.-18     	; 0x24b6 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    24c8:	ec e2       	ldi	r30, 0x2C	; 44
    24ca:	f0 e0       	ldi	r31, 0x00	; 0
    24cc:	89 81       	ldd	r24, Y+1	; 0x01
    24ce:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    24d0:	0f 90       	pop	r0
    24d2:	cf 91       	pop	r28
    24d4:	df 91       	pop	r29
    24d6:	08 95       	ret

000024d8 <UART_receiveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_receiveByte(void)
{
    24d8:	df 93       	push	r29
    24da:	cf 93       	push	r28
    24dc:	cd b7       	in	r28, 0x3d	; 61
    24de:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    24e0:	eb e2       	ldi	r30, 0x2B	; 43
    24e2:	f0 e0       	ldi	r31, 0x00	; 0
    24e4:	80 81       	ld	r24, Z
    24e6:	88 23       	and	r24, r24
    24e8:	dc f7       	brge	.-10     	; 0x24e0 <UART_receiveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    24ea:	ec e2       	ldi	r30, 0x2C	; 44
    24ec:	f0 e0       	ldi	r31, 0x00	; 0
    24ee:	80 81       	ld	r24, Z
}
    24f0:	cf 91       	pop	r28
    24f2:	df 91       	pop	r29
    24f4:	08 95       	ret

000024f6 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    24f6:	df 93       	push	r29
    24f8:	cf 93       	push	r28
    24fa:	00 d0       	rcall	.+0      	; 0x24fc <UART_sendString+0x6>
    24fc:	0f 92       	push	r0
    24fe:	cd b7       	in	r28, 0x3d	; 61
    2500:	de b7       	in	r29, 0x3e	; 62
    2502:	9b 83       	std	Y+3, r25	; 0x03
    2504:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2506:	19 82       	std	Y+1, r1	; 0x01
    2508:	0e c0       	rjmp	.+28     	; 0x2526 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    250a:	89 81       	ldd	r24, Y+1	; 0x01
    250c:	28 2f       	mov	r18, r24
    250e:	30 e0       	ldi	r19, 0x00	; 0
    2510:	8a 81       	ldd	r24, Y+2	; 0x02
    2512:	9b 81       	ldd	r25, Y+3	; 0x03
    2514:	fc 01       	movw	r30, r24
    2516:	e2 0f       	add	r30, r18
    2518:	f3 1f       	adc	r31, r19
    251a:	80 81       	ld	r24, Z
    251c:	0e 94 55 12 	call	0x24aa	; 0x24aa <UART_sendByte>
		i++;
    2520:	89 81       	ldd	r24, Y+1	; 0x01
    2522:	8f 5f       	subi	r24, 0xFF	; 255
    2524:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    2526:	89 81       	ldd	r24, Y+1	; 0x01
    2528:	28 2f       	mov	r18, r24
    252a:	30 e0       	ldi	r19, 0x00	; 0
    252c:	8a 81       	ldd	r24, Y+2	; 0x02
    252e:	9b 81       	ldd	r25, Y+3	; 0x03
    2530:	fc 01       	movw	r30, r24
    2532:	e2 0f       	add	r30, r18
    2534:	f3 1f       	adc	r31, r19
    2536:	80 81       	ld	r24, Z
    2538:	88 23       	and	r24, r24
    253a:	39 f7       	brne	.-50     	; 0x250a <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    253c:	0f 90       	pop	r0
    253e:	0f 90       	pop	r0
    2540:	0f 90       	pop	r0
    2542:	cf 91       	pop	r28
    2544:	df 91       	pop	r29
    2546:	08 95       	ret

00002548 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    2548:	0f 93       	push	r16
    254a:	1f 93       	push	r17
    254c:	df 93       	push	r29
    254e:	cf 93       	push	r28
    2550:	00 d0       	rcall	.+0      	; 0x2552 <UART_receiveString+0xa>
    2552:	0f 92       	push	r0
    2554:	cd b7       	in	r28, 0x3d	; 61
    2556:	de b7       	in	r29, 0x3e	; 62
    2558:	9b 83       	std	Y+3, r25	; 0x03
    255a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    255c:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_receiveByte();
    255e:	89 81       	ldd	r24, Y+1	; 0x01
    2560:	28 2f       	mov	r18, r24
    2562:	30 e0       	ldi	r19, 0x00	; 0
    2564:	8a 81       	ldd	r24, Y+2	; 0x02
    2566:	9b 81       	ldd	r25, Y+3	; 0x03
    2568:	8c 01       	movw	r16, r24
    256a:	02 0f       	add	r16, r18
    256c:	13 1f       	adc	r17, r19
    256e:	0e 94 6c 12 	call	0x24d8	; 0x24d8 <UART_receiveByte>
    2572:	f8 01       	movw	r30, r16
    2574:	80 83       	st	Z, r24
    2576:	0f c0       	rjmp	.+30     	; 0x2596 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    2578:	89 81       	ldd	r24, Y+1	; 0x01
    257a:	8f 5f       	subi	r24, 0xFF	; 255
    257c:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_receiveByte();
    257e:	89 81       	ldd	r24, Y+1	; 0x01
    2580:	28 2f       	mov	r18, r24
    2582:	30 e0       	ldi	r19, 0x00	; 0
    2584:	8a 81       	ldd	r24, Y+2	; 0x02
    2586:	9b 81       	ldd	r25, Y+3	; 0x03
    2588:	8c 01       	movw	r16, r24
    258a:	02 0f       	add	r16, r18
    258c:	13 1f       	adc	r17, r19
    258e:	0e 94 6c 12 	call	0x24d8	; 0x24d8 <UART_receiveByte>
    2592:	f8 01       	movw	r30, r16
    2594:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_receiveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    2596:	89 81       	ldd	r24, Y+1	; 0x01
    2598:	28 2f       	mov	r18, r24
    259a:	30 e0       	ldi	r19, 0x00	; 0
    259c:	8a 81       	ldd	r24, Y+2	; 0x02
    259e:	9b 81       	ldd	r25, Y+3	; 0x03
    25a0:	fc 01       	movw	r30, r24
    25a2:	e2 0f       	add	r30, r18
    25a4:	f3 1f       	adc	r31, r19
    25a6:	80 81       	ld	r24, Z
    25a8:	83 32       	cpi	r24, 0x23	; 35
    25aa:	31 f7       	brne	.-52     	; 0x2578 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_receiveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    25ac:	89 81       	ldd	r24, Y+1	; 0x01
    25ae:	28 2f       	mov	r18, r24
    25b0:	30 e0       	ldi	r19, 0x00	; 0
    25b2:	8a 81       	ldd	r24, Y+2	; 0x02
    25b4:	9b 81       	ldd	r25, Y+3	; 0x03
    25b6:	fc 01       	movw	r30, r24
    25b8:	e2 0f       	add	r30, r18
    25ba:	f3 1f       	adc	r31, r19
    25bc:	10 82       	st	Z, r1
}
    25be:	0f 90       	pop	r0
    25c0:	0f 90       	pop	r0
    25c2:	0f 90       	pop	r0
    25c4:	cf 91       	pop	r28
    25c6:	df 91       	pop	r29
    25c8:	1f 91       	pop	r17
    25ca:	0f 91       	pop	r16
    25cc:	08 95       	ret

000025ce <__udivmodsi4>:
    25ce:	a1 e2       	ldi	r26, 0x21	; 33
    25d0:	1a 2e       	mov	r1, r26
    25d2:	aa 1b       	sub	r26, r26
    25d4:	bb 1b       	sub	r27, r27
    25d6:	fd 01       	movw	r30, r26
    25d8:	0d c0       	rjmp	.+26     	; 0x25f4 <__udivmodsi4_ep>

000025da <__udivmodsi4_loop>:
    25da:	aa 1f       	adc	r26, r26
    25dc:	bb 1f       	adc	r27, r27
    25de:	ee 1f       	adc	r30, r30
    25e0:	ff 1f       	adc	r31, r31
    25e2:	a2 17       	cp	r26, r18
    25e4:	b3 07       	cpc	r27, r19
    25e6:	e4 07       	cpc	r30, r20
    25e8:	f5 07       	cpc	r31, r21
    25ea:	20 f0       	brcs	.+8      	; 0x25f4 <__udivmodsi4_ep>
    25ec:	a2 1b       	sub	r26, r18
    25ee:	b3 0b       	sbc	r27, r19
    25f0:	e4 0b       	sbc	r30, r20
    25f2:	f5 0b       	sbc	r31, r21

000025f4 <__udivmodsi4_ep>:
    25f4:	66 1f       	adc	r22, r22
    25f6:	77 1f       	adc	r23, r23
    25f8:	88 1f       	adc	r24, r24
    25fa:	99 1f       	adc	r25, r25
    25fc:	1a 94       	dec	r1
    25fe:	69 f7       	brne	.-38     	; 0x25da <__udivmodsi4_loop>
    2600:	60 95       	com	r22
    2602:	70 95       	com	r23
    2604:	80 95       	com	r24
    2606:	90 95       	com	r25
    2608:	9b 01       	movw	r18, r22
    260a:	ac 01       	movw	r20, r24
    260c:	bd 01       	movw	r22, r26
    260e:	cf 01       	movw	r24, r30
    2610:	08 95       	ret

00002612 <__prologue_saves__>:
    2612:	2f 92       	push	r2
    2614:	3f 92       	push	r3
    2616:	4f 92       	push	r4
    2618:	5f 92       	push	r5
    261a:	6f 92       	push	r6
    261c:	7f 92       	push	r7
    261e:	8f 92       	push	r8
    2620:	9f 92       	push	r9
    2622:	af 92       	push	r10
    2624:	bf 92       	push	r11
    2626:	cf 92       	push	r12
    2628:	df 92       	push	r13
    262a:	ef 92       	push	r14
    262c:	ff 92       	push	r15
    262e:	0f 93       	push	r16
    2630:	1f 93       	push	r17
    2632:	cf 93       	push	r28
    2634:	df 93       	push	r29
    2636:	cd b7       	in	r28, 0x3d	; 61
    2638:	de b7       	in	r29, 0x3e	; 62
    263a:	ca 1b       	sub	r28, r26
    263c:	db 0b       	sbc	r29, r27
    263e:	0f b6       	in	r0, 0x3f	; 63
    2640:	f8 94       	cli
    2642:	de bf       	out	0x3e, r29	; 62
    2644:	0f be       	out	0x3f, r0	; 63
    2646:	cd bf       	out	0x3d, r28	; 61
    2648:	09 94       	ijmp

0000264a <__epilogue_restores__>:
    264a:	2a 88       	ldd	r2, Y+18	; 0x12
    264c:	39 88       	ldd	r3, Y+17	; 0x11
    264e:	48 88       	ldd	r4, Y+16	; 0x10
    2650:	5f 84       	ldd	r5, Y+15	; 0x0f
    2652:	6e 84       	ldd	r6, Y+14	; 0x0e
    2654:	7d 84       	ldd	r7, Y+13	; 0x0d
    2656:	8c 84       	ldd	r8, Y+12	; 0x0c
    2658:	9b 84       	ldd	r9, Y+11	; 0x0b
    265a:	aa 84       	ldd	r10, Y+10	; 0x0a
    265c:	b9 84       	ldd	r11, Y+9	; 0x09
    265e:	c8 84       	ldd	r12, Y+8	; 0x08
    2660:	df 80       	ldd	r13, Y+7	; 0x07
    2662:	ee 80       	ldd	r14, Y+6	; 0x06
    2664:	fd 80       	ldd	r15, Y+5	; 0x05
    2666:	0c 81       	ldd	r16, Y+4	; 0x04
    2668:	1b 81       	ldd	r17, Y+3	; 0x03
    266a:	aa 81       	ldd	r26, Y+2	; 0x02
    266c:	b9 81       	ldd	r27, Y+1	; 0x01
    266e:	ce 0f       	add	r28, r30
    2670:	d1 1d       	adc	r29, r1
    2672:	0f b6       	in	r0, 0x3f	; 63
    2674:	f8 94       	cli
    2676:	de bf       	out	0x3e, r29	; 62
    2678:	0f be       	out	0x3f, r0	; 63
    267a:	cd bf       	out	0x3d, r28	; 61
    267c:	ed 01       	movw	r28, r26
    267e:	08 95       	ret

00002680 <_exit>:
    2680:	f8 94       	cli

00002682 <__stop_program>:
    2682:	ff cf       	rjmp	.-2      	; 0x2682 <__stop_program>
